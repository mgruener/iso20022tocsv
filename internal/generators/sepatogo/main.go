// Modified copy of https://github.com/dminGod/SepaToGo to make it usable as a go generator.

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"

	"aqwari.net/xml/xsd"
	"aqwari.net/xml/xsdgen"
)

type schema struct {
	Pkg      string
	TargetNS string
	Folder   string
}

func main() {
	path := fmt.Sprintf("%s/*.xsd", os.Args[1])
	files, err := filepath.Glob(path)
	if err != nil {
		fmt.Printf("Could not get details of the files - Error:  %v\n", err.Error())
		os.Exit(1)
	}

	schemas := []schema{}
	set := map[string]bool{}

	for _, f := range files {
		fmt.Printf("Finished: %v \n", f)
		pkg, folder, err := generateFile(f)
		if err != nil {
			fmt.Printf("failed to generate go package for '%s': %s\n", f, err)
			continue
		}
		targetNS, err := getTargetNS(f)
		if err != nil {
			fmt.Printf("failed to get target namespace for '%s': %s\n", f, err)
			os.Exit(1)
		}
		if _, ok := set[targetNS]; ok {
			continue
		}
		set[targetNS] = true
		schemas = append(schemas, schema{
			Pkg:      pkg,
			TargetNS: targetNS,
			Folder:   folder,
		})
	}

	err = renderISO20022Package(schemas)
	if err != nil {
		fmt.Printf("failed to generate global iso20022 package: %s", err)
		os.Exit(1)
	}
}

func generateFile(f string) (string, string, error) {
	var cfg xsdgen.Config

	// Windows:
	fn := strings.Replace(f, "\\", "/", -1)

	// File and folder name:
	_, fn = path.Split(fn)
	parts := strings.Split(fn, ".")
	// https://sonra.io/2017/05/22/eight-things-need-know-iso-20022-xml-messages/
	businessArea := parts[0]
	messageID := parts[1]
	variant := parts[2]
	version := parts[3]
	messageDefinitionID := fmt.Sprintf("%s_%s_%s_%s", businessArea, messageID, variant, version)
	file := fmt.Sprintf("%s.gen.go", messageDefinitionID)
	folder := fmt.Sprintf("%s/%s/%s/%s", businessArea, messageID, variant, version)
	pt := fmt.Sprintf("%s/%s", folder, file)

	err := os.MkdirAll(folder, 0777)
	if err != nil {
		return "", "", fmt.Errorf("failed to create directory '%s': %s", folder, err)
	}

	cfg.Option(
		xsdgen.IgnoreAttributes("id", "href", "offset"),
		xsdgen.IgnoreElements("comment"),
		xsdgen.PackageName(messageDefinitionID),
		xsdgen.Replace("_", ""),
		xsdgen.HandleSOAPArrayType(),
		xsdgen.SOAPArrayAsSlice(),
	)

	if err := cfg.GenCLI("-o", pt, f); err != nil {
		return "", "", err
	}
	return messageDefinitionID, folder, nil
}

func getTargetNS(f string) (string, error) {
	data, err := ioutil.ReadFile(f)
	if err != nil {
		return "", fmt.Errorf("There was an error reading the file : %v", err.Error())
	}

	schemas, err := xsd.Parse(data)
	//if len(schemas) > 1 {
	//	return "", fmt.Errorf("more than 1 schema found: %d", len(schemas))
	//}

	return schemas[0].TargetNS, nil
}

func renderISO20022Package(schemas []schema) error {
	templateData := struct {
		Schemas []schema
	}{
		Schemas: schemas,
	}

	td := template.Must(template.New("").Parse(templateText))
	var buf bytes.Buffer
	err := td.Execute(&buf, templateData)
	if err != nil {
		return fmt.Errorf("failed to render iso20022 package code: %s", err)
	}

	f, err := os.Create("iso20022.gen.go")
	if err != nil {
		return fmt.Errorf("failed to write iso20022 package code: %s", err)
	}
	defer f.Close()

	p, err := format.Source(buf.Bytes())
	if err != nil {
		f.Write(buf.Bytes())
		return fmt.Errorf("failed to format iso20022 package code: %s", err)
	}
	f.Write(p)

	return nil
}

var templateText = `
// Code generated by go generate; DO NOT EDIT.
/*
Copyright Â© 2021 Michael Gruener

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package iso20022

import (
	"encoding/xml"
	"fmt"
	"io"
	"io/ioutil"
	"os"

{{- range .Schemas }}
	{{ .Pkg }} "github.com/mgruener/iso20022tpl/internal/iso20022/{{ .Folder }}"
{{- end }}
)

func New(file string) (interface{}, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	return NewFromReader(f)
}

func NewFromReader(reader io.Reader) (interface{}, error) {
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}

	var base xmlbase

	if err := xml.Unmarshal(data, &base); err != nil {
		return nil, err
	}

	return load(base.XMLName.Space, data)
}

func load(space string, data []byte) (interface{}, error) {
	var globalErr error
	var doc interface{}
	switch space {
{{- range .Schemas }}
	case "{{ .TargetNS }}":
		var isoDoc {{ .Pkg }}.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as {{ .Pkg }} document")
		}
		doc = isoDoc
{{- end }}
	default:
		return nil, fmt.Errorf("unknown schema '%s'", space)
	}

	return doc, globalErr
}
`
