// Code generated by main. DO NOT EDIT.

package semt_006_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account7 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 AcctSvcr,omitempty"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Prtry"`
}

type AccountIdentification3 struct {
	Id   AccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	Issr Max8Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Issr"`
	Inf  Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Inf"`
}

type AccountIdentificationAndPurpose struct {
	Id   AccountIdentification1            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	Purp SecuritiesAccountPurposeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Purp"`
}

type AccountIdentificationFormatChoice struct {
	SmplId    AccountIdentification1          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SmplId"`
	IdAndPurp AccountIdentificationAndPurpose `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 IdAndPurp"`
	IdAsDSS   AccountIdentification3          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 IdAsDSS"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AdditionalReference2 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Ref"`
	RefIssr PartyIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// May be one of DRIP, CAPG, DVCA, DVOP, DVSE, LIQU, MRGR, NAME, SOFF, SPLF, SPLR, TEND, BONU, RHDI, EXRI, CHAN, REDO, EXOP, EXOF, DECR
type CorporateActionEventType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 DtTm"`
}

type DatePeriodDetails struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ToDt"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	StmtOfInvstmtFndTxsV02 StatementOfInvestmentFundTransactionsV02 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StmtOfInvstmtFndTxsV02"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// May be one of YEAR, SEMI, QUTR, TOMN, MNTH, TWMN, TOWK, WEEK, DAIL, ADHO, INDA, OVNG, ONDE
type EventFrequency1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Txt"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Unit"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type Intermediary11 struct {
	Id         PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	Acct       Account7                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Acct,omitempty"`
	Role       InvestmentFundRole2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Role,omitempty"`
	XtndedRole Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 XtndedRole,omitempty"`
}

type InvestmentAccount25 struct {
	Id        AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	Nm        Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Nm,omitempty"`
	Dsgnt     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Dsgnt,omitempty"`
	IntrmyInf []Intermediary11           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 IntrmyInf,omitempty"`
	AcctSvcr  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 AcctSvcr,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

type InvestmentFundTransaction3 struct {
	TxTp                TransactionType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TxTp"`
	XtndedTxTp          Extended350Code               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 XtndedTxTp"`
	CorpActnEvtTp       CorporateActionEventType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CorpActnEvtTp"`
	XtndedCorpActnEvtTp Extended350Code               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 XtndedCorpActnEvtTp"`
	BookgSts            TransactionStatus1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BookgSts,omitempty"`
	MstrRef             Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 MstrRef,omitempty"`
	OrdrRef             Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 OrdrRef,omitempty"`
	ClntRef             Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ClntRef,omitempty"`
	DealRef             Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 DealRef,omitempty"`
	LegId               Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 LegId,omitempty"`
	LegExctnId          Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 LegExctnId,omitempty"`
	OrdrDtTm            ISODateTime                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 OrdrDtTm,omitempty"`
	SttldTxInd          bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SttldTxInd"`
	RegdTxInd           bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RegdTxInd"`
	UnitsQty            FinancialInstrumentQuantity1  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 UnitsQty"`
	CdtDbt              CreditDebitCode               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CdtDbt"`
	Rvsl                ReversalCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Rvsl,omitempty"`
	SttlmAmt            ActiveCurrencyAndAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SttlmAmt,omitempty"`
	SttlmDt             ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SttlmDt,omitempty"`
	TradDtTm            DateAndDateTimeChoice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TradDtTm"`
	CumDvddInd          bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CumDvddInd"`
	PrtlyExctdInd       bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PrtlyExctdInd"`
	PricDtls            UnitPrice11                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PricDtls,omitempty"`
}

type InvestmentFundTransactionsByFund2 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SplmtryId,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SctiesForm,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ClssTp,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 DstrbtnPlcy,omitempty"`
	TxDtls      []InvestmentFundTransaction3  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TxDtls"`
	BalByPg     PaginationBalance1            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BalByPg,omitempty"`
}

type LongPostalAddress1Choice struct {
	Ustrd Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Ustrd"`
	Strd  StructuredLongPostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Strd"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

// Must be at least 1 items long
type Max8Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CreDtTm"`
}

type NameAndAddress2 struct {
	Nm  Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Nm"`
	Adr LongPostalAddress1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Adr,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Adr,omitempty"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 LastPgInd"`
}

type PaginationBalance1 struct {
	FrstOpngBal   FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 FrstOpngBal,omitempty"`
	IntrmyOpngBal FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 IntrmyOpngBal,omitempty"`
	FnlClsgBal    FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 FnlClsgBal,omitempty"`
	IntrmyClsgBal FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 IntrmyClsgBal,omitempty"`
}

type PartyIdentification1Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PrtryId"`
	NmAndAdr NameAndAddress2        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 NmAndAdr"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Amt"`
}

// Must be at least 1 items long
type RICIdentifier string

// May be one of RVCD, RVDB
type ReversalCode string

// May be one of MARG, SHOR, ABRD, CEND, DVPA, PHYS
type SecuritiesAccountPurposeType1Code string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 OthrPrtryId"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
}

type Statement8 struct {
	Ref       Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Ref"`
	StmtPrd   DatePeriodDetails       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StmtPrd"`
	CreDtTm   DateAndDateTimeChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CreDtTm,omitempty"`
	Frqcy     EventFrequency1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Frqcy,omitempty"`
	UpdTp     StatementUpdateTypeCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 UpdTp"`
	ActvtyInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ActvtyInd"`
	RptNb     Max5NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RptNb,omitempty"`
}

type StatementOfInvestmentFundTransactionsV02 struct {
	MsgId           MessageIdentification1              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 MsgId"`
	PrvsRef         []AdditionalReference2              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PrvsRef,omitempty"`
	RltdRef         []AdditionalReference2              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RltdRef,omitempty"`
	MsgPgntn        Pagination                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 MsgPgntn"`
	StmtGnlDtls     Statement8                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StmtGnlDtls"`
	InvstmtAcctDtls InvestmentAccount25                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 InvstmtAcctDtls"`
	TxOnAcct        []InvestmentFundTransactionsByFund2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TxOnAcct,omitempty"`
	SubAcctDtls     []SubAccountIdentification6         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 SubAcctDtls,omitempty"`
	Xtnsn           []Extension1                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Xtnsn,omitempty"`
}

// May be one of COMP, DELT
type StatementUpdateTypeCode string

type StructuredLongPostalAddress1 struct {
	BldgNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 BldgNm,omitempty"`
	StrtNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StrtNm,omitempty"`
	StrtBldgId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 StrtBldgId,omitempty"`
	Flr        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Flr,omitempty"`
	TwnNm      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TwnNm"`
	DstrctNm   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 DstrctNm,omitempty"`
	RgnId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 RgnId,omitempty"`
	Stat       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Stat,omitempty"`
	CtyId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 CtyId,omitempty"`
	Ctry       CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Ctry"`
	PstCdId    Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PstCdId"`
	POB        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 POB,omitempty"`
}

type SubAccountIdentification6 struct {
	Id          AccountIdentificationFormatChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Id"`
	ActvtyInd   bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 ActvtyInd"`
	TxOnSubAcct []InvestmentFundTransactionsByFund2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 TxOnSubAcct,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

// May be one of RVSL, REBO, CANC
type TransactionStatus1Code string

// May be one of REDM, SUBS, SSPL, RWPL, TRIN, TOUT, SWII, SWIO, SUAA, REAA
type TransactionType2Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type UnitPrice11 struct {
	Tp       TypeOfPrice10Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Tp"`
	XtndedTp Extended350Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 XtndedTp"`
	Val      PriceValue1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 Val"`
	PricMtd  PriceMethod1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.006.001.02 PricMtd,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
