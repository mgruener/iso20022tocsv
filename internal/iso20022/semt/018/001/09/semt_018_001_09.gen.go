// Code generated by main. DO NOT EDIT.

package semt_018_001_09

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus21Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason9 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type AcknowledgementReason12Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type AcknowledgementReason9 struct {
	Cd          AcknowledgementReason12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AmountAndDirection51 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CdtDbtInd"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 OrgnlCcyAndOrdrdAmt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BeneficialOwnership4Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of BLPA, BLCH
type BlockTrade1Code string

type BlockTrade4Choice struct {
	Cd    BlockTrade1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type CancellationReason19Choice struct {
	Cd    CancelledStatusReason13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type CancellationReason9 struct {
	Cd          CancellationReason19Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type CancellationStatus14Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []CancellationReason9 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CTHP
type CancelledStatusReason13Code string

// May be one of GROS, NETS
type CashSettlementSystem2Code string

type CashSettlementSystem4Choice struct {
	Cd    CashSettlementSystem2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type CentralCounterPartyEligibility4Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, COOP, CLSA, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH, ACCU, MTNG, INFO, TNDP
type CorporateActionEventType28Code string

type CorporateActionEventType73Choice struct {
	Cd    CorporateActionEventType28Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 DtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of OPEN, UKWN
type DateType4Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	SctiesTxPdgRpt SecuritiesTransactionPendingReportV09 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SctiesTxPdgRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{5}
type Exact5NumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CDLR, CSDH, CVAL, INBC
type FailingReason2Code string

type FailingReason8 struct {
	Cd          FailingReason8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type FailingReason8Choice struct {
	Cd    FailingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type FailingStatus10Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []FailingReason8 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AmtsdVal"`
}

type Frequency25Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of COLL, CLAI, OTHR, RODE, SPLI, THRD, TRAN
type GeneratedReason3Code string

type GeneratedReason5 struct {
	Cd          GeneratedReasons5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type GeneratedReasons5Choice struct {
	Cd    GeneratedReason3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type GeneratedStatus7Choice struct {
	NoSpcfdRsn NoReasonCode       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []GeneratedReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id,omitempty"`
}

type HoldIndicator6 struct {
	Ind bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Rsn []RegistrationReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type InstructionProcessingStatus22Choice struct {
	PdgPrcg    PendingProcessingStatus11Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PdgPrcg"`
	CxlReqd    ProprietaryReason4                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CxlReqd"`
	AckdAccptd AcknowledgedAcceptedStatus21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AckdAccptd"`
	Canc       CancellationStatus14Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Canc"`
	Gnrtd      GeneratedStatus7Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Gnrtd"`
	Rpr        RepairStatus12Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rpr"`
	PdgCxl     PendingStatus38Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PdgCxl"`
	ModReqd    ProprietaryReason4                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ModReqd"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LetterOfGuarantee4Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// May be one of CLNT, MAKT
type MarketClientSide1Code string

type MarketClientSide6Choice struct {
	Cd    MarketClientSide1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type MarketIdentification1Choice struct {
	MktIdrCd MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MktIdrCd"`
	Desc     Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Desc"`
}

type MarketIdentification84 struct {
	Id MarketIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id,omitempty"`
	Tp MarketType8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Tp"`
}

// May be one of PRIM, SECM, OTCO, VARI, EXCH
type MarketType2Code string

type MarketType8Choice struct {
	Cd    MarketType2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type MatchingStatus24Choice struct {
	Mtchd  ProprietaryReason4          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Mtchd"`
	Umtchd UnmatchedStatus16Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Umtchd"`
	Prtry  ProprietaryStatusAndReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Adr,omitempty"`
}

type NettingEligibility4Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of NORE
type NoReasonCode string

type Number3Choice struct {
	Shrt Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Shrt"`
	Lng  Exact5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Lng"`
}

type OriginalAndCurrentQuantities1 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AmtsdVal"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Tp"`
}

// May be one of A144, NRST, RSTR
type OwnershipLegalRestrictions1Code string

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LastPgInd"`
}

type PartyIdentification44Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AnyBIC"`
	NmAndAdr NameAndAddress5  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ctry"`
}

type PartyIdentification71Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NmAndAdr"`
}

type PartyIdentification91 struct {
	Id     PartyIdentification44Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	LEI    LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
	PrcgId Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrcgId,omitempty"`
}

type PartyIdentification92Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AnyBIC"`
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrtryId"`
}

type PartyIdentification98 struct {
	Id  PartyIdentification92Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
}

type PartyIdentificationAndAccount117 struct {
	Id        PartyIdentification71Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	LEI       LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
	SfkpgAcct SecuritiesAccount19         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgAcct,omitempty"`
	PrcgId    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrcgId,omitempty"`
}

type PendingProcessingReason10Choice struct {
	Cd    PendingProcessingReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT, CSDH, CVAL, CDEL, CDLR, CDAC, INBC
type PendingProcessingReason2Code string

type PendingProcessingReason8 struct {
	Cd          PendingProcessingReason10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type PendingProcessingStatus11Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []PendingProcessingReason8 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type PendingReason15 struct {
	Cd          PendingReason27Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type PendingReason16 struct {
	Cd          PendingReason28Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type PendingReason27Choice struct {
	Cd    PendingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type PendingReason28Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CSDH, CVAL, CDLR, INBC
type PendingReason2Code string

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

type PendingStatus37Choice struct {
	NoSpcfdRsn NoReasonCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []PendingReason15 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type PendingStatus38Choice struct {
	NoSpcfdRsn NoReasonCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []PendingReason16 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type PlaceOfClearingIdentification1 struct {
	Id  AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id,omitempty"`
	LEI LEIIdentifier    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
}

type PlaceOfTradeIdentification1 struct {
	MktTpAndId MarketIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MktTpAndId,omitempty"`
	LEI        LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ctry"`
}

type ProprietaryReason4 struct {
	Rsn         GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason6 struct {
	PrtrySts GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrtrySts"`
	PrtryRsn []ProprietaryReason4    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrtryRsn,omitempty"`
}

type Quantity6Choice struct {
	Qty             FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities1      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type Registration10Choice struct {
	Cd    Registration2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of NREG, YREG
type Registration1Code string

// May be one of PTYH, CSDH, CDEL, CVAL
type Registration2Code string

type Registration9Choice struct {
	Cd    Registration1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type RegistrationReason5 struct {
	Cd       Registration10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlInf,omitempty"`
}

type RepairReason10Choice struct {
	Cd    RepairReason4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS
type RepairReason4Code string

type RepairReason8 struct {
	Cd          RepairReason10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type RepairStatus12Choice struct {
	NoSpcfdRsn NoReasonCode    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []RepairReason8 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type RepurchaseType22Choice struct {
	Cd    RepurchaseType9Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of PAIR, PADJ, RATE, CALL, ROLP, CADJ, TOPU, WTHD
type RepurchaseType9Code string

type Restriction5Choice struct {
	Cd    OwnershipLegalRestrictions1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type SafeKeepingPlace1 struct {
	SfkpgPlcFrmt SafekeepingPlaceFormat10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgPlcFrmt,omitempty"`
	LEI          LEIIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LEI,omitempty"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat10Choice struct {
	Id      SafekeepingPlaceTypeAndText8             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TpAndId"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
}

type SafekeepingPlaceTypeAndText8 struct {
	SfkpgPlcTp SafekeepingPlace3Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Nm,omitempty"`
}

type SecuritiesRTGS4Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Ind"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type SecuritiesTransactionPendingReportV09 struct {
	Pgntn       Pagination1           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pgntn"`
	StmtGnlDtls Statement64           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StmtGnlDtls"`
	AcctOwnr    PartyIdentification98 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount19   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgAcct"`
	Sts         []StatusAndReason34   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Sts,omitempty"`
	Txs         []Transaction60       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Txs,omitempty"`
}

// May be one of CNCB, BSBK, COLI, COLO, CONV, FCTA, INSP, ISSU, MKDW, MKUP, NETT, NSYN, OWNE, OWNI, PAIR, PLAC, PORT, REAL, REDI, REDM, RELE, REPU, RODE, RVPO, SBBK, SBRE, SECB, SECL, SLRE, SUBS, SYND, TBAC, TRAD, TRPO, TRVO, TURN, CORP, CLAI, AUTO, ETFT, BIYI, SWIF, SWIT
type SecuritiesTransactionType20Code string

type SecuritiesTransactionType37Choice struct {
	Cd    SecuritiesTransactionType20Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Desc,omitempty"`
}

type SettlementDate19Choice struct {
	Dt   DateAndDateTime2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Dt"`
	DtCd SettlementDateCode8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 DtCd"`
}

type SettlementDateCode8Choice struct {
	Cd    DateType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type SettlementDetails149 struct {
	HldInd         HoldIndicator6                           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 HldInd,omitempty"`
	SttlmTxCond    []SettlementTransactionCondition16Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmTxCond,omitempty"`
	SttlgCpcty     SettlingCapacity7Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlgCpcty,omitempty"`
	StmpDtyTaxBsis GenericIdentification30                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StmpDtyTaxBsis,omitempty"`
	SctiesRTGS     SecuritiesRTGS4Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SctiesRTGS,omitempty"`
	Regn           Registration9Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Regn,omitempty"`
	BnfclOwnrsh    BeneficialOwnership4Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 BnfclOwnrsh,omitempty"`
	CshClrSys      CashSettlementSystem4Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CshClrSys,omitempty"`
	TaxCpcty       TaxCapacityParty4Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TaxCpcty,omitempty"`
	RpTp           RepurchaseType22Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 RpTp,omitempty"`
	MktClntSd      MarketClientSide6Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MktClntSd,omitempty"`
	BlckTrad       BlockTrade4Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 BlckTrad,omitempty"`
	LglRstrctns    Restriction5Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LglRstrctns,omitempty"`
	SttlmSysMtd    SettlementSystemMethod4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmSysMtd,omitempty"`
	NetgElgblty    NettingEligibility4Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NetgElgblty,omitempty"`
	CCPElgblty     CentralCounterPartyEligibility4Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CCPElgblty,omitempty"`
	LttrOfGrnt     LetterOfGuarantee4Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LttrOfGrnt,omitempty"`
	PrtlSttlmInd   SettlementTransactionCondition5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrtlSttlmInd,omitempty"`
}

type SettlementOrCorporateActionEvent23Choice struct {
	SctiesTxTp    SecuritiesTransactionType37Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SctiesTxTp"`
	CorpActnEvtTp CorporateActionEventType73Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CorpActnEvtTp"`
}

type SettlementParties40 struct {
	Dpstry PartyIdentification91            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount117 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount117 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount117 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount117 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount117 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pty5,omitempty"`
}

type SettlementStatus17Choice struct {
	Pdg   PendingStatus37Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pdg"`
	Flng  FailingStatus10Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Flng"`
	Prtry ProprietaryStatusAndReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of NSET, YSET
type SettlementSystemMethod1Code string

type SettlementSystemMethod4Choice struct {
	Cd    SettlementSystemMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of ADEA, ASGN, BUTC, CLEN, DLWM, DIRT, DRAW, EXER, EXPI, FRCL, KNOC, NOMC, NACT, PENS, PHYS, RHYP, RPTO, RESI, SHOR, SPDL, SPST, TRAN, TRIP, UNEX
type SettlementTransactionCondition10Code string

type SettlementTransactionCondition16Choice struct {
	Cd    SettlementTransactionCondition10Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of PART, NPAR, PARC, PARQ
type SettlementTransactionCondition5Code string

// May be one of SAGE, CUST, SPRI, RISP
type SettlingCapacity2Code string

type SettlingCapacity7Choice struct {
	Cd    SettlingCapacity2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type Statement64 struct {
	RptNb     Number3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 RptNb,omitempty"`
	QryRef    Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 QryRef,omitempty"`
	StmtId    Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StmtId,omitempty"`
	StmtDtTm  DateAndDateTime2Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StmtDtTm"`
	Frqcy     Frequency25Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Frqcy,omitempty"`
	UpdTp     UpdateType15Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 UpdTp,omitempty"`
	StmtStr   StatementStructure1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StmtStr"`
	ActvtyInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ActvtyInd"`
}

// May be one of STAT, TRAN
type StatementStructure1Code string

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status18Choice struct {
	Prtry         ProprietaryStatusAndReason6         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
	MtchgSts      MatchingStatus24Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MtchgSts"`
	IfrrdMtchgSts MatchingStatus24Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 IfrrdMtchgSts"`
	SttlmSts      SettlementStatus17Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmSts"`
	InstrPrcgSts  InstructionProcessingStatus22Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 InstrPrcgSts"`
}

type StatusAndReason34 struct {
	StsAndRsn Status18Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StsAndRsn"`
	Tx        []Transaction61 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Tx,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxCapacityParty4Choice struct {
	Cd    TaxLiability1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

// May be one of PRIN, AGEN
type TaxLiability1Code string

type TradeDate8Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Dt"`
	DtCd TradeDateCode3Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 DtCd"`
}

type TradeDateCode3Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type Transaction60 struct {
	AcctOwnrTxId                Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AcctOwnrTxId"`
	AcctSvcrTxId                Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId           Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MktInfrstrctrTxId,omitempty"`
	PrcrTxId                    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrcrTxId,omitempty"`
	TradId                      []Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TradId,omitempty"`
	PoolId                      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PoolId,omitempty"`
	CmonId                      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CmonId,omitempty"`
	CorpActnEvtId               Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CorpActnEvtId,omitempty"`
	TrptyAgtSvcPrvdrCollTxId    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TrptyAgtSvcPrvdrCollTxId,omitempty"`
	ClntTrptyCollTxId           Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId             Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ClntCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
	TxDtls                      TransactionDetails104 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TxDtls,omitempty"`
	StsAndRsn                   []Status18Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 StsAndRsn,omitempty"`
}

type Transaction61 struct {
	AcctOwnrTxId                Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AcctOwnrTxId"`
	AcctSvcrTxId                Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId           Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MktInfrstrctrTxId,omitempty"`
	PrcrTxId                    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PrcrTxId,omitempty"`
	TradId                      []Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TradId,omitempty"`
	PoolId                      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PoolId,omitempty"`
	CmonId                      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CmonId,omitempty"`
	CorpActnEvtId               Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 CorpActnEvtId,omitempty"`
	TrptyAgtSvcPrvdrCollTxId    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TrptyAgtSvcPrvdrCollTxId,omitempty"`
	ClntTrptyCollTxId           Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId             Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 ClntCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
	TxDtls                      TransactionDetails104 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TxDtls,omitempty"`
}

// May be one of BOLE, CLAI, COLL, CORP, SETT
type TransactionActivity1Code string

type TransactionActivity3Choice struct {
	Cd    TransactionActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type TransactionDetails104 struct {
	TxActvty               TransactionActivity3Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TxActvty"`
	SttlmTxOrCorpActnEvtTp SettlementOrCorporateActionEvent23Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmTxOrCorpActnEvtTp,omitempty"`
	SctiesMvmntTp          ReceiveDelivery1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SctiesMvmntTp"`
	Pmt                    DeliveryReceiptType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Pmt"`
	SttlmParams            SettlementDetails149                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmParams,omitempty"`
	PlcOfTrad              PlaceOfTradeIdentification1              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PlcOfTrad,omitempty"`
	SfkpgPlc               SafeKeepingPlace1                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SfkpgPlc,omitempty"`
	PlcOfClr               PlaceOfClearingIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PlcOfClr,omitempty"`
	FinInstrmId            SecurityIdentification19                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 FinInstrmId"`
	PstngQty               Quantity6Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PstngQty"`
	PstngAmt               AmountAndDirection51                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 PstngAmt,omitempty"`
	TradDt                 TradeDate8Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TradDt,omitempty"`
	XpctdSttlmDt           DateAndDateTime2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 XpctdSttlmDt,omitempty"`
	SttlmDt                SettlementDate19Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SttlmDt"`
	LateDlvryDt            DateAndDateTime2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 LateDlvryDt,omitempty"`
	XpctdValDt             DateAndDateTime2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 XpctdValDt,omitempty"`
	AckdStsTmStmp          ISODateTime                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AckdStsTmStmp,omitempty"`
	MtchdStsTmStmp         ISODateTime                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 MtchdStsTmStmp,omitempty"`
	DlvrgSttlmPties        SettlementParties40                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties         SettlementParties40                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 RcvgSttlmPties,omitempty"`
	TxAddtlDtls            Max350Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 TxAddtlDtls,omitempty"`
	SplmtryData            []SupplementaryData1                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 SplmtryData,omitempty"`
}

// May be one of ADEA, ACRU, IIND, CPCA, CLAT, NCRR, DDEA, DMCT, DCMX, DSEC, DQUA, INVE, LEOG, LATE, MIME, CMIS, NMAS, DTRA, OTHR, FRAP, PHYS, PLIS, INPS, PLCE, PODU, DEPT, ICAG, ICUS, IEXE, REGD, RTGS, SAFE, DMON, DDAT, SETS, SETR, TXST, DTRD, DELN, UNBR
type UnmatchedReason11Code string

type UnmatchedReason15 struct {
	Cd          UnmatchedReason21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 AddtlRsnInf,omitempty"`
}

type UnmatchedReason21Choice struct {
	Cd    UnmatchedReason11Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type UnmatchedStatus16Choice struct {
	NoSpcfdRsn NoReasonCode        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 NoSpcfdRsn"`
	Rsn        []UnmatchedReason15 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Rsn"`
}

type UpdateType15Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Cd"`
	Prtry GenericIdentification30  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.09 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
