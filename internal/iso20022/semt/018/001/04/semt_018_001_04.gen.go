// Code generated by main. DO NOT EDIT.

package semt_018_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus7Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type AcknowledgementReason3 struct {
	Cd          AcknowledgementReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason4Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AmountAndDirection8 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CdtDbtInd"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 OrgnlCcyAndOrdrdAmt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BeneficialOwnership1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type BlockTrade1Choice struct {
	Cd    BlockTrade1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of BLPA, BLCH
type BlockTrade1Code string

type CancellationReason12Choice struct {
	Cd    CancelledStatusReason13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type CancellationReason5 struct {
	Cd          CancellationReason12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type CancellationStatus7Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []CancellationReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CTHP
type CancelledStatusReason13Code string

type CashSettlementSystem1Choice struct {
	Cd    CashSettlementSystem2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of GROS, NETS
type CashSettlementSystem2Code string

type CentralCounterPartyEligibility1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of ACCU, ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, DRCA, DVCA, CAPI, CHAN, CLSA, COOP, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, INFO, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, MTNG, SHPR, SMAL, SOFF, SPLF, DVSE, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH
type CorporateActionEventType14Code string

type CorporateActionEventType15Choice struct {
	Cd    CorporateActionEventType14Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 DtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of OPEN, UKWN
type DateType4Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	SctiesTxPdgRpt SecuritiesTransactionPendingReportV04 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SctiesTxPdgRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{5}
type Exact5NumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CDLR, CSDH, CVAL, INBC
type FailingReason2Code string

type FailingReason3 struct {
	Cd          FailingReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type FailingReason3Choice struct {
	Cd    FailingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type FailingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []FailingReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AmtsdVal"`
}

type Frequency4Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type GeneratedReason1 struct {
	Cd          GeneratedReasons1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

// May be one of COLL, RODE, SPLI, THRD, TRAN, OTHR
type GeneratedReason2Code string

type GeneratedReasons1Choice struct {
	Cd    GeneratedReason2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type GeneratedStatus3Choice struct {
	NoSpcfdRsn NoReasonCode       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []GeneratedReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SchmeNm,omitempty"`
}

type GenericIdentification21 struct {
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id,omitempty"`
}

type HoldIndicator4 struct {
	Ind bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Rsn []RegistrationReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type InstructionProcessingStatus10Choice struct {
	PdgPrcg    PendingProcessingStatus3Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PdgPrcg"`
	CxlReqd    ProprietaryReason1                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CxlReqd"`
	AckdAccptd AcknowledgedAcceptedStatus7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AckdAccptd"`
	Canc       CancellationStatus7Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Canc"`
	Gnrtd      GeneratedStatus3Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Gnrtd"`
	Rpr        RepairStatus5Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rpr"`
	PdgCxl     PendingStatus13Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PdgCxl"`
	ModReqd    ProprietaryReason1                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ModReqd"`
}

type LetterOfGuarantee1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MarketClientSide1Choice struct {
	Cd    MarketClientSideCode    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of MAKT, CLNT
type MarketClientSideCode string

type MarketIdentification1Choice struct {
	MktIdrCd MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 MktIdrCd"`
	Desc     Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Desc"`
}

type MarketIdentification4 struct {
	Id MarketIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id,omitempty"`
	Tp MarketType3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Tp"`
}

// May be one of PRIM, SECM, OTCO, VARI, EXCH
type MarketType2Code string

type MarketType3Choice struct {
	Cd    MarketType2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type MatchingStatus7Choice struct {
	Mtchd  ProprietaryReason1          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Mtchd"`
	Umtchd UnmatchedStatus5Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Umtchd"`
	Prtry  ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Adr,omitempty"`
}

type NettingEligibility1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of NORE
type NoReasonCode string

type Number3Choice struct {
	Shrt Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Shrt"`
	Lng  Exact5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Lng"`
}

type OriginalAndCurrentQuantities1 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AmtsdVal"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Tp"`
}

// May be one of A144, NRST, RSTR
type OwnershipLegalRestrictions1Code string

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 LastPgInd"`
}

type PartyIdentification36Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AnyBIC"`
	PrtryId GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrtryId"`
}

type PartyIdentification44Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AnyBIC"`
	NmAndAdr NameAndAddress5  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ctry"`
}

type PartyIdentification45Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AnyBIC"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NmAndAdr"`
}

type PartyIdentification46 struct {
	Id     PartyIdentification44Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	PrcgId Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrcgId,omitempty"`
}

type PartyIdentificationAndAccount44 struct {
	Id        PartyIdentification45Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	SfkpgAcct SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SfkpgAcct,omitempty"`
	PrcgId    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrcgId,omitempty"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT, CSDH, CVAL, CDEL, CDLR, CDAC, INBC
type PendingProcessingReason2Code string

type PendingProcessingReason3 struct {
	Cd          PendingProcessingReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type PendingProcessingReason3Choice struct {
	Cd    PendingProcessingReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type PendingProcessingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []PendingProcessingReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type PendingReason13Choice struct {
	Cd    PendingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type PendingReason2 struct {
	Cd          PendingReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type PendingReason2Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CSDH, CVAL, CDLR, INBC
type PendingReason2Code string

type PendingReason5 struct {
	Cd          PendingReason13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

type PendingStatus13Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []PendingReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type PendingStatus9Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []PendingReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ctry"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrtryRsn,omitempty"`
}

type Quantity6Choice struct {
	Qty             FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities1      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type Registration1Choice struct {
	Cd    Registration1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of NREG, YREG
type Registration1Code string

// May be one of PTYH, CSDH, CDEL, CVAL
type Registration2Code string

type Registration7Choice struct {
	Cd    Registration2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type RegistrationReason3 struct {
	Cd       Registration7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlInf Max210Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlInf,omitempty"`
}

type RepairReason1 struct {
	Cd          RepairReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type RepairReason1Choice struct {
	Cd    RepairReason4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS
type RepairReason4Code string

type RepairStatus5Choice struct {
	NoSpcfdRsn NoReasonCode    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []RepairReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type RepurchaseType3Choice struct {
	Cd    RepurchaseType3Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of CADJ, CALL, PAIR, RATE, ROLP, TOPU, WTHD, PADJ
type RepurchaseType3Code string

type Restriction1Choice struct {
	Cd    OwnershipLegalRestrictions1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat3Choice struct {
	Id      SafekeepingPlaceTypeAndText3             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TpAndId"`
	Prtry   GenericIdentification21                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
}

type SafekeepingPlaceTypeAndText3 struct {
	SfkpgPlcTp SafekeepingPlace3Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id,omitempty"`
}

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Nm,omitempty"`
}

type SecuritiesRTGS1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type SecuritiesTransactionPendingReportV04 struct {
	Pgntn       Pagination                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pgntn"`
	StmtGnlDtls Statement14                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StmtGnlDtls"`
	AcctOwnr    PartyIdentification36Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SfkpgAcct"`
	Sts         []StatusAndReason16         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Sts,omitempty"`
	Txs         []Transaction27             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Txs,omitempty"`
}

type SecuritiesTransactionType11Choice struct {
	Cd    SecuritiesTransactionType9Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of CNCB, BSBK, COLI, COLO, CONV, FCTA, INSP, ISSU, MKDW, MKUP, NETT, NSYN, OWNE, OWNI, PAIR, PLAC, PORT, REAL, REDI, REDM, RELE, REPU, RODE, RVPO, SBBK, SECB, SECL, SUBS, SYND, TBAC, TRAD, TRPO, TRVO, TURN, AUTO, CLAI, CORP, ETFT
type SecuritiesTransactionType9Code string

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Desc,omitempty"`
}

type SettlementDate2Choice struct {
	Dt   DateAndDateTimeChoice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Dt"`
	DtCd SettlementDateCode2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 DtCd"`
}

type SettlementDateCode2Choice struct {
	Cd    DateType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type SettlementDetails47 struct {
	HldInd         HoldIndicator4                           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 HldInd,omitempty"`
	SttlmTxCond    []SettlementTransactionCondition12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmTxCond,omitempty"`
	SttlgCpcty     SettlingCapacity1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlgCpcty,omitempty"`
	StmpDtyTaxBsis GenericIdentification20                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StmpDtyTaxBsis,omitempty"`
	SctiesRTGS     SecuritiesRTGS1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SctiesRTGS,omitempty"`
	Regn           Registration1Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Regn,omitempty"`
	BnfclOwnrsh    BeneficialOwnership1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 BnfclOwnrsh,omitempty"`
	CshClrSys      CashSettlementSystem1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CshClrSys,omitempty"`
	TaxCpcty       TaxCapacityParty1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TaxCpcty,omitempty"`
	RpTp           RepurchaseType3Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 RpTp,omitempty"`
	MktClntSd      MarketClientSide1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 MktClntSd,omitempty"`
	BlckTrad       BlockTrade1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 BlckTrad,omitempty"`
	LglRstrctns    Restriction1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 LglRstrctns,omitempty"`
	SttlmSysMtd    SettlementSystemMethod1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmSysMtd,omitempty"`
	NetgElgblty    NettingEligibility1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NetgElgblty,omitempty"`
	CCPElgblty     CentralCounterPartyEligibility1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CCPElgblty,omitempty"`
	LttrOfGrnt     LetterOfGuarantee1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 LttrOfGrnt,omitempty"`
	PrtlSttlmInd   SettlementTransactionCondition5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrtlSttlmInd,omitempty"`
}

type SettlementOrCorporateActionEvent10Choice struct {
	SctiesTxTp    SecuritiesTransactionType11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SctiesTxTp"`
	CorpActnEvtTp CorporateActionEventType15Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CorpActnEvtTp"`
}

type SettlementParties13 struct {
	Dpstry PartyIdentification46           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pty5,omitempty"`
}

type SettlementStatus7Choice struct {
	Pdg   PendingStatus9Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pdg"`
	Flng  FailingStatus3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Flng"`
	Prtry ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type SettlementSystemMethod1Choice struct {
	Cd    SettlementSystemMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of NSET, YSET
type SettlementSystemMethod1Code string

type SettlementTransactionCondition12Choice struct {
	Cd    SettlementTransactionCondition8Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of PART, NPAR, PARC, PARQ
type SettlementTransactionCondition5Code string

// May be one of ASGN, BUTC, CLEN, DIRT, DLWM, DRAW, EXER, FRCL, KNOC, PHYS, RESI, SHOR, SPDL, SPST, EXPI, PENS, UNEX, TRIP, NOMC, TRAN, RHYP, ADEA, RPTO
type SettlementTransactionCondition8Code string

type SettlingCapacity1Choice struct {
	Cd    SettlingCapacity1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of CUST, SAGE, SPRI
type SettlingCapacity1Code string

type Statement14 struct {
	RptNb     Number3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 RptNb,omitempty"`
	QryRef    Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 QryRef,omitempty"`
	StmtId    Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StmtId,omitempty"`
	StmtDtTm  DateAndDateTimeChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StmtDtTm"`
	Frqcy     Frequency4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Frqcy,omitempty"`
	UpdTp     UpdateType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 UpdTp,omitempty"`
	StmtStr   StatementStructure1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StmtStr"`
	ActvtyInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ActvtyInd"`
}

// May be one of STAT, TRAN
type StatementStructure1Code string

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status9Choice struct {
	Prtry         ProprietaryStatusAndReason1         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
	MtchgSts      MatchingStatus7Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 MtchgSts"`
	IfrrdMtchgSts MatchingStatus7Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 IfrrdMtchgSts"`
	SttlmSts      SettlementStatus7Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmSts"`
	InstrPrcgSts  InstructionProcessingStatus10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 InstrPrcgSts"`
}

type StatusAndReason16 struct {
	StsAndRsn Status9Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StsAndRsn"`
	Tx        []Transaction28 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Tx,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxCapacityParty1Choice struct {
	Cd    TaxLiability1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of PRIN, AGEN
type TaxLiability1Code string

type TradeDate1Choice struct {
	Dt   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Dt"`
	DtCd TradeDateCode1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 DtCd"`
}

type TradeDateCode1Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type Transaction27 struct {
	AcctOwnrTxId      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrcrTxId,omitempty"`
	TradId            []Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TradId,omitempty"`
	PoolId            Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PoolId,omitempty"`
	CmonId            Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CmonId,omitempty"`
	CorpActnEvtId     Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CorpActnEvtId,omitempty"`
	TrptyAgtCollTxId  Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TrptyAgtCollTxId,omitempty"`
	ClntTrptyCollTxId Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ClntCollInstrId,omitempty"`
	TrptyCollInstrId  Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TrptyCollInstrId,omitempty"`
	TxDtls            TransactionDetails56 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TxDtls,omitempty"`
	StsAndRsn         []Status9Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 StsAndRsn,omitempty"`
}

type Transaction28 struct {
	AcctOwnrTxId      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PrcrTxId,omitempty"`
	TradId            []Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TradId,omitempty"`
	PoolId            Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PoolId,omitempty"`
	CmonId            Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CmonId,omitempty"`
	CorpActnEvtId     Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 CorpActnEvtId,omitempty"`
	TrptyAgtCollTxId  Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TrptyAgtCollTxId,omitempty"`
	ClntTrptyCollTxId Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 ClntCollInstrId,omitempty"`
	TrptyCollInstrId  Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TrptyCollInstrId,omitempty"`
	TxDtls            TransactionDetails56 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TxDtls,omitempty"`
}

type TransactionActivity1Choice struct {
	Cd    TransactionActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

// May be one of BOLE, CLAI, COLL, CORP, SETT
type TransactionActivity1Code string

type TransactionDetails56 struct {
	TxActvty               TransactionActivity1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TxActvty"`
	SttlmTxOrCorpActnEvtTp SettlementOrCorporateActionEvent10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmTxOrCorpActnEvtTp,omitempty"`
	SctiesMvmntTp          ReceiveDelivery1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SctiesMvmntTp"`
	Pmt                    DeliveryReceiptType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Pmt"`
	SttlmParams            SettlementDetails47                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmParams,omitempty"`
	PlcOfTrad              MarketIdentification4                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PlcOfTrad,omitempty"`
	SfkpgPlc               SafekeepingPlaceFormat3Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SfkpgPlc,omitempty"`
	PlcOfClr               AnyBICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PlcOfClr,omitempty"`
	FinInstrmId            SecurityIdentification14                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 FinInstrmId"`
	PstngQty               Quantity6Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PstngQty"`
	PstngAmt               AmountAndDirection8                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 PstngAmt,omitempty"`
	TradDt                 TradeDate1Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TradDt,omitempty"`
	XpctdSttlmDt           DateAndDateTimeChoice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 XpctdSttlmDt,omitempty"`
	SttlmDt                SettlementDate2Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SttlmDt"`
	LateDlvryDt            DateAndDateTimeChoice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 LateDlvryDt,omitempty"`
	XpctdValDt             DateAndDateTimeChoice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 XpctdValDt,omitempty"`
	DlvrgSttlmPties        SettlementParties13                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties         SettlementParties13                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 RcvgSttlmPties,omitempty"`
	TxAddtlDtls            Max350Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 TxAddtlDtls,omitempty"`
	SplmtryData            []SupplementaryData1                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 SplmtryData,omitempty"`
}

// May be one of CMIS, DDAT, DELN, DEPT, DMON, DDEA, DQUA, ADEA, SETR, SETS, DSEC, DTRA, CLAT, PHYS, IIND, FRAP, PLCE, PODU, REGD, RTGS, ICAG, CPCA, IEXE, NCRR, LEOG, NMAS, SAFE, DTRD, LATE, TXST, ICUS, OTHR, MIME, UNBR, INPS, ACRU
type UnmatchedReason5Code string

type UnmatchedReason6 struct {
	Cd          UnmatchedReason9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	AddtlRsnInf Max210Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 AddtlRsnInf,omitempty"`
}

type UnmatchedReason9Choice struct {
	Cd    UnmatchedReason5Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type UnmatchedStatus5Choice struct {
	NoSpcfdRsn NoReasonCode       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 NoSpcfdRsn"`
	Rsn        []UnmatchedReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Rsn"`
}

type UpdateType2Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Cd"`
	Prtry GenericIdentification20  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.018.001.04 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
