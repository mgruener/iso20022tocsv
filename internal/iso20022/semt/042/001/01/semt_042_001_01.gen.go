// Code generated by main. DO NOT EDIT.

package semt_042_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 DtTm"`
}

type Document struct {
	SctiesBalTrnsprncyRptStsAdvc SecuritiesBalanceTransparencyReportStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 SctiesBalTrnsprncyRptStsAdvc"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 SchmeNm,omitempty"`
}

// May be one of SAFE, LVL1, LVL2, LVL3, LVL4, LVL5, LVL6, LVL7, LVL8, LVL9
type HoldingAccountLevel1Code string

// May be one of INPR, INID, AGIN, INTE, CERT, BPAR, BREF, DADR, DCUS, IACT, INVA, INDT, OPTI, OPTY, INMO, INVM, INUS, DSEC, ENDP, STAR, SECO, NOHO, NINS, NOAP, NAUT, AGID, DISP, CORR, INPS, PLCE, PRIC, IVAG, QUNP, DQUA, EQTY, DEPT, RCUS, SAFE, DMON, NCRR, TQNP, SETR, UKWN, DDEA, TERM, ULNK, NARR, NRGN, INVB, ADEA, CASH, COMC, CONL, INHO, ICOL, INVE, INVN, INVL, VALR, INUK, LATT, MINO, BOIS, MCER, IPOA, MUNO, INNA, NINV, ELIG, PERI, REFE, SAID, OWNT, NTAV
type HoldingRejectionReason41Code string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must match the pattern [0-9]{1,15}
type Max15NumericText string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type NumberOfItemsPerStatus1 struct {
	Sts      ReportItemStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Sts"`
	NbOfItms Max15NumericText      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 NbOfItms"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Tp"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 LastPgInd"`
}

type PartyIdentification100 struct {
	Id  PartyIdentification71Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 LEI,omitempty"`
}

type PartyIdentification71Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Ctry"`
}

type ReportItem1 struct {
	AcctId      SecuritiesAccount19      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AcctId"`
	AcctLvl     HoldingAccountLevel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AcctLvl"`
	FinInstrmId SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 FinInstrmId,omitempty"`
	ItmDt       ISODate                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 ItmDt,omitempty"`
}

type ReportItemRejectionReason1Choice struct {
	Cd    HoldingRejectionReason41Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Cd"`
	Prtry GenericIdentification30      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Prtry"`
}

type ReportItemStatus1 struct {
	Xcptn       ReportItemRejectionReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Xcptn"`
	AddtlRsnInf Max210Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AddtlRsnInf,omitempty"`
	RptItm      []ReportItem1                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 RptItm,omitempty"`
}

type ReportItemStatus1Choice struct {
	Accptd         NoReasonCode        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Accptd"`
	AccptdWthXcptn []ReportItemStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 AccptdWthXcptn"`
	Rjctd          ReportItemStatus1   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Rjctd"`
}

// May be one of ACPD, REJT
type ReportItemStatus1Code string

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Nm,omitempty"`
}

type SecuritiesBalanceTransparencyReportStatusAdviceV01 struct {
	MsgId          MessageIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 MsgId"`
	SndrId         PartyIdentification100    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 SndrId"`
	RcvrId         PartyIdentification100    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 RcvrId,omitempty"`
	RltdStmt       StatementReference1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 RltdStmt"`
	Sts            ReportItemStatus1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Sts"`
	NbOfItmsPerSts []NumberOfItemsPerStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 NbOfItmsPerSts,omitempty"`
	SplmtryData    []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 SplmtryData,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Desc,omitempty"`
}

type StatementReference1 struct {
	StmtId   Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 StmtId"`
	StmtDtTm DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 StmtDtTm"`
	Pgntn    Pagination            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Pgntn,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.042.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
