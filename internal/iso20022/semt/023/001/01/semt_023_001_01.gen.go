// Code generated by main. DO NOT EDIT.

package semt_023_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification3Choice struct {
	IBAN      IBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 IBAN"`
	BBAN      BBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 BBAN"`
	UPIC      UPICIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 UPIC"`
	PrtryAcct SimpleIdentificationInformation2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrtryAcct"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternatePartyIdentification5 struct {
	IdTp    IdentificationType40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

type CashAccountIdentification2Choice struct {
	IBAN  IBANIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 IBAN"`
	Prtry Max34Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

type ConfirmationParties2 struct {
	Buyr          ConfirmationPartyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Buyr,omitempty"`
	Brrwr         ConfirmationPartyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Brrwr,omitempty"`
	Sellr         ConfirmationPartyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Sellr,omitempty"`
	Lndr          ConfirmationPartyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Lndr,omitempty"`
	BrkrOfCdt     ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 BrkrOfCdt,omitempty"`
	IntrdcgFirm   ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 IntrdcgFirm,omitempty"`
	StepInFirm    ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 StepInFirm,omitempty"`
	StepOutFirm   ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 StepOutFirm,omitempty"`
	ClrFirm       ConfirmationPartyDetails5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 ClrFirm,omitempty"`
	ExctgBrkr     ConfirmationPartyDetails5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 ExctgBrkr,omitempty"`
	CMUPty        ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CMUPty,omitempty"`
	CMUCtrPty     ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CMUCtrPty,omitempty"`
	AffrmgPty     ConfirmationPartyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AffrmgPty,omitempty"`
	TradBnfcryPty ConfirmationPartyDetails3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 TradBnfcryPty,omitempty"`
}

type ConfirmationPartyDetails1 struct {
	Id       PartyIdentification32Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	AltrnId  AlternatePartyIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId,omitempty"`
	PrcgId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrcgId,omitempty"`
	AddtlInf PartyTextInformation5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AddtlInf,omitempty"`
}

type ConfirmationPartyDetails2 struct {
	Id            PartyIdentification32Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	AltrnId       AlternatePartyIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId,omitempty"`
	PrcgId        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrcgId,omitempty"`
	AddtlInf      PartyTextInformation5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AddtlInf,omitempty"`
	InvstrCpcty   InvestorCapacity3Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 InvstrCpcty,omitempty"`
	TradgPtyCpcty TradingPartyCapacity1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 TradgPtyCpcty,omitempty"`
}

type ConfirmationPartyDetails3 struct {
	Id        PartyIdentification32Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	SfkpgAcct SecuritiesAccount3            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SfkpgAcct,omitempty"`
	CshDtls   AccountIdentification3Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CshDtls,omitempty"`
	AltrnId   AlternatePartyIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId,omitempty"`
	PrcgId    Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrcgId,omitempty"`
	AddtlInf  PartyTextInformation5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AddtlInf,omitempty"`
	PtyCpcty  TradingPartyCapacity2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PtyCpcty,omitempty"`
}

type ConfirmationPartyDetails5 struct {
	Id                      PartyIdentification32Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	AltrnId                 AlternatePartyIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId,omitempty"`
	PrcgId                  Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrcgId,omitempty"`
	AddtlInf                PartyTextInformation5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AddtlInf,omitempty"`
	InvstrPrtcnAssoctnMmbsh bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 InvstrPrtcnAssoctnMmbsh,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime1Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 DtTm"`
}

type Document struct {
	SctiesEndOfPrcRpt SecuritiesEndOfProcessReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SctiesEndOfPrcRpt"`
}

// May be one of ELIG, RETL, PROF
type Eligibility1Code string

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Frequency4Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SchmeNm,omitempty"`
}

type GenericIdentification29 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SchmeNm,omitempty"`
}

type GenericIdentification38 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SchmeNm,omitempty"`
}

type GenericIdentification7 struct {
	Issr Max8Text  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Issr"`
	Inf  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Inf"`
}

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationType40Choice struct {
	Cd    TypeOfIdentification2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification29   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

type InvestorCapacity3Choice struct {
	Cd    Eligibility1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification38 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

// Must be at least 1 items long
type Max8Text string

type NameAndAddress13 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Nm"`
	Adr PostalAddress8 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Adr,omitempty"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 LastPgInd"`
}

type PartyIdentification32Choice struct {
	BIC      AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 BIC"`
	PrtryId  GenericIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrtryId"`
	NmAndAdr NameAndAddress13        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 NmAndAdr"`
}

type PartyIdentificationAndAccount79 struct {
	Id        PartyIdentification32Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id,omitempty"`
	SfkpgAcct Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SfkpgAcct,omitempty"`
	CshAcct   CashAccountIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CshAcct,omitempty"`
	PrcgId    Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PrcgId,omitempty"`
	CtryOfRes CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CtryOfRes,omitempty"`
	AddtlInf  PartyTextInformation1            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AddtlInf,omitempty"`
	AltrnId   AlternatePartyIdentification5    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AltrnId,omitempty"`
}

type PartyTextInformation1 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 RegnDtls,omitempty"`
}

type PartyTextInformation5 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PtyCtctDtls,omitempty"`
}

type PostalAddress8 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Ctry"`
}

type PurposeCode5Choice struct {
	Cd    SecuritiesAccountPurposeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification38           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

type QueryReference struct {
	QryRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 QryRef"`
	QryNm  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 QryNm,omitempty"`
}

type Report3 struct {
	RptNb   Max5NumericText                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 RptNb,omitempty"`
	QryRef  QueryReference                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 QryRef,omitempty"`
	RptId   Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 RptId,omitempty"`
	RptDtTm DateAndDateTime1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 RptDtTm"`
	Frqcy   Frequency4Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Frqcy,omitempty"`
	UpdTp   StatementUpdateTypeCodeAndDSSCodeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 UpdTp,omitempty"`
	NtceTp  GenericIdentification38                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 NtceTp,omitempty"`
}

type SecuritiesAccount3 struct {
	Id Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
	Tp PurposeCode5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Tp,omitempty"`
	Nm Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Nm,omitempty"`
}

// May be one of MARG, SHOR, ABRD, CEND, DVPA, PHYS
type SecuritiesAccountPurposeType1Code string

type SecuritiesEndOfProcessReportV01 struct {
	Pgntn       []Pagination                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Pgntn,omitempty"`
	RptGnlDtls  Report3                           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 RptGnlDtls"`
	ConfPties   []ConfirmationParties2            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 ConfPties,omitempty"`
	Invstr      []PartyIdentificationAndAccount79 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Invstr,omitempty"`
	SplmtryData []SupplementaryData1              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 SplmtryData,omitempty"`
}

type SimpleIdentificationInformation2 struct {
	Id Max34Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Id"`
}

// May be one of COMP, DELT
type StatementUpdateTypeCode string

type StatementUpdateTypeCodeAndDSSCodeChoice struct {
	StmtUpdTpAsCd  StatementUpdateTypeCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 StmtUpdTpAsCd"`
	StmtUpdTpAsDSS GenericIdentification7  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 StmtUpdTpAsDSS"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of PRIN, CPRN, RISP, PROP, AGEN, CAGN, OAGN, PRAG, BAGN, INFI, MKTM, MLTF, RMKT, SINT, TAGT
type TradingCapacity4Code string

// May be one of AGEN, BAGN, CAGN, CPRN, OAGN, PRAG, PRIN
type TradingCapacity6Code string

type TradingPartyCapacity1Choice struct {
	Cd    TradingCapacity4Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification38 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

type TradingPartyCapacity2Choice struct {
	Cd    TradingCapacity6Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Cd"`
	Prtry GenericIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.023.001.01 Prtry"`
}

// May be one of ARNU, CHTY, CORP, FIIN, TXID
type TypeOfIdentification2Code string

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
