// Code generated by main. DO NOT EDIT.

package semt_014_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus3Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
}

type AcknowledgementReason3 struct {
	Cd          AcknowledgementReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason4Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationReason1 struct {
	Cd          CancellationReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	AddtlRsnInf Max210Text                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type CancellationReason5Choice struct {
	Cd    CancelledStatusReason9Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

type CancellationStatus4Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 NoSpcfdRsn"`
	Rsn        []CancellationReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR
type CancelledStatusReason9Code string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 DtTm"`
}

type Document struct {
	IntraPosMvmntStsAdvc IntraPositionMovementStatusAdviceV02 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 IntraPosMvmntStsAdvc"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FailingReason1 struct {
	Cd          FailingReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type FailingReason1Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type FailingStatus1Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 NoSpcfdRsn"`
	Rsn        []FailingReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AmtsdVal"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

type IntraPositionDetails9 struct {
	PoolId      Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PoolId,omitempty"`
	AcctOwnr    PartyIdentification36Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount13                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SfkpgAcct"`
	FinInstrmId SecurityIdentification14           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 FinInstrmId"`
	SttldQty    FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SttldQty"`
	SttlmDt     DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SttlmDt"`
	BalFr       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 BalFr,omitempty"`
	BalTo       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 BalTo,omitempty"`
}

type IntraPositionMovementStatusAdviceV02 struct {
	TxId        TransactionIdentifications10         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 TxId"`
	PrcgSts     IntraPositionProcessingStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PrcgSts,omitempty"`
	SttlmSts    SettlementStatus2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SttlmSts,omitempty"`
	TxDtls      IntraPositionDetails9                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 TxDtls,omitempty"`
	SplmtryData []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 SplmtryData,omitempty"`
}

type IntraPositionProcessingStatus1Choice struct {
	Rjctd      RejectionOrRepairStatus2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rjctd"`
	Rpr        RejectionOrRepairStatus2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rpr"`
	Canc       CancellationStatus4Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Canc"`
	AckdAccptd AcknowledgedAcceptedStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AckdAccptd"`
	Prtry      ProprietaryStatusAndReason1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

// May be one of NORE
type NoReasonCode string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Tp"`
}

type PartyIdentification36Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AnyBIC"`
	PrtryId GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PrtryId"`
}

type PendingReason1 struct {
	Cd          PendingReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type PendingReason1Choice struct {
	Cd    PendingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type PendingReason1Code string

type PendingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 NoSpcfdRsn"`
	Rsn        []PendingReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PrtryRsn,omitempty"`
}

type RejectionAndRepairReason4Choice struct {
	Cd    RejectionReason22Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

type RejectionOrRepairReason4 struct {
	Cd          []RejectionAndRepairReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd,omitempty"`
	AddtlRsnInf Max210Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AddtlRsnInf,omitempty"`
}

type RejectionOrRepairStatus2Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 NoSpcfdRsn"`
	Rsn        []RejectionOrRepairReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Rsn,omitempty"`
}

// May be one of SAFE, ADEA, LATE, CAEV, DDAT, REFE, OTHR
type RejectionReason22Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Nm,omitempty"`
}

// May be one of BLOK, AWAS, AVAI, NOMI, PLED, REGO, RSTR, OTHR, SPOS, UNRG, ISSU, QUAS, COLA
type SecuritiesBalanceType13Code string

type SecuritiesBalanceType2Choice struct {
	Cd    SecuritiesBalanceType13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Desc,omitempty"`
}

type SettlementStatus2Choice struct {
	Pdg   PendingStatus3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Pdg"`
	Flng  FailingStatus1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Flng"`
	Prtry ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TransactionIdentifications10 struct {
	AcctOwnrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.02 PrcrTxId,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
