// Code generated by main. DO NOT EDIT.

package semt_014_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus3Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
}

type AcknowledgementReason3 struct {
	Cd          AcknowledgementReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason4Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationReason1 struct {
	Cd          CancellationReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	AddtlRsnInf Max210Text                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type CancellationReason5Choice struct {
	Cd    CancelledStatusReason9Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

type CancellationStatus4Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NoSpcfdRsn"`
	Rsn        []CancellationReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR
type CancelledStatusReason9Code string

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 DtTm"`
}

type Document struct {
	IntraPosMvmntStsAdvc IntraPositionMovementStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 IntraPosMvmntStsAdvc"`
}

type DocumentIdentification11 struct {
	Id       Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	CreDtTm  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 CreDtTm,omitempty"`
	CpyDplct CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 CpyDplct,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type FailingReason1 struct {
	Cd          FailingReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type FailingReason1Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type FailingStatus1Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NoSpcfdRsn"`
	Rsn        []FailingReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AmtsdVal"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

type IntraPositionDetails4 struct {
	PoolId      Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PoolId,omitempty"`
	AcctOwnr    PartyIdentification13Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount13                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SfkpgAcct"`
	FinInstrmId SecurityIdentification11           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 FinInstrmId"`
	SttldQty    FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SttldQty"`
	SttlmDt     DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SttlmDt"`
	BalFr       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 BalFr,omitempty"`
	BalTo       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 BalTo,omitempty"`
}

type IntraPositionMovementStatusAdviceV01 struct {
	Id       DocumentIdentification11             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	TxId     TransactionIdentifications3          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 TxId"`
	PrcgSts  IntraPositionProcessingStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PrcgSts,omitempty"`
	SttlmSts SettlementStatus2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 SttlmSts,omitempty"`
	TxDtls   IntraPositionDetails4                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 TxDtls,omitempty"`
	MsgOrgtr PartyIdentification10Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 MsgOrgtr,omitempty"`
	MsgRcpt  PartyIdentification10Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 MsgRcpt,omitempty"`
	Xtnsn    []Extension2                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Xtnsn,omitempty"`
}

type IntraPositionProcessingStatus1Choice struct {
	Rjctd      RejectionOrRepairStatus2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rjctd"`
	Rpr        RejectionOrRepairStatus2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rpr"`
	Canc       CancellationStatus4Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Canc"`
	AckdAccptd AcknowledgedAcceptedStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AckdAccptd"`
	Prtry      ProprietaryStatusAndReason1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type PartyIdentification10Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NmAndAdr"`
}

type PartyIdentification13Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PrtryId"`
}

type PendingReason1 struct {
	Cd          PendingReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type PendingReason1Choice struct {
	Cd    PendingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type PendingReason1Code string

type PendingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NoSpcfdRsn"`
	Rsn        []PendingReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Ctry"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 PrtryRsn,omitempty"`
}

type RejectionAndRepairReason4Choice struct {
	Cd    RejectionReason22Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

type RejectionOrRepairReason4 struct {
	Cd          []RejectionAndRepairReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd,omitempty"`
	AddtlRsnInf Max210Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AddtlRsnInf,omitempty"`
}

type RejectionOrRepairStatus2Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 NoSpcfdRsn"`
	Rsn        []RejectionOrRepairReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Rsn,omitempty"`
}

// May be one of SAFE, ADEA, LATE, CAEV, DDAT, REFE, OTHR
type RejectionReason22Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Nm,omitempty"`
}

// May be one of BLOK, AWAS, AVAI, NOMI, PLED, REGO, RSTR, OTHR, SPOS, UNRG, ISSU, QUAS, COLA
type SecuritiesBalanceType13Code string

type SecuritiesBalanceType2Choice struct {
	Cd    SecuritiesBalanceType13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 OthrId"`
}

type SettlementStatus2Choice struct {
	Pdg   PendingStatus3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Pdg"`
	Flng  FailingStatus1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Flng"`
	Prtry ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 Prtry"`
}

type TransactionIdentifications3 struct {
	AcctOwnrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.01 MktInfrstrctrTxId,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
