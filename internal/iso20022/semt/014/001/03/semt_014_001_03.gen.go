// Code generated by main. DO NOT EDIT.

package semt_014_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus7Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn"`
}

type AcknowledgementReason3 struct {
	Cd          AcknowledgementReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason4Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationReason12Choice struct {
	Cd    CancelledStatusReason13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type CancellationReason5 struct {
	Cd          CancellationReason12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	AddtlRsnInf Max210Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type CancellationStatus7Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 NoSpcfdRsn"`
	Rsn        []CancellationReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CTHP
type CancelledStatusReason13Code string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 DtTm"`
}

type Document struct {
	IntraPosMvmntStsAdvc IntraPositionMovementStatusAdviceV03 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 IntraPosMvmntStsAdvc"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, INBC
type FailingReason3Code string

type FailingReason4 struct {
	Cd          FailingReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type FailingReason4Choice struct {
	Cd    FailingReason3Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type FailingStatus4Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 NoSpcfdRsn"`
	Rsn        []FailingReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AmtsdVal"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SchmeNm,omitempty"`
}

type GenericIdentification37 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Id"`
	Issr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type IntraPositionDetails19 struct {
	PoolId      Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PoolId,omitempty"`
	AcctOwnr    PartyIdentification36Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount13                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SfkpgAcct"`
	FinInstrmId SecurityIdentification14           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 FinInstrmId"`
	SttlmQty    FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SttlmQty"`
	LotNb       GenericIdentification37            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 LotNb,omitempty"`
	SttlmDt     DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SttlmDt"`
	BalFr       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 BalFr,omitempty"`
	BalTo       SecuritiesBalanceType2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 BalTo,omitempty"`
}

type IntraPositionMovementStatusAdviceV03 struct {
	TxId        TransactionIdentifications15         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 TxId"`
	PrcgSts     IntraPositionProcessingStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PrcgSts,omitempty"`
	SttlmSts    SettlementStatus9Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SttlmSts,omitempty"`
	TxDtls      IntraPositionDetails19               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 TxDtls,omitempty"`
	SplmtryData []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 SplmtryData,omitempty"`
}

type IntraPositionProcessingStatus3Choice struct {
	Rjctd      RejectionOrRepairStatus15Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rjctd"`
	Rpr        RejectionOrRepairStatus15Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rpr"`
	Canc       CancellationStatus7Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Canc"`
	AckdAccptd AcknowledgedAcceptedStatus7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AckdAccptd"`
	Prtry      ProprietaryStatusAndReason1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

// May be one of NORE
type NoReasonCode string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Tp"`
}

type PartyIdentification36Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AnyBIC"`
	PrtryId GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PrtryId"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, INBC
type PendingReason10Code string

type PendingReason16Choice struct {
	Cd    PendingReason10Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type PendingReason8 struct {
	Cd          PendingReason16Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type PendingStatus12Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 NoSpcfdRsn"`
	Rsn        []PendingReason8 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PrtryRsn,omitempty"`
}

type RejectionAndRepairReason14Choice struct {
	Cd    RejectionReason29Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type RejectionOrRepairReason14 struct {
	Cd          []RejectionAndRepairReason14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd,omitempty"`
	AddtlRsnInf Max210Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AddtlRsnInf,omitempty"`
}

type RejectionOrRepairStatus15Choice struct {
	NoSpcfdRsn NoReasonCode                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 NoSpcfdRsn"`
	Rsn        []RejectionOrRepairReason14 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Rsn"`
}

// May be one of SAFE, ADEA, LATE, CAEV, DDAT, REFE, OTHR, DQUA, DSEC, INVB, INVL, INVN, MINO, MUNO, VALR
type RejectionReason29Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Nm,omitempty"`
}

// May be one of BLOK, AWAS, AVAI, NOMI, PLED, REGO, RSTR, OTHR, SPOS, UNRG, ISSU, QUAS, COLA
type SecuritiesBalanceType13Code string

type SecuritiesBalanceType2Choice struct {
	Cd    SecuritiesBalanceType13Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Desc,omitempty"`
}

type SettlementStatus9Choice struct {
	Pdg   PendingStatus12Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Pdg"`
	Flng  FailingStatus4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Flng"`
	Prtry ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TransactionIdentifications15 struct {
	AcctOwnrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.014.001.03 PrcrTxId,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
