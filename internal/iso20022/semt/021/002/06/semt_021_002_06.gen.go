// Code generated by main. DO NOT EDIT.

package semt_021_002_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgementReason16Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type AcknowledgementReason18Choice struct {
	Cd    RepoCallAcknowledgementReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type AdditionalQueryParameters12 struct {
	Sts         Status22Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Sts,omitempty"`
	Rsn         []Reason17Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Rsn,omitempty"`
	FinInstrmId []SecurityIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FinInstrmId,omitempty"`
}

// May be one of AFFI, NAFI
type AffirmationStatus1Code string

type AffirmationStatus9Choice struct {
	Cd    AffirmationStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type AllocationSatus4Choice struct {
	Cd    AllocationStatus1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of AOLF, AOLP
type AllocationStatus1Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CAND, CANP, DEND, EXCH, INTE, PACK, PARF, REJT, REPR
type CancellationProcessingStatus1Code string

type CancellationProcessingStatus8Choice struct {
	Cd    CancellationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type CancellationReason30Choice struct {
	Cd    CancelledStatusReason12Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CANO, CREG
type CancelledStatusReason12Code string

// May be one of COMP, PEND, RECD
type CorporateActionEventProcessingStatus1Code string

type CorporateActionEventProcessingStatus4Choice struct {
	Cd    CorporateActionEventProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of PWAL, SUAP, APPD, UNAC, WHOU, CLDE, LAPS
type CorporateActionEventStage2Code string

type CorporateActionEventStage4Choice struct {
	Cd    CorporateActionEventStage2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 DtTm"`
}

type DateAndPeriod1Choice struct {
	StmtDt  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtDt"`
	StmtPrd Period2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtPrd"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 ToDtTm"`
}

type DeniedReason23Choice struct {
	Cd    DeniedReason7Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of ADEA, DCAL, CDCY, CDRE, CDRG, DCAN, DPRG, DFOR, DREP, DSET, IPNC, LATE, OTHR
type DeniedReason7Code string

type Document struct {
	SctiesStmtQry SecuritiesStatementQuery002V06 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SctiesStmtQry"`
}

type DocumentNumber14 struct {
	Nb DocumentNumber6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Nb"`
}

type DocumentNumber6Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 LngNb"`
	PrtryNb GenericIdentification86           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PrtryNb"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FailingReason15Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type Frequency26Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of COLL, CLAI, OTHR, RODE, SPLI, THRD, TRAN
type GeneratedReason3Code string

type GeneratedReasons6Choice struct {
	Cd    GeneratedReason3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SchmeNm,omitempty"`
}

type GenericIdentification86 struct {
	Id      RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of CAN1, CAN2, CAN3, CAND, CANO, CANP, CGEN, COSE, CPRC, DFLA, DONE, DONF, EXCH, EXSE, FORC, FUTU, INTE, NOTC, OPOD, OVER, PACK, PAFI, PART, PPRC, REJT, REPR, SESE, STIN, SUSP, TREA, UNDE, MPRC
type InstructionProcessingStatus1Code string

type InstructionProcessingStatus26Choice struct {
	Cd    InstructionProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be one of MACH, NMAT
type MatchingStatus1Code string

type MatchingStatus28Choice struct {
	Cd    MatchingStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Tp"`
}

type PartyIdentification109 struct {
	Id  PartyIdentification114Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 LEI,omitempty"`
}

type PartyIdentification114Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AnyBIC"`
	PrtryId GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PrtryId"`
}

type PendingCancellationReasons5Choice struct {
	Cd    PendingReason7Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type PendingProcessingReason13Choice struct {
	Cd    PendingProcessingReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT
type PendingProcessingReason1Code string

type PendingReason37Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type PendingReason47Choice struct {
	Cd    PendingReason8Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

// May be one of ADEA, CONF, OTHR, DQUA
type PendingReason7Code string

// May be one of AWMO, ADEA, AUTH, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, CMON, YCOL, COLL, DEPO, FLIM, NOFX, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, DQUA, FROZ, LAAW, LATE, LIQU, MCER, NPAY, NSEC, PENR, PRCY, REGT, SETS, VLDA, PRSY, CDCY, CDRG, CONF, CDRE, OTHR, IPNC
type PendingReason8Code string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 ToDt"`
}

type Period2Choice struct {
	FrDtTmToDtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FrDtTmToDtTm"`
	FrDtToDt     Period2               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FrDtToDt"`
}

type Reason17Choice struct {
	RepoCallAckRsn AcknowledgementReason18Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RepoCallAckRsn,omitempty"`
	CxlRsn         CancellationReason30Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 CxlRsn,omitempty"`
	PdgCxlRsn      PendingCancellationReasons5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PdgCxlRsn,omitempty"`
	GnrtdRsn       GeneratedReasons6Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 GnrtdRsn,omitempty"`
	DndRsn         DeniedReason23Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 DndRsn,omitempty"`
	AckdAccptdRsn  AcknowledgementReason16Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AckdAccptdRsn,omitempty"`
	PdgRsn         PendingReason47Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PdgRsn,omitempty"`
	FlngRsn        FailingReason15Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 FlngRsn,omitempty"`
	PdgPrcgRsn     PendingProcessingReason13Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PdgPrcgRsn,omitempty"`
	RjctnRsn       RejectionReason34Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RjctnRsn,omitempty"`
	RprRsn         RepairReason18Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RprRsn,omitempty"`
	PdgModRsn      PendingReason37Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PdgModRsn,omitempty"`
	UmtchdRsn      UnmatchedReason29Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 UmtchdRsn,omitempty"`
}

// May be one of PACK, REJT
type RegistrationProcessingStatus1Code string

type RegistrationProcessingStatus4Choice struct {
	Cd    RegistrationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type RejectionReason34Choice struct {
	Cd    RejectionReason39Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of ULNK, SAFE, DQUA, ADEA, RTGS, NCRR, DSEC, DADR, INIR, CANC, INTV, INVA, REFT, PHYS, REFE, LACK, LATE, NMTY, OPNM, DMON, OPTY, DCAN, DPRG, EVNM, STAT, STAM, SIGN, SHAR, MINO, NRGM, MLEG, BATC, CADE, CASH, DDEA, OWNT, NRGN, MUNO, REQW, TXST, REPA, REPO, REPP, RREA, REQM, RERT, RSPR, SETS, DTRD, IIND, PLCE, INNA, ICOL, BPAR, BREF, BUSE, CAEV, CASY, COMC, CONL, CPTY, DDAT, DISC, DISE, DORD, FEEE, SETR, TERM, VASU, INPS, SDUT, FORF, ICUS, ICAG, DEPT, OTHR, IEXE, INVE, PLIS
type RejectionReason39Code string

type RepairReason18Choice struct {
	Cd    RepairReason6Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS, REPA, CADE, RERT, RSPR, VASU, REPO, REPP, TERM, FORF, ADEA, BUSE, COMC, FEEE, INNA, NRGM, NRGN, ULNK
type RepairReason6Code string

// May be one of DEND, EXCH, INTE, PACK, PART, PEND, REJT, REPL, REPR
type ReplacementProcessingStatus1Code string

type ReplacementProcessingStatus9Choice struct {
	Cd    ReplacementProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of CALD, CALP, ADEA
type RepoCallAcknowledgementReason2Code string

type RepoCallRequestStatus10Choice struct {
	Cd    RepoCallRequestStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of CACK, DEND
type RepoCallRequestStatus1Code string

// May be one of ACCP, ACCT, REJT, SUBR
type ResponseStatus1Code string

type ResponseStatus7Choice struct {
	Cd    ResponseStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

type SecuritiesAccount27 struct {
	Id RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Id"`
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Nm,omitempty"`
}

// May be one of PEND, PENF, USET, SETT, PAIN
type SecuritiesSettlementStatus2Code string

type SecuritiesStatementQuery002V06 struct {
	StmtReqd       DocumentNumber14              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtReqd"`
	StmtGnlDtls    Statement54                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtGnlDtls,omitempty"`
	AcctOwnr       PartyIdentification109        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AcctOwnr,omitempty"`
	SfkpgAcct      SecuritiesAccount27           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SfkpgAcct"`
	AddtlQryParams []AdditionalQueryParameters12 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AddtlQryParams,omitempty"`
	SplmtryData    []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SplmtryData,omitempty"`
}

// May be one of CUST, ACCT
type SecuritiesStatementType1Code string

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Desc,omitempty"`
}

// May be one of PACK, REJT, MODP, DEND, MODC
type SettlementConditionModificationStatus1Code string

type SettlementConditionModificationStatus4Choice struct {
	Cd    SettlementConditionModificationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type SettlementStatus25Choice struct {
	Cd    SecuritiesSettlementStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type Statement54 struct {
	StmtDtOrPrd DateAndPeriod1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtDtOrPrd,omitempty"`
	Frqcy       Frequency26Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Frqcy,omitempty"`
	UpdTp       UpdateType16Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 UpdTp,omitempty"`
	StmtBsis    StatementBasis9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtBsis,omitempty"`
	StmtTp      StatementType6Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 StmtTp,omitempty"`
}

// May be one of CONT, SETT, TRAD
type StatementBasis1Code string

type StatementBasis9Choice struct {
	Cd    StatementBasis1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type StatementType6Choice struct {
	Cd    SecuritiesStatementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status22Choice struct {
	AffirmSts          AffirmationStatus9Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AffirmSts"`
	AllcnSts           AllocationSatus4Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 AllcnSts"`
	RepoCallReqSts     RepoCallRequestStatus10Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RepoCallReqSts"`
	CorpActnEvtPrcgSts CorporateActionEventProcessingStatus4Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 CorpActnEvtPrcgSts"`
	CorpActnEvtStag    CorporateActionEventStage4Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 CorpActnEvtStag"`
	IfrrdMtchgSts      MatchingStatus28Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 IfrrdMtchgSts"`
	InstrPrcgSts       InstructionProcessingStatus26Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 InstrPrcgSts"`
	MtchgSts           MatchingStatus28Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 MtchgSts"`
	RegnPrcgSts        RegistrationProcessingStatus4Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RegnPrcgSts"`
	RspnSts            ResponseStatus7Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RspnSts"`
	RplcmntPrcgSts     ReplacementProcessingStatus9Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 RplcmntPrcgSts"`
	CxlPrcgSts         CancellationProcessingStatus8Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 CxlPrcgSts"`
	SttlmSts           SettlementStatus25Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SttlmSts"`
	SttlmCondModSts    SettlementConditionModificationStatus4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 SttlmCondModSts"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ADEA, ACRU, CHAR, TERM, IIND, CPCA, CLAT, NCRR, DDEA, EXEC, DSEC, DQUA, FORF, LEOG, INVE, LATE, MCAN, MIME, CMIS, NMAS, DTRA, OTHR, FRAP, PHYS, PLIS, INPS, PLCE, PODU, DEPT, ICAG, ICUS, IEXE, REGD, REPA, CADE, REPP, REPO, RERT, RSPR, RTGS, SAFE, DMON, DDAT, SETS, SETR, TXST, DTRD, DEAL, DELN, UNBR, VASU, DCMX, DMCT
type UnmatchedReason14Code string

type UnmatchedReason29Choice struct {
	Cd    UnmatchedReason14Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type UpdateType16Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Cd"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.002.06 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
