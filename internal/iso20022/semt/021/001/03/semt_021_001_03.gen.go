// Code generated by main. DO NOT EDIT.

package semt_021_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgementReason2Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type AcknowledgementReason3Choice struct {
	Cd    RepoCallAcknowledgementReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type AdditionalQueryParameters5 struct {
	Sts         Status8Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Sts,omitempty"`
	Rsn         []Reason7Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Rsn,omitempty"`
	FinInstrmId []SecurityIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FinInstrmId,omitempty"`
}

type AffirmationStatus1Choice struct {
	Cd    AffirmationStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of AFFI, NAFI
type AffirmationStatus1Code string

type AllocationSatus1Choice struct {
	Cd    AllocationStatus1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of AOLF, AOLP
type AllocationStatus1Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationProcessingStatus1Choice struct {
	Cd    CancellationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of CAND, CANP, DEND, EXCH, INTE, PACK, PARF, REJT, REPR
type CancellationProcessingStatus1Code string

type CancellationReason9Choice struct {
	Cd    CancelledStatusReason12Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CANO, CREG
type CancelledStatusReason12Code string

type CorporateActionEventProcessingStatus1Choice struct {
	Cd    CorporateActionEventProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of COMP, PEND, RECD
type CorporateActionEventProcessingStatus1Code string

type CorporateActionEventStage1Choice struct {
	Cd    CorporateActionEventStage2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of PWAL, SUAP, APPD, UNAC, WHOU, CLDE, LAPS
type CorporateActionEventStage2Code string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 DtTm"`
}

type DateAndPeriod1Choice struct {
	StmtDt  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtDt"`
	StmtPrd Period2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtPrd"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 ToDtTm"`
}

type DeniedReason1Choice struct {
	Cd    DeniedReason5Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of ADEA, DCAL, DCAN, DFOR, DPRG, DREP, DSET, IPNC, LATE, OTHR, CDCY, CDRE, CDRG
type DeniedReason5Code string

type Document struct {
	SctiesStmtQry SecuritiesStatementQueryV03 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SctiesStmtQry"`
}

type DocumentNumber1 struct {
	Nb DocumentNumber1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Nb"`
}

type DocumentNumber1Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 LngNb"`
	PrtryNb GenericIdentification19           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PrtryNb"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FailingReason1Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type Frequency4Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of COLL, RODE, SPLI, THRD, TRAN, OTHR
type GeneratedReason2Code string

type GeneratedReasons1Choice struct {
	Cd    GeneratedReason2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of CAN1, CAN2, CAN3, CAND, CANO, CANP, CGEN, COSE, CPRC, DFLA, DONE, DONF, EXCH, EXSE, FORC, FUTU, INTE, NOTC, OPOD, OVER, PACK, PAFI, PART, PPRC, REJT, REPR, SESE, STIN, SUSP, TREA, UNDE, MPRC
type InstructionProcessingStatus1Code string

type InstructionProcessingStatus2Choice struct {
	Cd    InstructionProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type MatchingStatus1Choice struct {
	Cd    MatchingStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of MACH, NMAT
type MatchingStatus1Code string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Tp"`
}

type PartyIdentification36Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AnyBIC"`
	PrtryId GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PrtryId"`
}

type PendingCancellationReasons2Choice struct {
	Cd    PendingReason7Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type PendingProcessingReason1Choice struct {
	Cd    PendingProcessingReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT
type PendingProcessingReason1Code string

type PendingReason11Choice struct {
	Cd    PendingReason8Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type PendingReason2Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

// May be one of ADEA, CONF, OTHR, DQUA
type PendingReason7Code string

// May be one of AWMO, ADEA, AUTH, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, CMON, YCOL, COLL, DEPO, FLIM, NOFX, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, DQUA, FROZ, LAAW, LATE, LIQU, MCER, NPAY, NSEC, PENR, PRCY, REGT, SETS, VLDA, PRSY, CDCY, CDRG, CONF, CDRE, OTHR, IPNC
type PendingReason8Code string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 ToDt"`
}

type Period2Choice struct {
	FrDtTmToDtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FrDtTmToDtTm"`
	FrDtToDt     Period2               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FrDtToDt"`
}

type Reason7Choice struct {
	RepoCallAckRsn AcknowledgementReason3Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RepoCallAckRsn,omitempty"`
	CxlRsn         CancellationReason9Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 CxlRsn,omitempty"`
	PdgCxlRsn      PendingCancellationReasons2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PdgCxlRsn,omitempty"`
	GnrtdRsn       GeneratedReasons1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 GnrtdRsn,omitempty"`
	DndRsn         DeniedReason1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 DndRsn,omitempty"`
	AckdAccptdRsn  AcknowledgementReason2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AckdAccptdRsn,omitempty"`
	PdgRsn         PendingReason11Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PdgRsn,omitempty"`
	FlngRsn        FailingReason1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 FlngRsn,omitempty"`
	PdgPrcgRsn     PendingProcessingReason1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PdgPrcgRsn,omitempty"`
	RjctnRsn       RejectionReason5Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RjctnRsn,omitempty"`
	RprRsn         RepairReason7Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RprRsn,omitempty"`
	PdgModRsn      PendingReason2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PdgModRsn,omitempty"`
	UmtchdRsn      UnmatchedReason8Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 UmtchdRsn,omitempty"`
}

type RegistrationProcessingStatus1Choice struct {
	Cd    RegistrationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of PACK, REJT
type RegistrationProcessingStatus1Code string

// May be one of ULNK, SAFE, DQUA, ADEA, RTGS, NCRR, DSEC, DADR, INIR, CANC, INTV, INVA, REFT, PHYS, REFE, LACK, LATE, NMTY, OPNM, DMON, OPTY, DCAN, DPRG, EVNM, STAT, STAM, SIGN, SHAR, MINO, NRGM, MLEG, BATC, CADE, CASH, DDEA, OWNT, NRGN, MUNO, REQW, TXST, REPA, REPO, REPP, RREA, REQM, RERT, RSPR, SETS, DTRD, IIND, PLCE, INNA, ICOL, BPAR, BREF, BUSE, CAEV, CASY, COMC, CONL, CPTY, DDAT, DISC, DISE, DORD, FEEE, SETR, TERM, VASU, INPS, SDUT, FORF, ICUS, ICAG, DEPT, OTHR, IEXE
type RejectionReason16Code string

type RejectionReason5Choice struct {
	Cd    RejectionReason16Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS, REPA, CADE, RERT, RSPR, VASU, REPO, REPP, TERM, FORF, ADEA, BUSE, COMC, FEEE, INNA, NRGM, NRGN, ULNK
type RepairReason6Code string

type RepairReason7Choice struct {
	Cd    RepairReason6Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type ReplacementProcessingStatus1Choice struct {
	Cd    ReplacementProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of DEND, EXCH, INTE, PACK, PART, PEND, REJT, REPL, REPR
type ReplacementProcessingStatus1Code string

// May be one of CALD, CALP, ADEA
type RepoCallAcknowledgementReason2Code string

type RepoCallRequestStatus1Choice struct {
	Cd    RepoCallRequestStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of CACK, DEND
type RepoCallRequestStatus1Code string

type ResponseStatus1Choice struct {
	Cd    ResponseStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of ACCP, ACCT, REJT, SUBR
type ResponseStatus1Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Nm,omitempty"`
}

// May be one of PEND, PENF, USET, SETT, PAIN
type SecuritiesSettlementStatus2Code string

type SecuritiesStatementQueryV03 struct {
	StmtReqd       DocumentNumber1              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtReqd"`
	StmtGnlDtls    Statement16                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtGnlDtls,omitempty"`
	AcctOwnr       PartyIdentification36Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AcctOwnr,omitempty"`
	SfkpgAcct      SecuritiesAccount13          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SfkpgAcct"`
	AddtlQryParams []AdditionalQueryParameters5 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AddtlQryParams,omitempty"`
	SplmtryData    []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SplmtryData,omitempty"`
}

// May be one of CUST, ACCT
type SecuritiesStatementType1Code string

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Desc,omitempty"`
}

type SettlementConditionModificationStatus1Choice struct {
	Cd    SettlementConditionModificationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of PACK, REJT, MODP, DEND, MODC
type SettlementConditionModificationStatus1Code string

type SettlementStatus5Choice struct {
	Cd    SecuritiesSettlementStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type Statement16 struct {
	StmtDtOrPrd DateAndPeriod1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtDtOrPrd,omitempty"`
	Frqcy       Frequency4Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Frqcy,omitempty"`
	UpdTp       UpdateType2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 UpdTp,omitempty"`
	StmtBsis    StatementBasis3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtBsis,omitempty"`
	StmtTp      StatementType2Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 StmtTp,omitempty"`
}

// May be one of CONT, SETT, TRAD
type StatementBasis1Code string

type StatementBasis3Choice struct {
	Cd    StatementBasis1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type StatementType2Choice struct {
	Cd    SecuritiesStatementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status8Choice struct {
	AffirmSts          AffirmationStatus1Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AffirmSts"`
	AllcnSts           AllocationSatus1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 AllcnSts"`
	RepoCallReqSts     RepoCallRequestStatus1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RepoCallReqSts"`
	CorpActnEvtPrcgSts CorporateActionEventProcessingStatus1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 CorpActnEvtPrcgSts"`
	CorpActnEvtStag    CorporateActionEventStage1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 CorpActnEvtStag"`
	IfrrdMtchgSts      MatchingStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 IfrrdMtchgSts"`
	InstrPrcgSts       InstructionProcessingStatus2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 InstrPrcgSts"`
	MtchgSts           MatchingStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 MtchgSts"`
	RegnPrcgSts        RegistrationProcessingStatus1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RegnPrcgSts"`
	RspnSts            ResponseStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RspnSts"`
	RplcmntPrcgSts     ReplacementProcessingStatus1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 RplcmntPrcgSts"`
	CxlPrcgSts         CancellationProcessingStatus1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 CxlPrcgSts"`
	SttlmSts           SettlementStatus5Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SttlmSts"`
	SttlmCondModSts    SettlementConditionModificationStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 SttlmCondModSts"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of CMIS, DDAT, DELN, DEAL, DEPT, DMON, DDEA, DQUA, CADE, ADEA, SETR, SETS, DSEC, VASU, DTRA, RSPR, REPO, CLAT, RERT, REPA, REPP, PHYS, IIND, FRAP, PLCE, PODU, FORF, EXEC, REGD, RTGS, ICAG, CPCA, CHAR, IEXE, NCRR, MCAN, LEOG, NMAS, SAFE, DTRD, LATE, TERM, TXST, ICUS, INPS, MIME, UNBR, OTHR, ACRU
type UnmatchedReason6Code string

type UnmatchedReason8Choice struct {
	Cd    UnmatchedReason6Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type UpdateType2Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Cd"`
	Prtry GenericIdentification20  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.03 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
