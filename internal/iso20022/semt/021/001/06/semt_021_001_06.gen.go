// Code generated by main. DO NOT EDIT.

package semt_021_001_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgementReason12Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type AcknowledgementReason13Choice struct {
	Cd    RepoCallAcknowledgementReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type AdditionalQueryParameters11 struct {
	Sts         Status19Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Sts,omitempty"`
	Rsn         []Reason16Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Rsn,omitempty"`
	FinInstrmId []SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FinInstrmId,omitempty"`
}

// May be one of AFFI, NAFI
type AffirmationStatus1Code string

type AffirmationStatus8Choice struct {
	Cd    AffirmationStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type AllocationSatus3Choice struct {
	Cd    AllocationStatus1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of AOLF, AOLP
type AllocationStatus1Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CAND, CANP, DEND, EXCH, INTE, PACK, PARF, REJT, REPR
type CancellationProcessingStatus1Code string

type CancellationProcessingStatus7Choice struct {
	Cd    CancellationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type CancellationReason20Choice struct {
	Cd    CancelledStatusReason12Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CANO, CREG
type CancelledStatusReason12Code string

// May be one of COMP, PEND, RECD
type CorporateActionEventProcessingStatus1Code string

type CorporateActionEventProcessingStatus3Choice struct {
	Cd    CorporateActionEventProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of PWAL, SUAP, APPD, UNAC, WHOU, CLDE, LAPS
type CorporateActionEventStage2Code string

type CorporateActionEventStage3Choice struct {
	Cd    CorporateActionEventStage2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 DtTm"`
}

type DateAndPeriod1Choice struct {
	StmtDt  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtDt"`
	StmtPrd Period2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtPrd"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 ToDtTm"`
}

type DeniedReason14Choice struct {
	Cd    DeniedReason7Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ADEA, DCAL, CDCY, CDRE, CDRG, DCAN, DPRG, DFOR, DREP, DSET, IPNC, LATE, OTHR
type DeniedReason7Code string

type Document struct {
	SctiesStmtQry SecuritiesStatementQueryV06 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SctiesStmtQry"`
}

type DocumentNumber13 struct {
	Nb DocumentNumber5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Nb"`
}

type DocumentNumber5Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 LngNb"`
	PrtryNb GenericIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PrtryNb"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type FailingReason9Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type Frequency25Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of COLL, CLAI, OTHR, RODE, SPLI, THRD, TRAN
type GeneratedReason3Code string

type GeneratedReasons5Choice struct {
	Cd    GeneratedReason3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of CAN1, CAN2, CAN3, CAND, CANO, CANP, CGEN, COSE, CPRC, DFLA, DONE, DONF, EXCH, EXSE, FORC, FUTU, INTE, NOTC, OPOD, OVER, PACK, PAFI, PART, PPRC, REJT, REPR, SESE, STIN, SUSP, TREA, UNDE, MPRC
type InstructionProcessingStatus1Code string

type InstructionProcessingStatus23Choice struct {
	Cd    InstructionProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be one of MACH, NMAT
type MatchingStatus1Code string

type MatchingStatus27Choice struct {
	Cd    MatchingStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Tp"`
}

type PartyIdentification92Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AnyBIC"`
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PrtryId"`
}

type PartyIdentification98 struct {
	Id  PartyIdentification92Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Id"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 LEI,omitempty"`
}

type PendingCancellationReasons4Choice struct {
	Cd    PendingReason7Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type PendingProcessingReason11Choice struct {
	Cd    PendingProcessingReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT
type PendingProcessingReason1Code string

type PendingReason28Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type PendingReason29Choice struct {
	Cd    PendingReason8Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

// May be one of ADEA, CONF, OTHR, DQUA
type PendingReason7Code string

// May be one of AWMO, ADEA, AUTH, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, CMON, YCOL, COLL, DEPO, FLIM, NOFX, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, DQUA, FROZ, LAAW, LATE, LIQU, MCER, NPAY, NSEC, PENR, PRCY, REGT, SETS, VLDA, PRSY, CDCY, CDRG, CONF, CDRE, OTHR, IPNC
type PendingReason8Code string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 ToDt"`
}

type Period2Choice struct {
	FrDtTmToDtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FrDtTmToDtTm"`
	FrDtToDt     Period2               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FrDtToDt"`
}

type Reason16Choice struct {
	RepoCallAckRsn AcknowledgementReason13Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RepoCallAckRsn,omitempty"`
	CxlRsn         CancellationReason20Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 CxlRsn,omitempty"`
	PdgCxlRsn      PendingCancellationReasons4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PdgCxlRsn,omitempty"`
	GnrtdRsn       GeneratedReasons5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 GnrtdRsn,omitempty"`
	DndRsn         DeniedReason14Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 DndRsn,omitempty"`
	AckdAccptdRsn  AcknowledgementReason12Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AckdAccptdRsn,omitempty"`
	PdgRsn         PendingReason29Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PdgRsn,omitempty"`
	FlngRsn        FailingReason9Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 FlngRsn,omitempty"`
	PdgPrcgRsn     PendingProcessingReason11Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PdgPrcgRsn,omitempty"`
	RjctnRsn       RejectionReason22Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RjctnRsn,omitempty"`
	RprRsn         RepairReason11Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RprRsn,omitempty"`
	PdgModRsn      PendingReason28Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PdgModRsn,omitempty"`
	UmtchdRsn      UnmatchedReason22Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 UmtchdRsn,omitempty"`
}

// May be one of PACK, REJT
type RegistrationProcessingStatus1Code string

type RegistrationProcessingStatus3Choice struct {
	Cd    RegistrationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type RejectionReason22Choice struct {
	Cd    RejectionReason39Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ULNK, SAFE, DQUA, ADEA, RTGS, NCRR, DSEC, DADR, INIR, CANC, INTV, INVA, REFT, PHYS, REFE, LACK, LATE, NMTY, OPNM, DMON, OPTY, DCAN, DPRG, EVNM, STAT, STAM, SIGN, SHAR, MINO, NRGM, MLEG, BATC, CADE, CASH, DDEA, OWNT, NRGN, MUNO, REQW, TXST, REPA, REPO, REPP, RREA, REQM, RERT, RSPR, SETS, DTRD, IIND, PLCE, INNA, ICOL, BPAR, BREF, BUSE, CAEV, CASY, COMC, CONL, CPTY, DDAT, DISC, DISE, DORD, FEEE, SETR, TERM, VASU, INPS, SDUT, FORF, ICUS, ICAG, DEPT, OTHR, IEXE, INVE, PLIS
type RejectionReason39Code string

type RepairReason11Choice struct {
	Cd    RepairReason6Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS, REPA, CADE, RERT, RSPR, VASU, REPO, REPP, TERM, FORF, ADEA, BUSE, COMC, FEEE, INNA, NRGM, NRGN, ULNK
type RepairReason6Code string

// May be one of DEND, EXCH, INTE, PACK, PART, PEND, REJT, REPL, REPR
type ReplacementProcessingStatus1Code string

type ReplacementProcessingStatus8Choice struct {
	Cd    ReplacementProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of CALD, CALP, ADEA
type RepoCallAcknowledgementReason2Code string

// May be one of CACK, DEND
type RepoCallRequestStatus1Code string

type RepoCallRequestStatus8Choice struct {
	Cd    RepoCallRequestStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of ACCP, ACCT, REJT, SUBR
type ResponseStatus1Code string

type ResponseStatus5Choice struct {
	Cd    ResponseStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type SecuritiesAccount24 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Nm,omitempty"`
}

// May be one of PEND, PENF, USET, SETT, PAIN
type SecuritiesSettlementStatus2Code string

type SecuritiesStatementQueryV06 struct {
	StmtReqd       DocumentNumber13              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtReqd"`
	StmtGnlDtls    Statement42                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtGnlDtls,omitempty"`
	AcctOwnr       PartyIdentification98         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AcctOwnr,omitempty"`
	SfkpgAcct      SecuritiesAccount24           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SfkpgAcct"`
	AddtlQryParams []AdditionalQueryParameters11 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AddtlQryParams,omitempty"`
	SplmtryData    []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SplmtryData,omitempty"`
}

// May be one of CUST, ACCT
type SecuritiesStatementType1Code string

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Desc,omitempty"`
}

// May be one of PACK, REJT, MODP, DEND, MODC
type SettlementConditionModificationStatus1Code string

type SettlementConditionModificationStatus3Choice struct {
	Cd    SettlementConditionModificationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type SettlementStatus19Choice struct {
	Cd    SecuritiesSettlementStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type Statement42 struct {
	StmtDtOrPrd DateAndPeriod1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtDtOrPrd,omitempty"`
	Frqcy       Frequency25Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Frqcy,omitempty"`
	UpdTp       UpdateType15Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 UpdTp,omitempty"`
	StmtBsis    StatementBasis7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtBsis,omitempty"`
	StmtTp      StatementType5Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 StmtTp,omitempty"`
}

// May be one of CONT, SETT, TRAD
type StatementBasis1Code string

type StatementBasis7Choice struct {
	Cd    StatementBasis1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type StatementType5Choice struct {
	Cd    SecuritiesStatementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status19Choice struct {
	AffirmSts          AffirmationStatus8Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AffirmSts"`
	AllcnSts           AllocationSatus3Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 AllcnSts"`
	RepoCallReqSts     RepoCallRequestStatus8Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RepoCallReqSts"`
	CorpActnEvtPrcgSts CorporateActionEventProcessingStatus3Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 CorpActnEvtPrcgSts"`
	CorpActnEvtStag    CorporateActionEventStage3Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 CorpActnEvtStag"`
	IfrrdMtchgSts      MatchingStatus27Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 IfrrdMtchgSts"`
	InstrPrcgSts       InstructionProcessingStatus23Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 InstrPrcgSts"`
	MtchgSts           MatchingStatus27Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 MtchgSts"`
	RegnPrcgSts        RegistrationProcessingStatus3Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RegnPrcgSts"`
	RspnSts            ResponseStatus5Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RspnSts"`
	RplcmntPrcgSts     ReplacementProcessingStatus8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 RplcmntPrcgSts"`
	CxlPrcgSts         CancellationProcessingStatus7Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 CxlPrcgSts"`
	SttlmSts           SettlementStatus19Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SttlmSts"`
	SttlmCondModSts    SettlementConditionModificationStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 SttlmCondModSts"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ADEA, ACRU, CHAR, TERM, IIND, CPCA, CLAT, NCRR, DDEA, EXEC, DSEC, DQUA, FORF, LEOG, INVE, LATE, MCAN, MIME, CMIS, NMAS, DTRA, OTHR, FRAP, PHYS, PLIS, INPS, PLCE, PODU, DEPT, ICAG, ICUS, IEXE, REGD, REPA, CADE, REPP, REPO, RERT, RSPR, RTGS, SAFE, DMON, DDAT, SETS, SETR, TXST, DTRD, DEAL, DELN, UNBR, VASU, DCMX, DMCT
type UnmatchedReason14Code string

type UnmatchedReason22Choice struct {
	Cd    UnmatchedReason14Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type UpdateType15Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Cd"`
	Prtry GenericIdentification30  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.06 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
