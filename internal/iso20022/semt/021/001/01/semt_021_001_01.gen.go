// Code generated by main. DO NOT EDIT.

package semt_021_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgementReason2Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type AcknowledgementReason3Choice struct {
	Cd    RepoCallAcknowledgementReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type AdditionalQueryParameters1 struct {
	Sts         Status1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Sts,omitempty"`
	Rsn         []Reason1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Rsn,omitempty"`
	FinInstrmId []SecurityIdentification11 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FinInstrmId,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AffirmationStatus1Choice struct {
	Cd    AffirmationStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of AFFI, NAFI
type AffirmationStatus1Code string

type AllocationSatus1Choice struct {
	Cd    AllocationStatus1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of AOLF, AOLP
type AllocationStatus1Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationProcessingStatus1Choice struct {
	Cd    CancellationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of CAND, CANP, DEND, EXCH, INTE, PACK, PARF, REJT, REPR
type CancellationProcessingStatus1Code string

type CancellationReason4Choice struct {
	Cd    CancelledStatusReason10Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CANO
type CancelledStatusReason10Code string

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

type CorporateActionEventProcessingStatus1Choice struct {
	Cd    CorporateActionEventProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of COMP, PEND, RECD
type CorporateActionEventProcessingStatus1Code string

type CorporateActionEventStage1Choice struct {
	Cd    CorporateActionEventStage2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of PWAL, SUAP, APPD, UNAC, WHOU, CLDE, LAPS
type CorporateActionEventStage2Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 DtTm"`
}

type DateAndPeriod1Choice struct {
	StmtDt  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtDt"`
	StmtPrd Period2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtPrd"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 ToDtTm"`
}

type DeniedReason1Choice struct {
	Cd    DeniedReason5Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of ADEA, DCAL, DCAN, DFOR, DPRG, DREP, DSET, IPNC, LATE, OTHR, CDCY, CDRE, CDRG
type DeniedReason5Code string

type Document struct {
	SctiesStmtQry SecuritiesStatementQueryV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SctiesStmtQry"`
}

type DocumentIdentification11 struct {
	Id       Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	CreDtTm  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CreDtTm,omitempty"`
	CpyDplct CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CpyDplct,omitempty"`
}

type DocumentNumber1 struct {
	Nb DocumentNumber1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Nb"`
}

type DocumentNumber1Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 LngNb"`
	PrtryNb GenericIdentification19           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PrtryNb"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type FailingReason1Choice struct {
	Cd    FailingReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY
type FailingReason1Code string

type Frequency4Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of COLL, RODE, SPLI, THRD, TRAN, OTHR
type GeneratedReason2Code string

type GeneratedReasons1Choice struct {
	Cd    GeneratedReason2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of CAN1, CAN2, CAN3, CAND, CANO, CANP, CGEN, COSE, CPRC, DFLA, DONE, DONF, EXCH, EXSE, FORC, FUTU, INTE, NOTC, OPOD, OVER, PACK, PAFI, PART, PPRC, REJT, REPR, SESE, STIN, SUSP, TREA, UNDE, MPRC
type InstructionProcessingStatus1Code string

type InstructionProcessingStatus2Choice struct {
	Cd    InstructionProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type MatchingStatus1Choice struct {
	Cd    MatchingStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of MACH, NMAT
type MatchingStatus1Code string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Adr,omitempty"`
}

type PartyIdentification10Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 NmAndAdr"`
}

type PartyIdentification13Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PrtryId"`
}

type PendingCancellationReasons2Choice struct {
	Cd    PendingReason7Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type PendingProcessingReason1Choice struct {
	Cd    PendingProcessingReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT
type PendingProcessingReason1Code string

type PendingReason2Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type PendingReason3Choice struct {
	Cd    PendingReason3Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of AWMO, ADEA, AUTH, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, CMON, YCOL, COLL, DEPO, FLIM, NOFX, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, DQUA, FROZ, LAAW, LATE, LIQU, MCER, NPAY, NSEC, PENR, PRCY, REGT, SETS, VLDA, PRSY, CDCY, CDRG, CONF, CDRE, OTHR
type PendingReason3Code string

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

// May be one of ADEA, CONF, OTHR, DQUA
type PendingReason7Code string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 ToDt"`
}

type Period2Choice struct {
	FrDtTmToDtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FrDtTmToDtTm"`
	FrDtToDt     Period2               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FrDtToDt"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Ctry"`
}

type Reason1Choice struct {
	RepoCallAckRsn AcknowledgementReason3Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RepoCallAckRsn,omitempty"`
	CxlRsn         CancellationReason4Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CxlRsn,omitempty"`
	PdgCxlRsn      PendingCancellationReasons2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PdgCxlRsn,omitempty"`
	GnrtdRsn       GeneratedReasons1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 GnrtdRsn,omitempty"`
	DndRsn         DeniedReason1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 DndRsn,omitempty"`
	AckdAccptdRsn  AcknowledgementReason2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AckdAccptdRsn,omitempty"`
	PdgRsn         PendingReason3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PdgRsn,omitempty"`
	FlngRsn        FailingReason1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 FlngRsn,omitempty"`
	PdgPrcgRsn     PendingProcessingReason1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PdgPrcgRsn,omitempty"`
	RjctnRsn       RejectionReason5Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RjctnRsn,omitempty"`
	RprRsn         RepairReason3Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RprRsn,omitempty"`
	PdgModRsn      PendingReason2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 PdgModRsn,omitempty"`
	UmtchdRsn      UnmatchedReason2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 UmtchdRsn,omitempty"`
}

type RegistrationProcessingStatus1Choice struct {
	Cd    RegistrationProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of PACK, REJT
type RegistrationProcessingStatus1Code string

// May be one of ULNK, SAFE, DQUA, ADEA, RTGS, NCRR, DSEC, DADR, INIR, CANC, INTV, INVA, REFT, PHYS, REFE, LACK, LATE, NMTY, OPNM, DMON, OPTY, DCAN, DPRG, EVNM, STAT, STAM, SIGN, SHAR, MINO, NRGM, MLEG, BATC, CADE, CASH, DDEA, OWNT, NRGN, MUNO, REQW, TXST, REPA, REPO, REPP, RREA, REQM, RERT, RSPR, SETS, DTRD, IIND, PLCE, INNA, ICOL, BPAR, BREF, BUSE, CAEV, CASY, COMC, CONL, CPTY, DDAT, DISC, DISE, DORD, FEEE, SETR, TERM, VASU, INPS, SDUT, FORF, ICUS, ICAG, DEPT, OTHR, IEXE
type RejectionReason16Code string

type RejectionReason5Choice struct {
	Cd    RejectionReason16Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type RepairReason3Choice struct {
	Cd    RepairReason5Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS, REPA, CADE, RERT, RSPR, VASU, REPO, REPP, TERM, FORF
type RepairReason5Code string

type ReplacementProcessingStatus1Choice struct {
	Cd    ReplacementProcessingStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of DEND, EXCH, INTE, PACK, PART, PEND, REJT, REPL, REPR
type ReplacementProcessingStatus1Code string

// May be one of CALD, CALP, ADEA
type RepoCallAcknowledgementReason2Code string

type RepoCallRequestStatus1Choice struct {
	Cd    RepoCallRequestStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of CACK, DEND
type RepoCallRequestStatus1Code string

type ResponseStatus1Choice struct {
	Cd    ResponseStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of ACCP, ACCT, REJT, SUBR
type ResponseStatus1Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Nm,omitempty"`
}

// May be one of PEND, PENF
type SecuritiesSettlementStatus1Code string

type SecuritiesStatementQueryV01 struct {
	Id             DocumentIdentification11     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	StmtReqd       DocumentNumber1              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtReqd"`
	StmtGnlDtls    Statement16                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtGnlDtls,omitempty"`
	AcctOwnr       PartyIdentification13Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AcctOwnr,omitempty"`
	SfkpgAcct      SecuritiesAccount13          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SfkpgAcct"`
	AddtlQryParams []AdditionalQueryParameters1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AddtlQryParams,omitempty"`
	MsgOrgtr       PartyIdentification10Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 MsgOrgtr,omitempty"`
	MsgRcpt        PartyIdentification10Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 MsgRcpt,omitempty"`
	Xtnsn          []Extension2                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Xtnsn,omitempty"`
}

// May be one of CUST, ACCT
type SecuritiesStatementType1Code string

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 OthrId"`
}

type SettlementConditionModificationStatus1Choice struct {
	Cd    SettlementConditionModificationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of PACK, REJT, MODP, DEND, MODC
type SettlementConditionModificationStatus1Code string

type SettlementStatus1Choice struct {
	Cd    SecuritiesSettlementStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type Statement16 struct {
	StmtDtOrPrd DateAndPeriod1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtDtOrPrd,omitempty"`
	Frqcy       Frequency4Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Frqcy,omitempty"`
	UpdTp       UpdateType2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 UpdTp,omitempty"`
	StmtBsis    StatementBasis3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtBsis,omitempty"`
	StmtTp      StatementType2Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 StmtTp,omitempty"`
}

// May be one of CONT, SETT, TRAD
type StatementBasis1Code string

type StatementBasis3Choice struct {
	Cd    StatementBasis1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type StatementType2Choice struct {
	Cd    SecuritiesStatementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type Status1Choice struct {
	AffirmSts          AffirmationStatus1Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AffirmSts"`
	AllcnSts           AllocationSatus1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 AllcnSts"`
	RepoCallReqSts     RepoCallRequestStatus1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RepoCallReqSts"`
	CorpActnEvtPrcgSts CorporateActionEventProcessingStatus1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CorpActnEvtPrcgSts"`
	CorpActnEvtStag    CorporateActionEventStage1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CorpActnEvtStag"`
	IfrrdMtchgSts      MatchingStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 IfrrdMtchgSts"`
	InstrPrcgSts       InstructionProcessingStatus2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 InstrPrcgSts"`
	MtchgSts           MatchingStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 MtchgSts"`
	RegnPrcgSts        RegistrationProcessingStatus1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RegnPrcgSts"`
	RspnSts            ResponseStatus1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RspnSts"`
	RplcmntPrcgSts     ReplacementProcessingStatus1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 RplcmntPrcgSts"`
	CxlPrcgSts         CancellationProcessingStatus1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 CxlPrcgSts"`
	SttlmSts           SettlementStatus1Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SttlmSts"`
	SttlmCondModSts    SettlementConditionModificationStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 SttlmCondModSts"`
}

type UnmatchedReason2Choice struct {
	Cd    UnmatchedReason3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

// May be one of CMIS, DDAT, DELN, DEAL, DEPT, DMON, DDEA, DQUA, CADE, ADEA, SETR, SETS, DSEC, VASU, DTRA, RSPR, REPO, CLAT, RERT, REPA, REPP, PHYS, IIND, FRAP, PLCE, PODU, FORF, EXEC, REGD, RTGS, ICAG, CPCA, CHAR, IEXE, NCRR, MCAN, LEOG, NMAS, SAFE, DTRD, LATE, TERM, TXST, ICUS, INPS, MIME, UNBR, OTHR
type UnmatchedReason3Code string

type UpdateType2Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Cd"`
	Prtry GenericIdentification20  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.021.001.01 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
