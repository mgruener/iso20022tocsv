// Code generated by main. DO NOT EDIT.

package semt_020_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 DtTm"`
}

type Document struct {
	SctiesMsgCxlAdvc SecuritiesMessageCancellationAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesMsgCxlAdvc"`
}

type DocumentIdentification11 struct {
	Id       Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Id"`
	CreDtTm  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 CreDtTm,omitempty"`
	CpyDplct CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 CpyDplct,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Adr,omitempty"`
}

type PartyIdentification10Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 NmAndAdr"`
}

type PartyIdentification13Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 PrtryId"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Ctry"`
}

type References3Choice struct {
	SctiesSttlmTxConfId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesSttlmTxConfId"`
	IntraPosMvmntConfId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 IntraPosMvmntConfId"`
	SctiesBalAcctgRptId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesBalAcctgRptId"`
	SctiesBalCtdyRptId            Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesBalCtdyRptId"`
	IntraPosMvmntPstngRptId       Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 IntraPosMvmntPstngRptId"`
	SctiesFincgConfId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesFincgConfId"`
	SctiesTxPdgRptId              Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesTxPdgRptId"`
	SctiesTxPstngRptId            Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesTxPstngRptId"`
	SctiesSttlmTxAllgmtRptId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesSttlmTxAllgmtRptId"`
	SctiesSttlmTxAllgmtNtfctnTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesSttlmTxAllgmtNtfctnTxId"`
	PrtflTrfNtfctnId              Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 PrtflTrfNtfctnId"`
	SctiesSttlmTxGnrtnNtfctnId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SctiesSttlmTxGnrtnNtfctnId"`
	OthrMsgId                     Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 OthrMsgId"`
}

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Nm,omitempty"`
}

type SecuritiesMessageCancellationAdviceV01 struct {
	Id       DocumentIdentification11    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Id"`
	Dtls     TransactionDetails12        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Dtls"`
	MsgOrgtr PartyIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 MsgOrgtr,omitempty"`
	MsgRcpt  PartyIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 MsgRcpt,omitempty"`
	Xtnsn    []Extension2                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Xtnsn,omitempty"`
}

type TransactionDetails12 struct {
	Ref       References3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 Ref"`
	AcctOwnr  PartyIdentification13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 AcctOwnr,omitempty"`
	SfkpgAcct SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.020.001.01 SfkpgAcct"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
