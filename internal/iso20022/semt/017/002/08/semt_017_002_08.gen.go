// Code generated by main. DO NOT EDIT.

package semt_017_002_08

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AmountAndDirection18 struct {
	Amt    RestrictedFINActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Amt"`
	CdtDbt CreditDebitCode                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CdtDbt"`
}

type AmountAndDirection59 struct {
	Amt       RestrictedFINActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Amt"`
	CdtDbtInd CreditDebitCode                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CdtDbtInd,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BalanceQuantity12Choice struct {
	Qty   FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Qty"`
	Prtry GenericIdentification144            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type BeneficialOwnership5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of BLPA, BLCH
type BlockTrade1Code string

type BlockTrade5Choice struct {
	Cd    BlockTrade1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of GROS, NETS
type CashSettlementSystem2Code string

type CashSettlementSystem5Choice struct {
	Cd    CashSettlementSystem2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type CentralCounterPartyEligibility5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type ClosingBalance4 struct {
	ShrtLngInd ShortLong1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ShrtLngInd"`
	ClsgBal    ClosingBalance5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ClsgBal"`
}

type ClosingBalance5Choice struct {
	Fnl    BalanceQuantity12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Fnl"`
	Intrmy BalanceQuantity12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Intrmy"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, COOP, CLSA, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH, ACCU, MTNG, INFO, TNDP
type CorporateActionEventType28Code string

type CorporateActionEventType83Choice struct {
	Cd    CorporateActionEventType28Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 DtTm"`
}

type DateTimePeriodDetails2 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ToDtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	SctiesTxPstngRpt SecuritiesTransactionPostingReport002V08 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SctiesTxPstngRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{5}
type Exact5NumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentDetails31 struct {
	FinInstrmId SecurityIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FinInstrmId"`
	PricDtls    PriceInformation19       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PricDtls,omitempty"`
	SfkpgPlc    SafeKeepingPlace2        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgPlc,omitempty"`
	OpngBal     OpeningBalance4          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 OpngBal,omitempty"`
	ClsgBal     ClosingBalance4          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ClsgBal,omitempty"`
	Tx          []Transaction65          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tx"`
}

type FinancialInstrumentQuantity15Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AmtsdVal"`
}

type Frequency26Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type GenericIdentification144 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SchmeNm,omitempty"`
	Bal     float64                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Bal"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SchmeNm,omitempty"`
}

type GenericIdentification85 struct {
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp"`
	Id RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LetterOfGuarantee5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// May be one of CLNT, MAKT
type MarketClientSide1Code string

type MarketClientSide7Choice struct {
	Cd    MarketClientSide1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type MarketIdentification2Choice struct {
	MktIdrCd MICIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 MktIdrCd"`
	Desc     RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Desc"`
}

type MarketIdentification90 struct {
	Id MarketIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id,omitempty"`
	Tp MarketType16Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp"`
}

type MarketIdentification91 struct {
	Id MarketIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id,omitempty"`
	Tp MarketType17Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp"`
}

type MarketType16Choice struct {
	Cd    MarketType2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type MarketType17Choice struct {
	Cd    MarketType4Code         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of PRIM, SECM, OTCO, VARI, EXCH
type MarketType2Code string

// May be one of FUND, LMAR, THEO, VEND
type MarketType4Code string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress12 struct {
	Nm RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Nm"`
}

type NettingEligibility5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type Number3Choice struct {
	Shrt Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Shrt"`
	Lng  Exact5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Lng"`
}

type OpeningBalance4 struct {
	ShrtLngInd ShortLong1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ShrtLngInd"`
	OpngBal    OpeningBalance5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 OpngBal"`
}

type OpeningBalance5Choice struct {
	Frst   BalanceQuantity12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Frst"`
	Intrmy BalanceQuantity12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Intrmy"`
}

type OriginalAndCurrentQuantities4 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AmtsdVal"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp"`
}

// May be one of A144, NRST, RSTR
type OwnershipLegalRestrictions1Code string

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LastPgInd"`
}

type PartyIdentification103Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AnyBIC"`
	PrtryId GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrtryId"`
}

type PartyIdentification104Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AnyBIC"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrtryId"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 NmAndAdr"`
}

type PartyIdentification108 struct {
	Id     PartyIdentification58Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	LEI    LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
	PrcgId RestrictedFINXMax16Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrcgId,omitempty"`
}

type PartyIdentification119 struct {
	Id  PartyIdentification103Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
}

type PartyIdentification58Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AnyBIC"`
	NmAndAdr NameAndAddress12 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ctry"`
}

type PartyIdentificationAndAccount146 struct {
	Id        PartyIdentification104Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	LEI       LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
	SfkpgAcct SecuritiesAccount30          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgAcct,omitempty"`
	PrcgId    RestrictedFINXMax16Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrcgId,omitempty"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ToDt"`
}

type Period5Choice struct {
	FrDtTmToDtTm DateTimePeriodDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FrDtTmToDtTm"`
	FrDtToDt     Period2                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FrDtToDt"`
}

type PlaceOfClearingIdentification1 struct {
	Id  AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id,omitempty"`
	LEI LEIIdentifier    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
}

type PlaceOfTradeIdentification2 struct {
	MktTpAndId MarketIdentification90 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 MktTpAndId,omitempty"`
	LEI        LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
}

type PriceInformation19 struct {
	Tp        TypeOfPrice45Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp"`
	ValTp     YieldedOrValueType1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ValTp"`
	Val       PriceRateOrAmountOrUnknown3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Val"`
	SrcOfPric MarketIdentification91            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SrcOfPric,omitempty"`
	QtnDt     DateAndDateTime2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 QtnDt,omitempty"`
}

type PriceRateOrAmountOrUnknown3Choice struct {
	Rate     float64                                                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Rate"`
	Amt      RestrictedFINActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Amt"`
	UknwnInd bool                                                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 UknwnInd"`
}

// May be one of DISC, PREM, PARV
type PriceValueType1Code string

type PurposeCode8Choice struct {
	Cd    SecuritiesAccountPurposeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type Quantity10Choice struct {
	Qty             FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities4       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type Registration11Choice struct {
	Cd    Registration1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of NREG, YREG
type Registration1Code string

type RepurchaseType24Choice struct {
	Cd    RepurchaseType9Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of PAIR, PADJ, RATE, CALL, ROLP, CADJ, TOPU, WTHD
type RepurchaseType9Code string

type RestrictedFINActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type RestrictedFINActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,350}
type RestrictedFINXMax350Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

type Restriction6Choice struct {
	Cd    OwnershipLegalRestrictions1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type SafeKeepingPlace2 struct {
	SfkpgPlcFrmt SafekeepingPlaceFormat17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgPlcFrmt,omitempty"`
	LEI          LEIIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LEI,omitempty"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat17Choice struct {
	Id      SafekeepingPlaceTypeAndText15            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TpAndId"`
	Prtry   GenericIdentification85                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
}

type SafekeepingPlaceTypeAndText15 struct {
	SfkpgPlcTp SafekeepingPlace3Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgPlcTp"`
	Id         RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id,omitempty"`
}

type SecuritiesAccount30 struct {
	Id RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Nm,omitempty"`
}

type SecuritiesAccount34 struct {
	Id RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Id"`
	Tp PurposeCode8Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Nm,omitempty"`
}

// May be one of MARG, SHOR, ABRD, CEND, DVPA, PHYS
type SecuritiesAccountPurposeType1Code string

type SecuritiesRTGS5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type SecuritiesTransactionPostingReport002V08 struct {
	Pgntn         Pagination1                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pgntn"`
	StmtGnlDtls   Statement71                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 StmtGnlDtls"`
	AcctOwnr      PartyIdentification119         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AcctOwnr,omitempty"`
	SfkpgAcct     SecuritiesAccount30            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgAcct"`
	FinInstrmDtls []FinancialInstrumentDetails31 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FinInstrmDtls,omitempty"`
	SubAcctDtls   []SubAccountIdentification52   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SubAcctDtls,omitempty"`
}

// May be one of BSBK, BIYI, CNCB, COLI, COLO, CONV, FCTA, INSP, ISSU, MKDW, MKUP, NETT, NSYN, OWNE, OWNI, PAIR, PLAC, PORT, REAL, REDI, REDM, RELE, REPU, RODE, RVPO, SBBK, SBRE, SECB, SECL, SLRE, SUBS, SYND, TBAC, TRAD, TRPO, TRVO, TURN, CLAI, CORP, AUTO, ETFT, SWIF, SWIT
type SecuritiesTransactionType19Code string

type SecuritiesTransactionType41Choice struct {
	Cd    SecuritiesTransactionType19Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Desc,omitempty"`
}

type SettlementDate20Choice struct {
	Dt   DateAndDateTime2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Dt"`
	DtCd SettlementDateCode9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 DtCd"`
}

// May be one of WISS
type SettlementDate4Code string

type SettlementDateCode9Choice struct {
	Cd    SettlementDate4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type SettlementDetails162 struct {
	SttlmTxCond    []SettlementTransactionCondition28Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlmTxCond,omitempty"`
	SttlgCpcty     SettlingCapacity8Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlgCpcty,omitempty"`
	StmpDtyTaxBsis GenericIdentification47                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 StmpDtyTaxBsis,omitempty"`
	SctiesRTGS     SecuritiesRTGS5Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SctiesRTGS,omitempty"`
	Regn           Registration11Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Regn,omitempty"`
	BnfclOwnrsh    BeneficialOwnership5Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 BnfclOwnrsh,omitempty"`
	CshClrSys      CashSettlementSystem5Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CshClrSys,omitempty"`
	TaxCpcty       TaxCapacityParty5Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TaxCpcty,omitempty"`
	RpTp           RepurchaseType24Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 RpTp,omitempty"`
	MktClntSd      MarketClientSide7Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 MktClntSd,omitempty"`
	BlckTrad       BlockTrade5Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 BlckTrad,omitempty"`
	LglRstrctns    Restriction6Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LglRstrctns,omitempty"`
	SttlmSysMtd    SettlementSystemMethod5Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlmSysMtd,omitempty"`
	NetgElgblty    NettingEligibility5Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 NetgElgblty,omitempty"`
	CCPElgblty     CentralCounterPartyEligibility5Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CCPElgblty,omitempty"`
	LttrOfGrnt     LetterOfGuarantee5Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 LttrOfGrnt,omitempty"`
	PrtlSttlmInd   SettlementTransactionCondition5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrtlSttlmInd,omitempty"`
}

type SettlementOrCorporateActionEvent25Choice struct {
	SctiesTxTp    SecuritiesTransactionType41Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SctiesTxTp"`
	CorpActnEvtTp CorporateActionEventType83Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CorpActnEvtTp"`
}

type SettlementParties49 struct {
	Dpstry PartyIdentification108           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pty5,omitempty"`
}

// May be one of NSET, YSET
type SettlementSystemMethod1Code string

type SettlementSystemMethod5Choice struct {
	Cd    SettlementSystemMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of ADEA, ASGN, BUTC, CLEN, DLWM, DIRT, DRAW, EXER, EXPI, FRCL, KNOC, NOMC, NACT, PENS, PHYS, RHYP, RPTO, RESI, SHOR, SPDL, SPST, TRAN, TRIP, UNEX
type SettlementTransactionCondition10Code string

type SettlementTransactionCondition28Choice struct {
	Cd    SettlementTransactionCondition10Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of PART, NPAR, PARC, PARQ
type SettlementTransactionCondition5Code string

// May be one of SAGE, CUST, SPRI, RISP
type SettlingCapacity2Code string

type SettlingCapacity8Choice struct {
	Cd    SettlingCapacity2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of SHOR, LONG
type ShortLong1Code string

type Statement71 struct {
	RptNb      Number3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 RptNb,omitempty"`
	QryRef     RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 QryRef,omitempty"`
	StmtId     RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 StmtId,omitempty"`
	StmtPrd    Period5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 StmtPrd"`
	Frqcy      Frequency26Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Frqcy,omitempty"`
	UpdTp      UpdateType16Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 UpdTp,omitempty"`
	StmtBsis   StatementBasis12Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 StmtBsis"`
	ActvtyInd  bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ActvtyInd"`
	SubAcctInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SubAcctInd"`
}

type StatementBasis12Choice struct {
	Cd    StatementBasis2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of SETT, TRAD
type StatementBasis2Code string

// May be one of COMP, DELT
type StatementUpdateType1Code string

type SubAccountIdentification52 struct {
	AcctOwnr      PartyIdentification119         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AcctOwnr,omitempty"`
	SfkpgAcct     SecuritiesAccount34            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgAcct"`
	ActvtyInd     bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ActvtyInd"`
	FinInstrmDtls []FinancialInstrumentDetails31 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FinInstrmDtls,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxCapacityParty5Choice struct {
	Cd    TaxLiability1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

// May be one of PRIN, AGEN
type TaxLiability1Code string

type TradeDate9Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Dt"`
	DtCd TradeDateCode4Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 DtCd"`
}

type TradeDateCode4Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type Transaction65 struct {
	AcctOwnrTxId                RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AcctOwnrTxId"`
	AcctSvcrTxId                RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId           RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 MktInfrstrctrTxId,omitempty"`
	PrcrTxId                    RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PrcrTxId,omitempty"`
	TradId                      []RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TradId,omitempty"`
	PoolId                      RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PoolId,omitempty"`
	CmonId                      RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CmonId,omitempty"`
	CorpActnEvtId               RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 CorpActnEvtId,omitempty"`
	TrptyAgtSvcPrvdrCollTxId    RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TrptyAgtSvcPrvdrCollTxId,omitempty"`
	ClntTrptyCollTxId           RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId             RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ClntCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
	TxDtls                      TransactionDetails112     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TxDtls,omitempty"`
	SplmtryData                 []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SplmtryData,omitempty"`
}

// May be one of BOLE, CLAI, COLL, CORP, SETT
type TransactionActivity1Code string

type TransactionActivity4Choice struct {
	Cd    TransactionActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type TransactionDetails112 struct {
	TxActvty               TransactionActivity4Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TxActvty"`
	SttlmTxOrCorpActnEvtTp SettlementOrCorporateActionEvent25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlmTxOrCorpActnEvtTp,omitempty"`
	SctiesMvmntTp          ReceiveDelivery1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SctiesMvmntTp"`
	Pmt                    DeliveryReceiptType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Pmt"`
	SttlmParams            SettlementDetails162                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlmParams,omitempty"`
	PlcOfTrad              PlaceOfTradeIdentification2              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PlcOfTrad,omitempty"`
	SfkpgPlc               SafeKeepingPlace2                        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SfkpgPlc,omitempty"`
	PlcOfClr               PlaceOfClearingIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PlcOfClr,omitempty"`
	PstngQty               Quantity10Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PstngQty"`
	NbOfDaysAcrd           float64                                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 NbOfDaysAcrd,omitempty"`
	PstngAmt               AmountAndDirection18                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 PstngAmt,omitempty"`
	AcrdIntrstAmt          AmountAndDirection59                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AcrdIntrstAmt,omitempty"`
	TradDt                 TradeDate9Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TradDt,omitempty"`
	FctvSttlmDt            DateAndDateTime2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 FctvSttlmDt"`
	SttlmDt                SettlementDate20Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 SttlmDt,omitempty"`
	ValDt                  DateAndDateTime2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ValDt,omitempty"`
	AckdStsTmStmp          ISODateTime                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 AckdStsTmStmp,omitempty"`
	MtchdStsTmStmp         ISODateTime                              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 MtchdStsTmStmp,omitempty"`
	DlvrgSttlmPties        SettlementParties49                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties         SettlementParties49                      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 RcvgSttlmPties,omitempty"`
	RvslInd                bool                                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 RvslInd,omitempty"`
	TxAddtlDtls            RestrictedFINXMax350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 TxAddtlDtls,omitempty"`
}

// May be one of MRKT, INDC
type TypeOfPrice16Code string

type TypeOfPrice45Choice struct {
	Cd    TypeOfPrice16Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type UpdateType16Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Cd"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Prtry"`
}

type YieldedOrValueType1Choice struct {
	Yldd  bool                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 Yldd"`
	ValTp PriceValueType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.017.002.08 ValTp"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
