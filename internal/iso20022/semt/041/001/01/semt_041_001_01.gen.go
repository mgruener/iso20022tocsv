// Code generated by main. DO NOT EDIT.

package semt_041_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountSubLevel1 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl2     []AccountSubLevel2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl2,omitempty"`
	AcctSubLvl2Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl2Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel2 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl3     []AccountSubLevel3         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl3,omitempty"`
	AcctSubLvl3Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl3Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel3 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl4     []AccountSubLevel4         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl4,omitempty"`
	AcctSubLvl4Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl4Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel4 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl5     []AccountSubLevel5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl5,omitempty"`
	AcctSubLvl5Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl5Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel5 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl6     []AccountSubLevel6         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl6,omitempty"`
	AcctSubLvl6Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl6Diff,omitempty"`
	AgtCd           []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AgtCd,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel6 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl7     []AccountSubLevel7         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl7,omitempty"`
	AcctSubLvl7Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl7Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel7 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl8     []AccountSubLevel8         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl8,omitempty"`
	AcctSubLvl8Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl8Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel8 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	AcctSubLvl9     []AccountSubLevel9         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl9,omitempty"`
	AcctSubLvl9Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl9Diff,omitempty"`
	Agt             []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData     []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AccountSubLevel9 struct {
	AcctId      SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr    PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr    PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr   []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct  []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	Agt         []Intermediary29           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	SplmtryData []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AggregateHoldingBalance1 struct {
	FinInstrmId     SecurityIdentification19               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FinInstrmId"`
	HldgForm        FormOfSecurity1Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 HldgForm,omitempty"`
	HldgPhysTp      PhysicalTransferType1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 HldgPhysTp,omitempty"`
	BalForFinInstrm []FinancialInstrumentAggregateBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForFinInstrm"`
	SplmtryData     []SupplementaryData1                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AggregateHoldingBalance2 struct {
	FinInstrmId     SecurityIdentification19               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FinInstrmId"`
	BalForFinInstrm []FinancialInstrumentAggregateBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForFinInstrm"`
	SplmtryData     []SupplementaryData1                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

type AlternateIdentification4 struct {
	Id       Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Tp       OtherIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Tp"`
	Issr     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Issr,omitempty"`
	IsseDt   ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 IsseDt,omitempty"`
	XpryDt   ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 XpryDt,omitempty"`
	IssrCtry CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 IssrCtry,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BeneficialOwner2 struct {
	BnfclOwnrId PartyIdentification100              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnrId"`
	AddtlId     AlternateIdentification4            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AddtlId,omitempty"`
	Ntlty       CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Ntlty,omitempty"`
	DmclCtry    CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 DmclCtry,omitempty"`
	NonDmclCtry CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 NonDmclCtry,omitempty"`
	CertfctnInd bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 CertfctnInd,omitempty"`
	CertfctnTp  BeneficiaryCertificationType9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 CertfctnTp,omitempty"`
	DclrtnDtls  Max350Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 DclrtnDtls,omitempty"`
}

// May be one of ACCI, DOMI, NDOM, FULL, NCOM, QIBB, TRBD, PAPW, PABD, FRAC
type BeneficiaryCertificationType4Code string

type BeneficiaryCertificationType9Choice struct {
	Cd    BeneficiaryCertificationType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification30           `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 DtTm"`
}

type DatePeriod1Choice struct {
	Dt       ISODate      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Dt"`
	DtMnth   ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 DtMnth"`
	FrDtToDt Period2      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FrDtToDt"`
}

type Document struct {
	SctiesBalTrnsprncyRpt SecuritiesBalanceTransparencyReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SctiesBalTrnsprncyRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK, SEMI, QUTR, TOMN, TOWK, TWMN, OVNG, ONDE
type EventFrequency7Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{5}
type Exact5NumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentAggregateBalance1 struct {
	ItmDt ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 ItmDt"`
	Hldgs FinancialInstrumentAggregateBalance1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Hldgs"`
	Pric  []Price6                                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Pric,omitempty"`
}

type FinancialInstrumentAggregateBalance1Choice struct {
	HldgsInd bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 HldgsInd"`
	HldgBal  FinancialInstrumentAggregateBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 HldgBal"`
}

type FinancialInstrumentAggregateBalance2 struct {
	SttldBal  FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SttldBal,omitempty"`
	TraddBal  FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 TraddBal,omitempty"`
	BalBrkdwn []SubBalanceBreakdown1             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalBrkdwn,omitempty"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AmtsdVal"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type Frequency22Choice struct {
	Cd    EventFrequency7Code     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

// May be one of EMON, EWEK, ESEM, EQRT, EFRT, EDAY, ENDY
type FrequencyGranularityType1Code string

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SchmeNm,omitempty"`
}

type GenericIdentification56 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SchmeNm,omitempty"`
	Bal     float64                `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Bal"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type Intermediary28 struct {
	Id   PartyIdentification100 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Role Role5Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Role"`
}

type Intermediary29 struct {
	Id               PartyIdentification100          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Role             Role5Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Role"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 OrdrOrgtrElgblty,omitempty"`
	SplmtryData      []SupplementaryData1            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Adr,omitempty"`
}

type Number3Choice struct {
	Shrt Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Shrt"`
	Lng  Exact5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Lng"`
}

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Tp"`
}

type OtherIdentification4Choice struct {
	Cd    PersonIdentificationType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification36       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 LastPgInd"`
}

type PartyIdentification100 struct {
	Id  PartyIdentification71Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 LEI,omitempty"`
}

type PartyIdentification71Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 NmAndAdr"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 ToDt"`
}

// May be one of AREG, CPFA, DRLC, EMID, IDCD, NRIN, OTHR, PASS, POCD, SOCS, SRSA, GUNL, ATIN, GTIN, ITIN
type PersonIdentificationType6Code string

// May be one of DEMT, PHYS
type PhysicalTransferType1Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Ctry"`
}

type Price6 struct {
	RateOrAmt PriceRateOrAmountChoice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 RateOrAmt"`
	Tp        TypeOfPrice13Code       `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Tp"`
	Src       PriceSource2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Src"`
}

type PriceRateOrAmountChoice struct {
	Rate float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Rate"`
	Amt  ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Amt"`
}

// May be one of FUND, THEO, VEND, EXCH
type PriceSource2Code string

type Role5Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type SafekeepingAccount5 struct {
	AcctId          SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctId"`
	AcctOwnr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctOwnr"`
	AcctSvcr        PartyIdentification100     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSvcr"`
	BnfclOwnr       []BeneficialOwner2         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BnfclOwnr,omitempty"`
	BalForAcct      []AggregateHoldingBalance1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 BalForAcct,omitempty"`
	Agt             Intermediary28             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Agt,omitempty"`
	AcctSubLvl1     []AccountSubLevel1         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl1,omitempty"`
	AcctSubLvl1Diff []AggregateHoldingBalance2 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 AcctSubLvl1Diff,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Nm,omitempty"`
}

type SecuritiesBalanceTransparencyReportV01 struct {
	MsgId             MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 MsgId"`
	SndrId            PartyIdentification100 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SndrId"`
	RcvrId            PartyIdentification100 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 RcvrId,omitempty"`
	Pgntn             Pagination             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Pgntn"`
	StmtGnlDtls       Statement37            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StmtGnlDtls"`
	SfkpgAcctAndHldgs SafekeepingAccount5    `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SfkpgAcctAndHldgs"`
	SplmtryData       []SupplementaryData1   `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SplmtryData,omitempty"`
}

// May be one of AWAS, BTRA, BLOK, BLOV, BLCA, BLOT, BORR, OPNT, PNET, COLI, COLO, MARG, DRAW, TRAN, LOAN, REGO, BODE, BORE, PEDA, PECA, PEND, LODE, LORE, PENR, PLED, RSTR, OTHR, WDOC, GRP1, GRP2
type SecuritiesBalanceType14Code string

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Desc,omitempty"`
}

type Statement37 struct {
	StmtNb       Number3Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StmtNb,omitempty"`
	QryRef       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 QryRef,omitempty"`
	StmtId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StmtId"`
	StmtDtTm     DateAndDateTimeChoice         `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StmtDtTm"`
	StmtPrd      DatePeriod1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 StmtPrd"`
	Frqcy        Frequency22Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Frqcy,omitempty"`
	FrqcyGrnlrty FrequencyGranularityType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 FrqcyGrnlrty,omitempty"`
	UpdTp        UpdateType4Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 UpdTp,omitempty"`
	ActvtyInd    bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 ActvtyInd"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type SubBalanceBreakdown1 struct {
	SubBalTp SubBalanceType9Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 SubBalTp"`
	Qty      SubBalanceQuantity5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Qty"`
}

type SubBalanceQuantity5Choice struct {
	Qty   FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Qty"`
	Prtry GenericIdentification56            `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type SubBalanceType9Choice struct {
	Cd    SecuritiesBalanceType14Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, NAVS, SWIC, GAVL, DDVR, ACTU, EGAV
type TypeOfPrice13Code string

type UpdateType4Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Cd"`
	Prtry GenericIdentification30  `xml:"urn:iso:std:iso:20022:tech:xsd:semt.041.001.01 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
