// Code generated by main. DO NOT EDIT.

package tsmt_041_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of SBTW, RSTW, RSBS, ARDM, ARCS, ARES, WAIT, UPDT, SBDS, ARBA, ARRO, CINR
type Action2Code string

type BICIdentification1 struct {
	BIC BICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 BIC"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

// May be one of PROP, CLSD, PMTC, ESTD, ACTV, COMP, AMRQ, RARQ, CLRQ, SCRQ, SERQ, DARQ
type BaselineStatus3Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type Document struct {
	TxRpt TransactionReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 TxRpt"`
}

type DocumentIdentification3 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Id"`
	Vrsn float64   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Vrsn"`
}

type DocumentIdentification5 struct {
	Id     Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Id"`
	IdIssr BICIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 IdIssr"`
}

type DocumentIdentification7 struct {
	Id       Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Id"`
	DtOfIsse ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 DtOfIsse"`
}

type GenericIdentification4 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Id"`
	IdTp Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 IdTp"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 CreDtTm"`
}

type PartyIdentification26 struct {
	Nm      Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Nm"`
	PrtryId GenericIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 PrtryId,omitempty"`
	PstlAdr PostalAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 PstlAdr"`
}

type PendingActivity2 struct {
	Tp   Action2Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Tp"`
	Desc Max140Text  `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Desc,omitempty"`
}

type PostalAddress5 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 PstCdId,omitempty"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Ctry"`
}

type TransactionReportItems3 struct {
	TxId              Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 TxId"`
	EstblishdBaselnId DocumentIdentification3   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 EstblishdBaselnId,omitempty"`
	TxSts             TransactionStatus4        `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 TxSts"`
	UsrTxRef          []DocumentIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 UsrTxRef,omitempty"`
	PurchsOrdrRef     DocumentIdentification7   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 PurchsOrdrRef"`
	Buyr              PartyIdentification26     `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Buyr"`
	Sellr             PartyIdentification26     `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Sellr"`
	BuyrBk            BICIdentification1        `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 BuyrBk"`
	BuyrBkCtry        CountryCode               `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 BuyrBkCtry"`
	SellrBk           BICIdentification1        `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 SellrBk"`
	SellrBkCtry       CountryCode               `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 SellrBkCtry"`
	OblgrBk           []BICIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 OblgrBk,omitempty"`
	SubmitgBk         []BICIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 SubmitgBk,omitempty"`
	OutsdngAmt        CurrencyAndAmount         `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 OutsdngAmt"`
	TtlNetAmt         CurrencyAndAmount         `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 TtlNetAmt"`
	PdgReqForActn     []PendingActivity2        `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 PdgReqForActn,omitempty"`
}

type TransactionReportV03 struct {
	RptId      MessageIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 RptId"`
	RltdMsgRef MessageIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 RltdMsgRef"`
	RptdItms   []TransactionReportItems3 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 RptdItms,omitempty"`
}

type TransactionStatus4 struct {
	Sts BaselineStatus3Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03 Sts"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
