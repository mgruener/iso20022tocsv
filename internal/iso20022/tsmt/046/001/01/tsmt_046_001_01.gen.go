// Code generated by main. DO NOT EDIT.

package tsmt_046_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of PROP, CLSD, PMTC, ESTD, ACTV, COMP, AMRQ, RARQ, CLRQ, SCRQ, SERQ, DARQ
type BaselineStatus3Code string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type Document struct {
	InttToPayRpt IntentToPayReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 InttToPayRpt"`
}

type DocumentIdentification7 struct {
	Id       Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 Id"`
	DtOfIsse ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 DtOfIsse"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IntentToPayReportV01 struct {
	RptId    MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 RptId"`
	RptdItms []ReportLine1          `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 RptdItms,omitempty"`
}

// Must be at least 1 items long
type Max35Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 CreDtTm"`
}

type ReportLine1 struct {
	TxId                Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 TxId"`
	TxSts               TransactionStatus4      `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 TxSts"`
	PurchsOrdrRef       DocumentIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 PurchsOrdrRef"`
	PurchsOrdrTtlNetAmt CurrencyAndAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 PurchsOrdrTtlNetAmt"`
	AcmltdNetAmt        CurrencyAndAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 AcmltdNetAmt"`
}

type TransactionStatus4 struct {
	Sts BaselineStatus3Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01 Sts"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
