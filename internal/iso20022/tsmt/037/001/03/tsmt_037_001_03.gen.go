// Code generated by main. DO NOT EDIT.

package tsmt_037_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type BICIdentification1 struct {
	BIC BICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 BIC"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

// May be one of PROP, CLSD, PMTC, ESTD, ACTV, COMP, AMRQ, RARQ, CLRQ, SCRQ, SERQ, DARQ
type BaselineStatus3Code string

type Document struct {
	StsRpt StatusReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 StsRpt"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max35Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 CreDtTm"`
}

type StatusReportItems2 struct {
	TxId     Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 TxId"`
	RptdNtty []BICIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 RptdNtty"`
	Sts      BaselineStatus3Code  `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 Sts"`
	SubSts   Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 SubSts,omitempty"`
}

type StatusReportV03 struct {
	RptId      MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 RptId"`
	RltdMsgRef MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 RltdMsgRef"`
	RptdItms   []StatusReportItems2   `xml:"urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03 RptdItms,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
