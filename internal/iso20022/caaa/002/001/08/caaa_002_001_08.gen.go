// Code generated by main. DO NOT EDIT.

package caaa_002_001_08

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorAuthorisationResponse8 struct {
	Envt        CardPaymentEnvironment69 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Envt"`
	Tx          CardPaymentTransaction88 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tx"`
	TxRspn      CardPaymentTransaction84 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxRspn"`
	SplmtryData []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SplmtryData,omitempty"`
}

type AcceptorAuthorisationResponseV08 struct {
	Hdr         Header35                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Hdr"`
	AuthstnRspn AcceptorAuthorisationResponse8 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthstnRspn"`
	SctyTrlr    ContentInformationType16       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SctyTrlr,omitempty"`
}

type Action8 struct {
	ActnTp    ActionType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ActnTp"`
	MsgToPres ActionMessage2  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgToPres,omitempty"`
}

type ActionMessage2 struct {
	MsgDstn      UserInterface4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgDstn"`
	Frmt         OutputFormat1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Frmt,omitempty"`
	MsgCntt      Max20000Text       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgCntt"`
	MsgCnttSgntr Max140Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgCnttSgntr,omitempty"`
}

type ActionMessage5 struct {
	Frmt    OutputFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Frmt,omitempty"`
	MsgCntt Max20000Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgCntt"`
}

// May be one of BUSY, CPTR, DISP, NOVR, RQID, PINL, PINR, PRNT, RFRL, RQDT, DCCQ, FLFW
type ActionType7Code string

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AggregationTransaction2 struct {
	FrstPmtDtTm ISODateTime        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 FrstPmtDtTm,omitempty"`
	LastPmtDtTm ISODateTime        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 LastPmtDtTm,omitempty"`
	NbOfPmts    float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NbOfPmts,omitempty"`
	IndvPmt     []DetailedAmount14 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 IndvPmt,omitempty"`
}

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of HS25, HS38, HS51, HS01, SH31, SH32, SH33, SH35, SHK1, SHK2
type Algorithm16Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5, CMA2, CM31, CM32, CM33, MCS3, CCA1, CCA2, CCA3
type Algorithm17Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1, EA9C, EA5C, DA12, DA19, DA25, N108, EA5R, EA9R, EA2R, E3DR, E36C, E36R, SD5C
type Algorithm18Code string

// May be one of ERS2, ERS1, RPSS, ECC5, ECC1, ECC4, ECC2, ECC3, ERS3, ECP2, ECP3, ECP5
type Algorithm19Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification18 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter9     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification19 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter10    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification20 struct {
	Algo  Algorithm19Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter11     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification21 struct {
	Algo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
}

type AlgorithmIdentification22 struct {
	Algo  Algorithm17Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification23 struct {
	Algo  Algorithm18Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter12     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AlgorithmIdentification24 struct {
	Algo  Algorithm18Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Algo"`
	Param Parameter12     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Param,omitempty"`
}

type AmountAndDirection93 struct {
	Amt float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Amt"`
	Ccy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ccy"`
	Sgn bool               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Sgn,omitempty"`
}

// May be one of ATTL, CARR, CUST, FULL, SELF
type AttendanceContext2Code string

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData5 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	Rcpt        []Recipient6Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rcpt"`
	MACAlgo     AlgorithmIdentification22 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MAC"`
}

// May be one of ICCD, AGNT, MERC, ACQR, ISSR, TRML
type AuthenticationEntity2Code string

// May be one of NPIN, PPSG, PSWD, SCRT, SCNL, SNCT, CPSG, ADDB, BIOM, CDHI, CRYP, CSCV, PSVE, CSEC, ADDS, MANU, FPIN, TOKP
type AuthenticationMethod6Code string

type AuthorisationResult10 struct {
	AuthstnNtty   GenericIdentification90 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthstnNtty,omitempty"`
	RspnToAuthstn ResponseType5           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RspnToAuthstn"`
	AuthstnCd     Min6Max8Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthstnCd,omitempty"`
	CmpltnReqrd   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CmpltnReqrd,omitempty"`
	TMSTrggr      TMSTrigger1             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TMSTrggr,omitempty"`
}

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

// May be one of CTDP, CHCK, CRDT, CURR, CDBT, DFLT, EPRS, HEQL, ISTL, INVS, LCDT, MBNW, MNMK, MNMC, MTGL, RTRM, RVLV, SVNG, STBD, UVRL, PRPD, FLTC
type CardAccountType3Code string

// May be one of TAGC, PHYS, BRCD, MGST, CICC, DFLE, CTLS, ECTL, CDFL
type CardDataReading5Code string

type CardPaymentEnvironment69 struct {
	AcqrrId  GenericIdentification53 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AcqrrId,omitempty"`
	MrchntId GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MrchntId,omitempty"`
	POIId    GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 POIId,omitempty"`
	Card     PaymentCard28           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Card,omitempty"`
	PmtTkn   CardPaymentToken4       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PmtTkn,omitempty"`
}

type CardPaymentToken4 struct {
	Tkn           Min8Max28NumericText     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tkn,omitempty"`
	CardSeqNb     Min2Max3NumericText      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardSeqNb,omitempty"`
	TknXpryDt     Max10Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TknXpryDt,omitempty"`
	TknChrtc      []Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TknChrtc,omitempty"`
	TknRqstr      PaymentTokenIdentifiers1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TknRqstr,omitempty"`
	TknAssrncLvl  float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TknAssrncLvl,omitempty"`
	TknAssrncData Max500Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TknAssrncData,omitempty"`
}

type CardPaymentTransaction84 struct {
	AuthstnRslt     AuthorisationResult10            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthstnRslt"`
	TxVrfctnRslt    []TransactionVerificationResult4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxVrfctnRslt,omitempty"`
	AllwdPdctCd     []Product4                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AllwdPdctCd,omitempty"`
	NotAllwdPdctCd  []Product4                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NotAllwdPdctCd,omitempty"`
	AddtlAvlblPdct  []Product5                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlAvlblPdct,omitempty"`
	Bal             AmountAndDirection93             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Bal,omitempty"`
	PrtctdBal       ContentInformationType17         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtctdBal,omitempty"`
	Actn            []Action8                        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Actn,omitempty"`
	CcyConvsElgblty CurrencyConversion14             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CcyConvsElgblty,omitempty"`
}

type CardPaymentTransaction88 struct {
	SaleRefId     Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SaleRefId,omitempty"`
	TxId          TransactionIdentifier1          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxId"`
	InitrTxId     Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InitrTxId,omitempty"`
	RcptTxId      Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RcptTxId,omitempty"`
	RcncltnId     Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RcncltnId,omitempty"`
	IntrchngData  Max140Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 IntrchngData,omitempty"`
	TxDtls        CardPaymentTransactionDetails47 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxDtls"`
	MrchntRefData Max70Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MrchntRefData,omitempty"`
}

type CardPaymentTransactionDetails47 struct {
	Ccy            ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ccy,omitempty"`
	TtlAmt         float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TtlAmt"`
	CmltvAmt       float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CmltvAmt,omitempty"`
	AmtQlfr        TypeOfAmount8Code       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AmtQlfr,omitempty"`
	DtldAmt        DetailedAmount15        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DtldAmt,omitempty"`
	ReqdAmt        float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ReqdAmt,omitempty"`
	AuthrsdAmt     float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthrsdAmt,omitempty"`
	InvcAmt        float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InvcAmt,omitempty"`
	VldtyDt        ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 VldtyDt,omitempty"`
	OnLineRsn      []OnLineReason1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 OnLineRsn,omitempty"`
	UattnddLvlCtgy Max35NumericText        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UattnddLvlCtgy,omitempty"`
	AcctTp         CardAccountType3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AcctTp,omitempty"`
	CcyConvsRslt   CurrencyConversion15    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CcyConvsRslt,omitempty"`
	Instlmt        RecurringTransaction2   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Instlmt,omitempty"`
	AggtnTx        AggregationTransaction2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AggtnTx,omitempty"`
	PdctCdSetId    Max10Text               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctCdSetId,omitempty"`
	SaleItm        []Product6              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SaleItm,omitempty"`
	DlvryLctn      Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DlvryLctn,omitempty"`
	AddtlInf       []IndustryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlInf,omitempty"`
	ICCRltdData    Max10000Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ICCRltdData,omitempty"`
}

// May be one of COMM, CONS
type CardProductType1Code string

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RltvDstngshdNm"`
}

type Commission18 struct {
	Rate     float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rate"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlInf,omitempty"`
}

type Commission19 struct {
	Amt      float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Amt"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlInf,omitempty"`
}

type ContentInformationType16 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttTp"`
	AuthntcdData AuthenticatedData5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthntcdData"`
}

type ContentInformationType17 struct {
	CnttTp     ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttTp"`
	EnvlpdData EnvelopedData5   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 EnvlpdData"`
}

type ContentInformationType19 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttTp"`
	EnvlpdData   EnvelopedData5     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 EnvlpdData,omitempty"`
	AuthntcdData AuthenticatedData5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AuthntcdData,omitempty"`
	SgndData     SignedData5        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SgndData,omitempty"`
	DgstdData    DigestedData5      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstdData,omitempty"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type CurrencyConversion14 struct {
	CcyConvsId    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CcyConvsId,omitempty"`
	TrgtCcy       CurrencyDetails3       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TrgtCcy"`
	RsltgAmt      float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RsltgAmt"`
	XchgRate      float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 XchgRate"`
	NvrtdXchgRate float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NvrtdXchgRate,omitempty"`
	QtnDt         ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 QtnDt,omitempty"`
	VldUntil      ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 VldUntil,omitempty"`
	SrcCcy        CurrencyDetails2       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SrcCcy"`
	OrgnlAmt      OriginalAmountDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 OrgnlAmt"`
	ComssnDtls    []Commission19         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ComssnDtls,omitempty"`
	MrkUpDtls     []Commission18         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MrkUpDtls,omitempty"`
	DclrtnDtls    ActionMessage5         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DclrtnDtls,omitempty"`
}

type CurrencyConversion15 struct {
	AccptdByCrdhldr bool                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AccptdByCrdhldr,omitempty"`
	Convs           CurrencyConversion14 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Convs,omitempty"`
}

type CurrencyDetails2 struct {
	AlphaCd ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AlphaCd,omitempty"`
	NmrcCd  Exact3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NmrcCd,omitempty"`
	Dcml    float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Dcml,omitempty"`
	Nm      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Nm,omitempty"`
}

type CurrencyDetails3 struct {
	AlphaCd ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AlphaCd"`
	NmrcCd  Exact3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NmrcCd"`
	Dcml    float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Dcml"`
	Nm      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Nm,omitempty"`
}

type DetailedAmount14 struct {
	Amt            float64              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Amt"`
	DtTm           ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DtTm"`
	CardDataNtryMd CardDataReading5Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardDataNtryMd,omitempty"`
	ICCRltdData    Max10000Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ICCRltdData,omitempty"`
	Labl           Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Labl,omitempty"`
}

type DetailedAmount15 struct {
	AmtGoodsAndSvcs float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AmtGoodsAndSvcs,omitempty"`
	CshBck          float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CshBck,omitempty"`
	Grtty           float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Grtty,omitempty"`
	Fees            []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Fees,omitempty"`
	Rbt             []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rbt,omitempty"`
	ValAddedTax     []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ValAddedTax,omitempty"`
	Srchrg          []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Srchrg,omitempty"`
}

type DetailedAmount4 struct {
	Amt  float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Amt"`
	Labl Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Labl,omitempty"`
}

type DigestedData5 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	DgstAlgo    AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcpsltdCntt"`
	Dgst        Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Dgst"`
}

type Document struct {
	AccptrAuthstnRspn AcceptorAuthorisationResponseV08 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AccptrAuthstnRspn"`
}

type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Cntt,omitempty"`
}

type EncryptedContent4 struct {
	CnttTp         ContentType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification24 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CnttNcrptnAlgo,omitempty"`
	NcrptdData     Max100KBinary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptdData"`
}

// May be one of TR31, TR34, I238
type EncryptionFormat2Code string

type EnvelopedData5 struct {
	Vrsn       float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	OrgtrInf   OriginatorInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 OrgtrInf,omitempty"`
	Rcpt       []Recipient6Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rcpt"`
	NcrptdCntt EncryptedContent4      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptdCntt,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{3}
type Exact3AlphaNumericText string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// May be one of YEAR, MNTH, QURT, MIAN, WEEK, DAIL, TEND
type Frequency3Code string

type GenericIdentification32 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp,omitempty"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ShrtNm,omitempty"`
}

type GenericIdentification53 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id"`
	Tp     PartyType3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp,omitempty"`
	Issr   PartyType4Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ShrtNm,omitempty"`
}

type GenericIdentification76 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id"`
	Tp     PartyType3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp"`
	Issr   PartyType4Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ShrtNm,omitempty"`
}

type GenericIdentification90 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id,omitempty"`
	Tp     PartyType14Code   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp"`
	Issr   PartyType4Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ShrtNm,omitempty"`
}

type GenericIdentification94 struct {
	Id       Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id"`
	Tp       PartyType3Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp,omitempty"`
	Issr     PartyType4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr,omitempty"`
	Ctry     Min2Max3AlphaText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Ctry,omitempty"`
	ShrtNm   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ShrtNm,omitempty"`
	RmotAccs NetworkParameters5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RmotAccs,omitempty"`
}

type GenericInformation1 struct {
	Nm  Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Nm"`
	Val Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Val,omitempty"`
}

type Header35 struct {
	MsgFctn    MessageFunction14Code   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MsgFctn"`
	PrtcolVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtcolVrsn"`
	XchgId     float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 XchgId"`
	CreDtTm    ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CreDtTm"`
	InitgPty   GenericIdentification53 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InitgPty"`
	RcptPty    GenericIdentification94 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RcptPty,omitempty"`
	Tracblt    []Traceability5         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tracblt,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IndustryData1 struct {
	Id        Max1025Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Id"`
	Val       Max100KBinary            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Val,omitempty"`
	PrtctdVal ContentInformationType19 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtctdVal,omitempty"`
	Tp        Max1025Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Tp,omitempty"`
}

// May be one of EQPM, NQPM, DFRI
type InstalmentPlan1Code string

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SrlNb"`
}

type KEK5 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification23 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptdKey"`
}

type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DerivtnId,omitempty"`
}

type KeyTransport5 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	RcptId        Recipient5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptdKey"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max1025Text string

// Must be at least 1 items long
type Max104Text string

type Max10KBinary []byte

func (t *Max10KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max10Text string

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must match the pattern [0-9]{1,15}
type Max15NumericText string

// Must be at least 1 items long
type Max20000Text string

// Must be at least 1 items long
type Max256Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max350Text string

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must match the pattern [0-9]{1,35}
type Max35NumericText string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max37Text string

// Must be at least 1 items long
type Max3Text string

// Must be at least 1 items long
type Max45Text string

type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// Must be at least 1 items long
type Max76Text string

// May be one of AUTQ, AUTP, CCAV, CCAK, CCAQ, CCAP, CMPV, CMPK, DCAV, DCRR, DCCQ, DCCP, DGNP, DGNQ, FAUQ, FAUP, FCMV, FCMK, FRVA, FRVR, RCLQ, RCLP, RVRA, RVRR, CDDQ, CDDK, CDDR, CDDP
type MessageFunction14Code string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 6 items long
type Min6Max8Text string

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

type NetworkParameters4 struct {
	NtwkTp NetworkType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NtwkTp"`
	AdrVal Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AdrVal"`
}

type NetworkParameters5 struct {
	Adr        []NetworkParameters4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Adr"`
	UsrNm      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UsrNm,omitempty"`
	AccsCd     Max35Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AccsCd,omitempty"`
	SvrCert    []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SvrCert,omitempty"`
	SvrCertIdr []Max140Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SvrCertIdr,omitempty"`
	ClntCert   []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ClntCert,omitempty"`
	SctyPrfl   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SctyPrfl,omitempty"`
}

// May be one of IPNW, PSTN
type NetworkType1Code string

// May be one of RNDM, ICCF, MERF, TRMF, ISSF, FRLT, EXFL, TAMT, CBIN, UBIN, CPAN, FLOW, CRCY
type OnLineReason1Code string

type OriginalAmountDetails1 struct {
	ActlAmt float64 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ActlAmt,omitempty"`
	MinAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MinAmt,omitempty"`
	MaxAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MaxAmt,omitempty"`
}

type OriginatorInformation1 struct {
	Cert []Max5000Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Cert,omitempty"`
}

// May be one of MREF, TEXT, HTML
type OutputFormat1Code string

type Parameter10 struct {
	NcrptnFrmt   EncryptionFormat2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MskGnrtrAlgo,omitempty"`
}

type Parameter11 struct {
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MskGnrtrAlgo"`
	SaltLngth    float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SaltLngth"`
	TrlrFld      float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TrlrFld,omitempty"`
}

type Parameter12 struct {
	NcrptnFrmt   EncryptionFormat2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 BPddg,omitempty"`
}

type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo,omitempty"`
}

type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 BPddg,omitempty"`
}

type Parameter9 struct {
	DgstAlgo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo,omitempty"`
}

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS, ICCA
type PartyType14Code string

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS
type PartyType3Code string

// May be one of MERC, ACCP, ITAG, ACQR, CISS, TAXH
type PartyType4Code string

type PaymentCard28 struct {
	PrtctdCardData ContentInformationType17 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtctdCardData,omitempty"`
	PrvtCardData   Max100KBinary            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrvtCardData,omitempty"`
	PlainCardData  PlainCardData15          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PlainCardData,omitempty"`
	PmtAcctRef     Max70Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PmtAcctRef,omitempty"`
	MskdPAN        string                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 MskdPAN,omitempty"`
	IssrBIN        Max15NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 IssrBIN,omitempty"`
	CardCtryCd     Max3Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardCtryCd,omitempty"`
	CardCcyCd      Exact3AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardCcyCd,omitempty"`
	CardPdctPrfl   Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardPdctPrfl,omitempty"`
	CardBrnd       Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardBrnd,omitempty"`
	CardPdctTp     CardProductType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardPdctTp,omitempty"`
	CardPdctSubTp  Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardPdctSubTp,omitempty"`
	IntrnlCard     bool                     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 IntrnlCard,omitempty"`
	AllwdPdct      []Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AllwdPdct,omitempty"`
	SvcOptn        Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SvcOptn,omitempty"`
	AddtlCardData  Max70Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlCardData,omitempty"`
}

type PaymentTokenIdentifiers1 struct {
	PrvdrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrvdrId"`
	RqstrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RqstrId"`
}

type PlainCardData15 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PAN"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CardSeqNb,omitempty"`
	FctvDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 FctvDt,omitempty"`
	XpryDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 XpryDt"`
	SvcCd     Exact3NumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SvcCd,omitempty"`
	Trck1     Max76Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Trck1,omitempty"`
	Trck2     Max37Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Trck2,omitempty"`
	Trck3     Max104Text           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Trck3,omitempty"`
	CrdhldrNm Max45Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 CrdhldrNm,omitempty"`
}

type Product4 struct {
	PdctCd      Max70Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctCd"`
	AddtlPdctCd Max70Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlPdctCd,omitempty"`
}

type Product5 struct {
	PdctCd      Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctCd"`
	AddtlPdctCd Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlPdctCd,omitempty"`
	AmtLmt      float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AmtLmt,omitempty"`
	QtyLmt      float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 QtyLmt,omitempty"`
	UnitOfMeasr UnitOfMeasure6Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UnitOfMeasr,omitempty"`
}

type Product6 struct {
	ItmId         Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ItmId,omitempty"`
	PdctCd        Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctCd"`
	AddtlPdctCd   Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlPdctCd,omitempty"`
	UnitOfMeasr   UnitOfMeasure6Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UnitOfMeasr,omitempty"`
	PdctQty       float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctQty,omitempty"`
	UnitPric      float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UnitPric,omitempty"`
	UnitPricSgn   bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 UnitPricSgn,omitempty"`
	PdctAmt       float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctAmt"`
	PdctAmtSgn    bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctAmtSgn,omitempty"`
	ValAddedTax   float64                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 ValAddedTax,omitempty"`
	TaxTp         Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TaxTp,omitempty"`
	PdctDesc      Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PdctDesc,omitempty"`
	DlvryLctn     Max10Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DlvryLctn,omitempty"`
	DlvrySvc      AttendanceContext2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DlvrySvc,omitempty"`
	SaleChanl     Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SaleChanl,omitempty"`
	AddtlPdctDesc Max256Text             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlPdctDesc,omitempty"`
}

type Recipient5Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 IssrAndSrlNb"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyIdr"`
}

type Recipient6Choice struct {
	KeyTrnsprt KeyTransport5  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyTrnsprt"`
	KEK        KEK5           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KEK"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 KeyIdr"`
}

type RecurringTransaction2 struct {
	InstlmtPlan []InstalmentPlan1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InstlmtPlan,omitempty"`
	PlanId      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PlanId,omitempty"`
	SeqNb       float64               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SeqNb,omitempty"`
	PrdUnit     Frequency3Code        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrdUnit,omitempty"`
	InstlmtPrd  float64               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 InstlmtPrd,omitempty"`
	TtlNbOfPmts float64               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TtlNbOfPmts,omitempty"`
	FrstPmtDt   ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 FrstPmtDt,omitempty"`
	TtlAmt      CurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TtlAmt,omitempty"`
	FrstAmt     float64               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 FrstAmt,omitempty"`
	Chrgs       float64               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Chrgs,omitempty"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AttrVal"`
}

// May be one of APPR, DECL, PART
type Response4Code string

type ResponseType5 struct {
	Rspn         Response4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rspn"`
	RspnRsn      Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RspnRsn,omitempty"`
	AddtlRspnInf Max140Text    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlRspnInf,omitempty"`
}

type SignedData5 struct {
	Vrsn        float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo,omitempty"`
	NcpsltdCntt EncapsulatedContent3        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 NcpsltdCntt,omitempty"`
	Cert        []Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Cert,omitempty"`
	Sgnr        []Signer4                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Sgnr,omitempty"`
}

type Signer4 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Vrsn,omitempty"`
	SgnrId      Recipient5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SgnrId,omitempty"`
	DgstAlgo    AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 DgstAlgo"`
	SgndAttrbts []GenericInformation1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SgndAttrbts,omitempty"`
	SgntrAlgo   AlgorithmIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 SgntrAlgo"`
	Sgntr       Max3000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Sgntr"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of CRIT, ASAP, DTIM
type TMSContactLevel1Code string

type TMSTrigger1 struct {
	TMSCtctLvl  TMSContactLevel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TMSCtctLvl"`
	TMSId       Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TMSId,omitempty"`
	TMSCtctDtTm ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TMSCtctDtTm,omitempty"`
}

type Traceability5 struct {
	RlayId      GenericIdentification76 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 RlayId"`
	PrtcolNm    Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtcolNm,omitempty"`
	PrtcolVrsn  Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 PrtcolVrsn,omitempty"`
	TracDtTmIn  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TracDtTmIn"`
	TracDtTmOut ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TracDtTmOut"`
}

type TransactionIdentifier1 struct {
	TxDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxDtTm"`
	TxRef  Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 TxRef"`
}

type TransactionVerificationResult4 struct {
	Mtd        AuthenticationMethod6Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Mtd"`
	VrfctnNtty AuthenticationEntity2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 VrfctnNtty,omitempty"`
	Rslt       Verification1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 Rslt,omitempty"`
	AddtlRslt  Max500Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08 AddtlRslt,omitempty"`
}

// May be one of ACTL, ESTM, MAXI, DFLT, RPLT, INCR, DECR, RESD
type TypeOfAmount8Code string

// May be one of PIEC, TONS, FOOT, GBGA, USGA, GRAM, INCH, KILO, PUND, METR, CMET, MMET, LITR, CELI, MILI, GBOU, USOU, GBQA, USQA, GBPI, USPI, MILE, KMET, YARD, SQKI, HECT, ARES, SMET, SCMT, SMIL, SQMI, SQYA, SQFO, SQIN, ACRE, KWHO, DGEU, GGEU
type UnitOfMeasure6Code string

// May be one of CDSP, CRCP, MDSP, MRCP, CRDO
type UserInterface4Code string

// May be one of FAIL, MISS, NOVF, PART, SUCC, ERRR
type Verification1Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
