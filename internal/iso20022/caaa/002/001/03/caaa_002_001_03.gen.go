// Code generated by main. DO NOT EDIT.

package caaa_002_001_03

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorAuthorisationResponse3 struct {
	Envt   CardPaymentEnvironment21 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Envt"`
	Tx     CardPaymentTransaction23 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Tx"`
	TxRspn CardPaymentTransaction24 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxRspn"`
}

type AcceptorAuthorisationResponseV03 struct {
	Hdr         Header7                        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Hdr"`
	AuthstnRspn AcceptorAuthorisationResponse3 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AuthstnRspn"`
	SctyTrlr    ContentInformationType8        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SctyTrlr"`
}

type Action3 struct {
	ActnTp    ActionType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ActnTp"`
	MsgToPres ActionMessage1  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MsgToPres,omitempty"`
}

type ActionMessage1 struct {
	MsgDstn      UserInterface1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MsgDstn"`
	MsgCntt      Max256Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MsgCntt"`
	MsgCnttSgntr Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MsgCnttSgntr,omitempty"`
}

// May be one of BUSY, CPTR, DISP, NOVR, RQID, PINL, PINR, PRNT, RFRL, RQDT, DCCQ
type ActionType3Code string

// May be one of MACC, MCCS, CMA1
type Algorithm10Code string

// May be one of HS25, HS38, HS51
type Algorithm5Code string

// May be one of EA2C, E3DC
type Algorithm6Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1
type Algorithm9Code string

type AlgorithmIdentification10 struct {
	Algo  Algorithm10Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Algo"`
	Param Parameter1      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Param,omitempty"`
}

type AlgorithmIdentification6 struct {
	Algo  Algorithm6Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Param,omitempty"`
}

type AlgorithmIdentification7 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Algo"`
	Param Parameter2     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Param,omitempty"`
}

type AlgorithmIdentification8 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Algo"`
	Param Parameter3     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Param,omitempty"`
}

type AlgorithmIdentification9 struct {
	Algo  Algorithm9Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Param,omitempty"`
}

type AmountAndDirection41 struct {
	Amt CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Amt"`
	Sgn bool              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Sgn,omitempty"`
}

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData3 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Vrsn,omitempty"`
	Rcpt        []Recipient3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rcpt"`
	MACAlgo     AlgorithmIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MACAlgo"`
	NcpsltdCntt EncapsulatedContent2      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NcpsltdCntt"`
	MAC         Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MAC"`
}

type AuthorisationResult1 struct {
	AuthstnNtty   GenericIdentification33 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AuthstnNtty,omitempty"`
	RspnToAuthstn ResponseType1           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RspnToAuthstn"`
	AuthstnCd     Min6Max8Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AuthstnCd,omitempty"`
	CmpltnReqrd   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CmpltnReqrd,omitempty"`
	TMSTrggr      TMSTrigger1             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TMSTrggr,omitempty"`
}

// May be one of CMCH, CNMH, CNMT, CNMO, CMSS, CNUS
type CSCResult1Code string

// May be one of DFLT, SVNG, CHCK, CRDT, UVRL, INVS, EPRS
type CardAccountType1Code string

type CardPaymentEnvironment21 struct {
	AcqrrId        GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AcqrrId,omitempty"`
	MrchntId       GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MrchntId,omitempty"`
	POIId          GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 POIId"`
	PrtctdCardData ContentInformationType7 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 PrtctdCardData,omitempty"`
	PlainCardData  PlainCardData5          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 PlainCardData,omitempty"`
}

type CardPaymentTransaction23 struct {
	SaleRefId    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SaleRefId,omitempty"`
	TxId         TransactionIdentifier1          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxId"`
	RcptTxId     Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RcptTxId,omitempty"`
	RcncltnId    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RcncltnId,omitempty"`
	IntrchngData Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 IntrchngData,omitempty"`
	TxDtls       CardPaymentTransactionDetails13 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxDtls"`
}

type CardPaymentTransaction24 struct {
	AuthstnRslt  AuthorisationResult1           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AuthstnRslt"`
	TxVrfctnRslt TransactionVerificationResult2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxVrfctnRslt,omitempty"`
	Bal          AmountAndDirection41           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Bal,omitempty"`
	Actn         []Action3                      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Actn,omitempty"`
	CcyConvs     CurrencyConversion1            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CcyConvs,omitempty"`
}

type CardPaymentTransactionDetails13 struct {
	Ccy         CurrencyCode         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Ccy"`
	TtlAmt      float64              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TtlAmt"`
	DtldAmt     DetailedAmount5      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DtldAmt,omitempty"`
	VldtyDt     ISODate              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 VldtyDt,omitempty"`
	AcctTp      CardAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AcctTp,omitempty"`
	ICCRltdData Max10000Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ICCRltdData,omitempty"`
}

// May be one of AMCH, ANMH, ANMT, ANMO, AMSS, ANUS, PMCH, PNMH, PNMT, PNMO, PMSS, PNUS
type CardholderAddressVerificationResult1Code string

type CertificateIdentifier1 struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 IssrAndSrlNb"`
}

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RltvDstngshdNm"`
}

type Commission18 struct {
	Rate     float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rate"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AddtlInf,omitempty"`
}

type Commission19 struct {
	Amt      float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Amt"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AddtlInf,omitempty"`
}

type ContentInformationType7 struct {
	CnttTp     ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CnttTp"`
	EnvlpdData EnvelopedData3   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 EnvlpdData"`
}

type ContentInformationType8 struct {
	CnttTp       ContentType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CnttTp"`
	AuthntcdData []AuthenticatedData3 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AuthntcdData,omitempty"`
}

// May be one of DATA, SIGN, EVLP, DGST, ECRP, AUTH
type ContentType1Code string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type CurrencyConversion1 struct {
	CcyConvsId    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CcyConvsId,omitempty"`
	Rslt          CurrencyConversionResponse1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rslt"`
	RspnRsn       Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RspnRsn,omitempty"`
	TrgtCcy       CurrencyCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TrgtCcy"`
	TrgtCcyNmrc   Exact3NumericText               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TrgtCcyNmrc"`
	TrgtCcyDcml   float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TrgtCcyDcml"`
	TrgtCcyNm     Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TrgtCcyNm,omitempty"`
	RsltgAmt      float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RsltgAmt"`
	XchgRate      float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 XchgRate"`
	NvrtdXchgRate float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NvrtdXchgRate,omitempty"`
	QtnDt         ISODateTime                     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 QtnDt,omitempty"`
	VldUntil      ISODateTime                     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 VldUntil,omitempty"`
	SrcCcy        CurrencyCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SrcCcy"`
	SrcCcyNmrc    CurrencyCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SrcCcyNmrc,omitempty"`
	SrcCcyDcml    float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SrcCcyDcml"`
	SrcCcyNm      Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SrcCcyNm,omitempty"`
	OrgnlAmt      float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 OrgnlAmt"`
	ComssnDtls    []Commission19                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ComssnDtls,omitempty"`
	MrkUpDtls     []Commission18                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MrkUpDtls,omitempty"`
	DclrtnDtls    Max2048Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DclrtnDtls,omitempty"`
}

// May be one of ODCC, DCCA, ICRD, IMER, IPRD, IRAT, NDCC
type CurrencyConversionResponse1Code string

type DetailedAmount4 struct {
	Amt  float64    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Amt"`
	Labl Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Labl,omitempty"`
}

type DetailedAmount5 struct {
	CshBck      float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CshBck,omitempty"`
	Grtty       float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Grtty,omitempty"`
	Fees        []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Fees,omitempty"`
	Rbt         []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rbt,omitempty"`
	ValAddedTax []DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ValAddedTax,omitempty"`
}

type Document struct {
	AccptrAuthstnRspn AcceptorAuthorisationResponseV03 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AccptrAuthstnRspn"`
}

type EncapsulatedContent2 struct {
	CnttTp ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Cntt,omitempty"`
}

type EncryptedContent2 struct {
	CnttTp         ContentType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CnttNcrptnAlgo"`
	NcrptdData     Max10000Binary           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NcrptdData"`
}

type EnvelopedData3 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Vrsn,omitempty"`
	Rcpt       []Recipient3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rcpt"`
	NcrptdCntt EncryptedContent2  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NcrptdCntt"`
}

// May be no more than 10 items long
type Exact10Text string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

type GenericIdentification31 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Tp"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ShrtNm,omitempty"`
}

type GenericIdentification32 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Tp,omitempty"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ShrtNm,omitempty"`
}

type GenericIdentification33 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Id,omitempty"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Tp"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ShrtNm,omitempty"`
}

type Header7 struct {
	MsgFctn    MessageFunction4Code    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MsgFctn"`
	PrtcolVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 PrtcolVrsn"`
	XchgId     Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 XchgId"`
	CreDtTm    ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CreDtTm"`
	InitgPty   GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 InitgPty"`
	RcptPty    GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RcptPty,omitempty"`
	Tracblt    []Traceability1         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Tracblt,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 SrlNb"`
}

type KEK3 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Vrsn,omitempty"`
	KEKId         KEKIdentifier1           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification9 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NcrptdKey"`
}

type KEKIdentifier1 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyId"`
	KeyVrsn   Exact10Text     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyVrsn"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DerivtnId,omitempty"`
}

type KeyTransport3 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Vrsn,omitempty"`
	RcptId        CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyNcrptnAlgo"`
	NcrptdKey     Max3000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 NcrptdKey"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max10Text string

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max256Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max350Text string

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// May be one of AUTQ, AUTP, FAUQ, FAUP, CMPV, CMPK, FCMV, FCMK, RVRA, RVRR, FRVA, FRVR, CCAQ, CCAP, CCAV, CCAK, DGNP, DGNQ, RCLQ, RCLP, RJCT, DCCQ, DCCP
type MessageFunction4Code string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 6 items long
type Min6Max8Text string

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

type Parameter1 struct {
	InitlstnVctr Max500Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 InitlstnVctr,omitempty"`
}

type Parameter2 struct {
	DgstAlgo     Algorithm5Code           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 MskGnrtrAlgo,omitempty"`
}

type Parameter3 struct {
	DgstAlgo Algorithm5Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DgstAlgo,omitempty"`
}

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS
type PartyType3Code string

// May be one of MERC, ACCP, ITAG, ACQR, CISS, TAXH
type PartyType4Code string

type PlainCardData5 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 PAN"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CardSeqNb,omitempty"`
	FctvDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 FctvDt,omitempty"`
	XpryDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 XpryDt"`
}

type Recipient3Choice struct {
	KeyTrnsprt KeyTransport3  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyTrnsprt"`
	KEK        KEK3           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KEK"`
	KeyIdr     KEKIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 KeyIdr"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 AttrVal"`
}

// May be one of DECL, APPR, PART, TECH
type Response1Code string

type ResponseType1 struct {
	Rspn    Response1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 Rspn"`
	RspnRsn Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RspnRsn,omitempty"`
}

// May be one of CRIT, ASAP, DTIM
type TMSContactLevel1Code string

type TMSTrigger1 struct {
	TMSCtctLvl  TMSContactLevel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TMSCtctLvl"`
	TMSId       Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TMSId,omitempty"`
	TMSCtctDtTm ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TMSCtctDtTm,omitempty"`
}

type Traceability1 struct {
	RlayId      GenericIdentification31 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 RlayId"`
	TracDtTmIn  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TracDtTmIn"`
	TracDtTmOut ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TracDtTmOut"`
}

type TransactionIdentifier1 struct {
	TxDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxDtTm"`
	TxRef  Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 TxRef"`
}

type TransactionVerificationResult2 struct {
	ElctrncComrcAuthntcnRslt Max500Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 ElctrncComrcAuthntcnRslt,omitempty"`
	CSCRslt                  CSCResult1Code                             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CSCRslt,omitempty"`
	CrdhldrAdrVrfctnRslt     []CardholderAddressVerificationResult1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 CrdhldrAdrVrfctnRslt,omitempty"`
	DclndPdctCd              []Max70Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03 DclndPdctCd,omitempty"`
}

// May be one of CDSP, CRCP, MDSP, MRCP
type UserInterface1Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
