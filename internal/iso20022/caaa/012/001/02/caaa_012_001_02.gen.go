// Code generated by main. DO NOT EDIT.

package caaa_012_001_02

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorBatchTransferResponseV02 struct {
	Hdr         Header3                           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Hdr"`
	BtchTrfRspn CardPaymentBatchTransferResponse1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 BtchTrfRspn"`
	SctyTrlr    ContentInformationType4           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 SctyTrlr"`
}

// May be one of EA2C, E3DC, DKPT, DKP9, UKPT, UKA1
type Algorithm2Code string

// May be one of MACC, MCCS, CMA1, CMD1
type Algorithm3Code string

// May be one of ERS2
type Algorithm4Code string

// May be one of HS25, HS38, HS51
type Algorithm5Code string

// May be one of EA2C, E3DC
type Algorithm6Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

type AlgorithmIdentification2 struct {
	Algo  Algorithm2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Param,omitempty"`
}

type AlgorithmIdentification3 struct {
	Algo  Algorithm3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Param,omitempty"`
}

type AlgorithmIdentification4 struct {
	Algo Algorithm4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
}

type AlgorithmIdentification5 struct {
	Algo Algorithm5Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
}

type AlgorithmIdentification6 struct {
	Algo  Algorithm6Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Param,omitempty"`
}

type AlgorithmIdentification7 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
	Param Parameter2     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Param,omitempty"`
}

type AlgorithmIdentification8 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Algo"`
	Param Parameter3     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Param,omitempty"`
}

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData2 struct {
	Vrsn        float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	Rcpt        []Recipient2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Rcpt"`
	MACAlgo     AlgorithmIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 MACAlgo"`
	NcpsltdCntt EncapsulatedContent1     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcpsltdCntt"`
	MAC         Max35Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 MAC"`
}

type CardPaymentBatchTransferResponse1 struct {
	TxTtls  TransactionTotals2    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxTtls"`
	DataSet []CardPaymentDataSet5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DataSet,omitempty"`
}

type CardPaymentDataSet5 struct {
	DataSetId    DataSetIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DataSetId"`
	DataSetRslt  ResponseType1           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DataSetRslt"`
	RmvDataSet   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RmvDataSet"`
	DataSetInitr GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DataSetInitr,omitempty"`
	TxTtls       []TransactionTotals2    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxTtls"`
	RjctdTx      []CardPaymentDataSet6   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RjctdTx,omitempty"`
}

type CardPaymentDataSet6 struct {
	TxSeqCntr Max9NumericText                       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxSeqCntr"`
	TxRspn    ResponseType1                         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxRspn"`
	Envt      CardPaymentEnvironment11              `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Envt"`
	Tx        CardPaymentTransactionAdviceResponse1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Tx"`
}

type CardPaymentEnvironment11 struct {
	AcqrrId        GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 AcqrrId,omitempty"`
	MrchntId       GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 MrchntId,omitempty"`
	POIId          GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 POIId"`
	PrtctdCardData ContentInformationType5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 PrtctdCardData,omitempty"`
	PlainCardData  PlainCardData3          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 PlainCardData,omitempty"`
}

type CardPaymentTransactionAdviceResponse1 struct {
	TxId TransactionIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxId"`
	Rspn Response1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Rspn"`
}

type CertificateIdentifier1 struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 IssrAndSrlNb"`
}

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RltvDstngshdNm"`
}

type ContentInformationType4 struct {
	CnttTp           ContentType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CnttTp"`
	EnvlpdData       EnvelopedData2         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 EnvlpdData,omitempty"`
	AuthntcdData     AuthenticatedData2     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 AuthntcdData,omitempty"`
	SgndData         SignedData2            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 SgndData,omitempty"`
	DgstdData        DigestedData2          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstdData,omitempty"`
	NmdKeyNcrptdData NamedKeyEncryptedData2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NmdKeyNcrptdData,omitempty"`
}

type ContentInformationType5 struct {
	CnttTp     ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CnttTp"`
	EnvlpdData EnvelopedData2   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 EnvlpdData"`
}

// May be one of DATA, SIGN, EVLP, DGST, ECRP, AUTH
type ContentType1Code string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

// May be one of SWPK, VDPR, AQPR, MRPR, TXCP, AKCP, STRP, DLGT, MGTP
type DataSetCategory1Code string

type DataSetIdentification1 struct {
	Nm      Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Nm"`
	Tp      DataSetCategory1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Tp"`
	Vrsn    Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	CreDtTm ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CreDtTm"`
}

type DigestedData2 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent1       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcpsltdCntt"`
	Dgst        Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Dgst"`
}

type Document struct {
	AccptrBtchTrfRspn AcceptorBatchTransferResponseV02 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 AccptrBtchTrfRspn"`
}

type EncapsulatedContent1 struct {
	CnttTp ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CnttTp"`
	Cntt   Max10000Binary   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Cntt,omitempty"`
}

type EncryptedContent2 struct {
	CnttTp         ContentType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CnttNcrptnAlgo"`
	NcrptdData     Max10000Binary           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcrptdData"`
}

type EnvelopedData2 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	Rcpt       []Recipient2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Rcpt"`
	NcrptdCntt EncryptedContent2  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcrptdCntt"`
}

// May be no more than 10 items long
type Exact10Text string

// Must match the pattern [0-9]{4}
type Exact4NumericText string

type GenericIdentification32 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Tp,omitempty"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 ShrtNm,omitempty"`
}

type Header3 struct {
	DwnldTrf bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DwnldTrf"`
	FrmtVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 FrmtVrsn"`
	XchgId   Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 XchgId"`
	CreDtTm  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CreDtTm"`
	InitgPty GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 InitgPty"`
	RcptPty  GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RcptPty,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 SrlNb"`
}

type KEK2 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	KEKId         KEKIdentifier1           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcrptdKey"`
}

type KEKIdentifier1 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyId"`
	KeyVrsn   Exact10Text     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyVrsn"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DerivtnId,omitempty"`
}

type KeyTransport2 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn"`
	RcptId        CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcrptdKey"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max256Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must match the pattern [0-9]{1,35}
type Max35NumericText string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max6Text string

// Must match the pattern [0-9]{1,9}
type Max9NumericText string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

type NamedKeyEncryptedData2 struct {
	Vrsn       float64           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	KeyNm      Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyNm,omitempty"`
	NcrptdCntt EncryptedContent2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcrptdCntt"`
}

type Parameter1 struct {
	InitlstnVctr Max500Binary `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 InitlstnVctr,omitempty"`
}

type Parameter2 struct {
	DgstAlgo     Algorithm5Code           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 MskGnrtrAlgo,omitempty"`
}

type Parameter3 struct {
	DgstAlgo Algorithm5Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstAlgo,omitempty"`
}

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS
type PartyType3Code string

// May be one of MERC, ACCP, ITAG, ACQR, CISS, TAXH
type PartyType4Code string

type PlainCardData3 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 PAN"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CardSeqNb,omitempty"`
	FctvDt    ISOYearMonth         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 FctvDt,omitempty"`
	XpryDt    ISOYearMonth         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 XpryDt"`
}

type Recipient2Choice struct {
	KeyTrnsprt KeyTransport2 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KeyTrnsprt,omitempty"`
	KEK        KEK2          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 KEK,omitempty"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 AttrVal"`
}

// May be one of DECL, APPR, PART, TECH
type Response1Code string

type ResponseType1 struct {
	Rspn    Response1Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Rspn"`
	RspnRsn Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 RspnRsn,omitempty"`
}

type SignedData2 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent1       `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 NcpsltdCntt"`
	Cert        []Max3000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Cert,omitempty"`
	Sgnr        []Signer2                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Sgnr"`
}

type Signer2 struct {
	Vrsn      float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Vrsn,omitempty"`
	SgnrId    CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 SgnrId"`
	DgstAlgo  AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 DgstAlgo"`
	SgntrAlgo AlgorithmIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 SgntrAlgo"`
	Sgntr     Max500Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Sgntr"`
}

type TransactionIdentifier1 struct {
	TxDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxDtTm"`
	TxRef  Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TxRef"`
}

type TransactionTotals2 struct {
	POIGrpId     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 POIGrpId,omitempty"`
	CardPdctPrfl Exact4NumericText          `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CardPdctPrfl,omitempty"`
	Ccy          CurrencyCode               `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Ccy,omitempty"`
	Tp           TypeTransactionTotals2Code `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 Tp"`
	TtlNb        Max35NumericText           `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 TtlNb"`
	CmltvAmt     float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02 CmltvAmt"`
}

// May be one of CRDT, CRDR, DEBT, DBTR, DECL, FAIL
type TypeTransactionTotals2Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
