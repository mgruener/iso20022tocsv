// Code generated by main. DO NOT EDIT.

package acmt_001_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account2 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id,omitempty"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctSvcr"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type AccountIdentificationAndName3 struct {
	Id CashAccountIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Nm Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm,omitempty"`
}

type AccountOpeningInstructionV03 struct {
	MsgId            MessageIdentification1                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MsgId"`
	OrdrRef          InvestmentFundOrder4                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OrdrRef,omitempty"`
	PrvsRef          AdditionalReference3                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrvsRef,omitempty"`
	InstrDtls        InvestmentAccountOpeningDetails            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InstrDtls"`
	InvstmtAcct      InvestmentAccount34                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InvstmtAcct"`
	AcctPties        AccountParties6                            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctPties"`
	Intrmies         []Intermediary12                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Intrmies,omitempty"`
	Plcmnt           ReferredAgent1                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Plcmnt,omitempty"`
	NewIsseAllcn     NewIssueAllocation1                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NewIsseAllcn,omitempty"`
	SvgsInvstmtPlan  []InvestmentPlan6                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SvgsInvstmtPlan,omitempty"`
	WdrwlInvstmtPlan []InvestmentPlan6                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 WdrwlInvstmtPlan,omitempty"`
	CshSttlm         []InvestmentFundCashSettlementInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CshSttlm,omitempty"`
	SvcLvlAgrmt      []DocumentToSend1                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SvcLvlAgrmt,omitempty"`
	Xtnsn            []Extension1                               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Xtnsn,omitempty"`
}

// May be one of NEWA, SUPA
type AccountOpeningType1Code string

// May be one of JOIN, COMO, CUST, SIGL, JOIT, CORP, PART, TRUS, NOMI, NFPO, ONIS, EURE, GOVO, LLCO, RGIC
type AccountOwnershipType3Code string

type AccountParties1Choice struct {
	PmryOwnr   InvestmentAccountOwnershipInformation6   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmryOwnr"`
	Trstee     []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Trstee"`
	CtdnForMnr InvestmentAccountOwnershipInformation6   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CtdnForMnr"`
	Nmnee      InvestmentAccountOwnershipInformation6   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nmnee"`
	JntOwnr    []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 JntOwnr"`
}

type AccountParties6 struct {
	PrncplAcctPty AccountParties1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrncplAcctPty"`
	ScndryOwnr    []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ScndryOwnr,omitempty"`
	Bnfcry        []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Bnfcry,omitempty"`
	PwrOfAttny    []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PwrOfAttny,omitempty"`
	LglGuardn     []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 LglGuardn,omitempty"`
	SucssrOnDth   []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SucssrOnDth,omitempty"`
	Admstr        InvestmentAccountOwnershipInformation6   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Admstr,omitempty"`
	OthrPty       []ExtendedParty3                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OthrPty,omitempty"`
	Grntr         []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Grntr,omitempty"`
	Sttlr         []InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Sttlr,omitempty"`
}

type AccountType1Choice struct {
	Cd    FundCashAccount3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type AccountUsageType1Choice struct {
	Cd    AccountUsageType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of INVE, SETP
type AccountUsageType1Code string

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MsgNm,omitempty"`
}

// May be one of HOME, BIZZ
type AddressType1Code string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

type Blocked1 struct {
	OrdrTp []FundOrderType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OrdrTp"`
	Blckd  bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Blckd"`
	Rsn    BlockedReason1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Rsn,omitempty"`
}

type BlockedHoldingDetails1 struct {
	BlckdHldg     Holding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BlckdHldg"`
	PrtlHldgUnits float64      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrtlHldgUnits,omitempty"`
	HldgCertNb    Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 HldgCertNb,omitempty"`
}

type BlockedReason1Choice struct {
	Rsn   BlockedReason1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Rsn"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of BKRP, CMMT, CNFS, MORT, PLDG, TRPE, TRAN
type BlockedReason1Code string

// Must be at least 1 items long
type BloombergIdentifier string

type BranchData struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id,omitempty"`
	Nm      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm,omitempty"`
	PstlAdr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PstlAdr,omitempty"`
}

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

// May be one of CRDT, DBIT
type CardType1Code string

type CashAccount26 struct {
	Id             AccountIdentificationAndName3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	AcctOwnr       PartyIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctOwnr,omitempty"`
	AcctSvcr       PartyIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctSvcr,omitempty"`
	AcctSvcrBrnch  BranchData                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctSvcrBrnch,omitempty"`
	InvstmtAcctTp  InvestmentAccountType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InvstmtAcctTp,omitempty"`
	AcctOwnrOthrId []GenericIdentification46     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctOwnrOthrId,omitempty"`
}

type CashAccountIdentification1Choice struct {
	IBAN     IBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IBAN"`
	BBAN     BBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BBAN"`
	UPIC     UPICIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 UPIC"`
	DmstAcct SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DmstAcct"`
}

// May be one of AMLC, DVLC, DFOR, GOST, IDEN, INCU, LREF, PASS, PRAD, PKIC
type CertificateType2Code string

type CertificationType1Choice struct {
	Cd    CertificateType2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type Cheque4 struct {
	PyeeId NameAndAddress5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PyeeId"`
}

type CitizenshipInformation struct {
	Ntlty  string `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Ntlty"`
	MnrInd bool   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MnrInd"`
}

type ClearingSystemMemberIdentificationChoice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AUBSBs"`
}

type CommunicationAddress3 struct {
	Email  Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Email,omitempty"`
	Phne   PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Phne,omitempty"`
	Mob    PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Mob,omitempty"`
	FaxNb  PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FaxNb,omitempty"`
	TlxAdr Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TlxAdr,omitempty"`
	URLAdr Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 URLAdr,omitempty"`
}

// May be one of SWMT, SWMX, FAXI, EMAL, PROP
type CommunicationMethod1Code string

// May be one of NSTA, RCLT, STAN
type ConductClassification1Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type CountryAndResidentialStatusType1 struct {
	Ctry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Ctry"`
	ResdtlSts ResidentialStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ResdtlSts"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type CustomerConductClassification1Choice struct {
	Cd    ConductClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DtTm"`
}

type DeMinimusApplicable1 struct {
	NewIssePrmssn bool    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NewIssePrmssn"`
	Pctg          float64 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Pctg,omitempty"`
}

type DeMinimusNotApplicable1 struct {
	RstrctdPrsnRsn Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RstrctdPrsnRsn"`
}

type DirectDebitMandate4 struct {
	DbtrAcct      AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DbtrAcct"`
	Dbtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Dbtr,omitempty"`
	DbtrTaxIdNb   Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DbtrTaxIdNb,omitempty"`
	DbtrNtlRegnNb Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DbtrNtlRegnNb,omitempty"`
	Cdtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cdtr,omitempty"`
	DbtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DbtrAgt"`
	DbtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DbtrAgtBrnch,omitempty"`
	CdtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CdtrAgt,omitempty"`
	CdtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CdtrAgtBrnch,omitempty"`
	RegnId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RegnId,omitempty"`
	MndtId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MndtId,omitempty"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	AcctOpngInstr AccountOpeningInstructionV03 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctOpngInstr"`
}

type DocumentToSend1 struct {
	Tp                  Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp"`
	Rcpt                PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Rcpt"`
	MtdOfTrnsmssn       CommunicationMethod1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MtdOfTrnsmssn"`
	XtndedMtdOfTrnsmssn Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XtndedMtdOfTrnsmssn"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// May be one of YEAR, SEMI, QUTR, TOMN, MNTH, TWMN, TOWK, WEEK, DAIL, ADHO, INDA, OVNG, ONDE
type EventFrequency1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type ExtendedParty3 struct {
	XtndedPtyRole Extended350Code                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XtndedPtyRole"`
	OthrPtyDtls   InvestmentAccountOwnershipInformation6 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OthrPtyDtls"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type FinancialInstitutionIdentification3Choice struct {
	NmAndAdr    NameAndAddress5                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmAndAdr"`
	BIC         BICIdentifier                            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BIC"`
	ClrSysMmbId ClearingSystemMemberIdentificationChoice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ClrSysMmbId"`
	PrtryId     SimpleIdentificationInformation          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrtryId"`
}

type FinancialInstrument29 struct {
	Id            SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Nm            Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm,omitempty"`
	SplmtryId     Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SplmtryId,omitempty"`
	ClssTp        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ClssTp,omitempty"`
	SctiesForm    FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SctiesForm,omitempty"`
	DstrbtnPlcy   DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DstrbtnPlcy,omitempty"`
	PdctGrp       Max140Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PdctGrp,omitempty"`
	BlckdHldgDtls BlockedHoldingDetails1        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BlckdHldgDtls,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type Frequency19Choice struct {
	Cd    EventFrequency1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of CASH, CPFO, CPFS, SRSA
type FundCashAccount2Code string

// May be one of CASH, CPFO, CPFS, SRSA, HEDG
type FundCashAccount3Code string

type FundOrderType1Choice struct {
	Tp    FundOrderType6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of ALLL, REDM, SUBS, SWII, SWIO, TRAI, TRAO
type FundOrderType6Code string

// May be one of MALE, FEMA
type GenderCode string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Issr,omitempty"`
}

type GenericIdentification41 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SchmeNm,omitempty"`
}

type GenericIdentification44 struct {
	Id     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Tp     OtherIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp"`
	Issr   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Issr,omitempty"`
	IsseDt ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IsseDt,omitempty"`
	XpryDt ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XpryDt,omitempty"`
}

type GenericIdentification46 struct {
	Id Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Tp OtherIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SchmeNm,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// May be one of CERT, NPRH, PRTH
type Holding1Code string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type IndividualPerson20 struct {
	NmPrfx           NamePrefix1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmPrfx,omitempty"`
	GvnNm            Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 GvnNm"`
	MddlNm           Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MddlNm,omitempty"`
	Nm               Max350Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm"`
	NmSfx            Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmSfx,omitempty"`
	Gndr             GenderCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Gndr,omitempty"`
	Lang             string                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Lang,omitempty"`
	BirthDt          ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BirthDt"`
	CtryOfBirth      CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CtryOfBirth,omitempty"`
	PrvcOfBirth      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrvcOfBirth,omitempty"`
	CityOfBirth      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CityOfBirth,omitempty"`
	Prfssn           Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prfssn,omitempty"`
	TaxtnCtry        CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TaxtnCtry,omitempty"`
	CtryAndResdtlSts CountryAndResidentialStatusType1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CtryAndResdtlSts,omitempty"`
	PstlAdr          []PostalAddress3                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PstlAdr"`
	Ctznsh           []CitizenshipInformation         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Ctznsh"`
	EmplngCpny       Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 EmplngCpny,omitempty"`
	BizFctn          Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BizFctn,omitempty"`
	PmryComAdr       CommunicationAddress3            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmryComAdr,omitempty"`
	ScndryComAdr     CommunicationAddress3            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ScndryComAdr,omitempty"`
	OthrId           []GenericIdentification44        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OthrId,omitempty"`
	AddtlRgltryInf   RegulatoryInformation1           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AddtlRgltryInf,omitempty"`
}

// May be one of ELEC, PAPR
type InformationDistribution1Code string

// May be one of LIFE, PDIS
type Insurance1Code string

type InsuranceType1Choice struct {
	Cd    Insurance1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification41 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type Intermediary12 struct {
	Id               PartyIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	Acct             Account2                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Acct,omitempty"`
	WvdTrlrComssnInd bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 WvdTrlrComssnInd,omitempty"`
	Role             InvestmentFundRole3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Role,omitempty"`
	XtndedRole       Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XtndedRole,omitempty"`
	PmryComAdr       CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmryComAdr,omitempty"`
	ScndryComAdr     CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ScndryComAdr,omitempty"`
	NmAndAdr         NameAndAddress4            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmAndAdr,omitempty"`
}

type InvestmentAccount34 struct {
	Id              AccountIdentification1          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id,omitempty"`
	Nm              Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm,omitempty"`
	Dsgnt           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Dsgnt,omitempty"`
	Tp              AccountType1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp,omitempty"`
	OwnrshTp        OwnershipType1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OwnrshTp"`
	TaxXmptn        TaxExemptionReason1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TaxXmptn,omitempty"`
	StmtFrqcy       StatementFrequencyReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 StmtFrqcy,omitempty"`
	RefCcy          ActiveCurrencyCode              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RefCcy,omitempty"`
	Lang            string                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Lang,omitempty"`
	IncmPref        IncomePreference1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IncmPref,omitempty"`
	TaxWhldgMtd     TaxWithholdingMethod2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TaxWhldgMtd,omitempty"`
	LttrInttDtls    LetterIntent1                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 LttrInttDtls,omitempty"`
	AcmltnRghtRef   Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcmltnRghtRef,omitempty"`
	ReqrdSgntriesNb float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ReqrdSgntriesNb,omitempty"`
	FndFmlyNm       Max350Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FndFmlyNm,omitempty"`
	FndDtls         []FinancialInstrument29         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FndDtls,omitempty"`
	RndgDtls        RoundingParameters1             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RndgDtls,omitempty"`
	AcctSvcr        PartyIdentification2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctSvcr,omitempty"`
	BlckdSts        []Blocked1                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BlckdSts,omitempty"`
	AcctUsgTp       AccountUsageType1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctUsgTp,omitempty"`
	FrgnStsCertfctn Provided1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FrgnStsCertfctn,omitempty"`
	AcctSgntrDtTm   DateAndDateTimeChoice           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctSgntrDtTm,omitempty"`
}

type InvestmentAccountOpeningDetails struct {
	OpngTp     AccountOpeningType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OpngTp"`
	AcctApplId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AcctApplId,omitempty"`
}

type InvestmentAccountOwnershipInformation6 struct {
	Pty              Party14Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Pty"`
	MnyLndrgChck     MoneyLaunderingCheck1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MnyLndrgChck,omitempty"`
	InvstrPrflVldtn  []PartyProfileInformation2   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InvstrPrflVldtn,omitempty"`
	OwnrshBnfcryRate float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OwnrshBnfcryRate,omitempty"`
	ClntId           Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ClntId,omitempty"`
	FsclXmptn        bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FsclXmptn,omitempty"`
	SgntryRghtInd    bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SgntryRghtInd,omitempty"`
	MiFIDClssfctn    MiFIDClassification1         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MiFIDClssfctn,omitempty"`
	InfDstrbtn       InformationDistribution1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InfDstrbtn,omitempty"`
}

type InvestmentAccountType1Choice struct {
	Cd    FundCashAccount2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type InvestmentFundCashSettlementInformation5 struct {
	SbcptPmtInstrm    PaymentInstrument11 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SbcptPmtInstrm,omitempty"`
	RedPmtInstrm      PaymentInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RedPmtInstrm,omitempty"`
	DvddPmtInstrm     PaymentInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DvddPmtInstrm,omitempty"`
	SvgsPlanPmtInstrm PaymentInstrument11 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SvgsPlanPmtInstrm,omitempty"`
	IntrstPmtInstrm   PaymentInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IntrstPmtInstrm,omitempty"`
}

type InvestmentFundOrder4 struct {
	OrdrRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OrdrRef,omitempty"`
	MstrRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MstrRef,omitempty"`
}

// May be one of CACO, CUST, DATP, FIAG, FMCO, FACT, INVS, INVE, PAYI, REGI, TRAG, INTR, FNBR, FTAG, FIAD, DIST, CONC
type InvestmentFundRole3Code string

type InvestmentPlan6 struct {
	Frqcy               Frequency19Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Frqcy"`
	StartDt             ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 StartDt,omitempty"`
	EndDt               ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 EndDt,omitempty"`
	Qty                 UnitsOrAmount1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Qty"`
	GrssAmtInd          bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 GrssAmtInd,omitempty"`
	IncmPref            IncomePreference1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IncmPref,omitempty"`
	InitlNbOfInstlmt    float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InitlNbOfInstlmt,omitempty"`
	TtlNbOfInstlmt      float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TtlNbOfInstlmt,omitempty"`
	RndgDrctn           RoundingDirection1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RndgDrctn,omitempty"`
	SctyDtls            []Repartition2                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SctyDtls"`
	CshSttlm            []InvestmentFundCashSettlementInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CshSttlm,omitempty"`
	CtrctRef            Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CtrctRef,omitempty"`
	RltdCtrctRef        Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RltdCtrctRef,omitempty"`
	PdctId              Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PdctId,omitempty"`
	SLAChrgAndComssnRef Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SLAChrgAndComssnRef,omitempty"`
	InsrncCover         InsuranceType1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 InsrncCover,omitempty"`
}

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

type LetterIntent1 struct {
	LttrInttRef Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 LttrInttRef"`
	Amt         ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Amt,omitempty"`
	StartDt     ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 StartDt,omitempty"`
	EndDt       ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 EndDt,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max3Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CreDtTm"`
}

type MiFIDClassification1 struct {
	Clssfctn OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Clssfctn"`
	Nrrtv    Max350Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nrrtv,omitempty"`
}

type MoneyLaunderingCheck1Choice struct {
	Cd    MoneyLaunderingCheck1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of PASS, NOTC, EXEM, CLMO, AUTH, POEP
type MoneyLaunderingCheck1Code string

type NameAndAddress4 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm,omitempty"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Adr"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Adr,omitempty"`
}

type NamePrefix1Choice struct {
	Cd    NamePrefix1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type NewIssueAllocation1 struct {
	Rstrctd        bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Rstrctd"`
	XmptPrsnRsn    Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XmptPrsnRsn,omitempty"`
	DeMnmsAplbl    DeMinimusApplicable1    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DeMnmsAplbl,omitempty"`
	DeMnmsNotAplbl DeMinimusNotApplicable1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DeMnmsNotAplbl,omitempty"`
}

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type Organisation13 struct {
	Nm             Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nm"`
	Id             PartyIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id,omitempty"`
	Purp           Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Purp,omitempty"`
	TaxtnCtry      CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TaxtnCtry,omitempty"`
	RegnCtry       CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RegnCtry,omitempty"`
	RegnDt         ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RegnDt,omitempty"`
	TaxIdNb        Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TaxIdNb,omitempty"`
	NtlRegnNb      Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NtlRegnNb,omitempty"`
	PstlAdr        []PostalAddress3           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PstlAdr"`
	PmryComAdr     CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmryComAdr,omitempty"`
	ScndryComAdr   CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ScndryComAdr,omitempty"`
	AddtlRgltryInf RegulatoryInformation1     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AddtlRgltryInf,omitempty"`
}

type OtherIdentification1Choice struct {
	Cd    PersonIdentificationType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type OwnershipType1Choice struct {
	Cd    AccountOwnershipType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

type Party14Choice struct {
	Org      Organisation13     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Org"`
	IndvPrsn IndividualPerson20 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 IndvPrsn"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmAndAdr"`
}

type PartyIdentification4Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PrtryId"`
}

type PartyProfileInformation2 struct {
	CertfctnInd        bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CertfctnInd"`
	VldtngPty          Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 VldtngPty,omitempty"`
	ChckngPty          Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ChckngPty,omitempty"`
	RspnsblPty         Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RspnsblPty,omitempty"`
	CertTp             CertificationType1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CertTp"`
	ChckngDt           ISODate                              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ChckngDt,omitempty"`
	ChckngFrqcy        EventFrequency1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ChckngFrqcy,omitempty"`
	NxtRvsnDt          ISODate                              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NxtRvsnDt,omitempty"`
	SlryRg             Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SlryRg,omitempty"`
	SrcOfWlth          Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SrcOfWlth,omitempty"`
	CstmrCndctClssfctn CustomerConductClassification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CstmrCndctClssfctn,omitempty"`
	RskLvl             RiskLevel1Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RskLvl,omitempty"`
}

type PaymentCard2 struct {
	Tp         CardType1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Tp"`
	Nb         Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Nb"`
	HldrNm     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 HldrNm"`
	StartDt    ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 StartDt,omitempty"`
	XpryDt     ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 XpryDt"`
	CardIssrNm Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CardIssrNm,omitempty"`
	CardIssrId PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CardIssrId,omitempty"`
	SctyCd     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SctyCd,omitempty"`
	SeqNb      Max3Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SeqNb,omitempty"`
}

type PaymentInstrument10 struct {
	SttlmCcy  ActiveCurrencyCode        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SttlmCcy"`
	PmtInstrm PaymentInstrument16Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmtInstrm"`
	DvddPctg  float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DvddPctg,omitempty"`
}

type PaymentInstrument11 struct {
	SttlmCcy  ActiveCurrencyCode        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SttlmCcy"`
	PmtInstrm PaymentInstrument17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmtInstrm"`
}

type PaymentInstrument16Choice struct {
	CshAcctDtls  []CashAccount26 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CshAcctDtls"`
	ChqDtls      Cheque4         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ChqDtls"`
	BkrsDrftDtls Cheque4         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BkrsDrftDtls"`
}

type PaymentInstrument17Choice struct {
	CshAcctDtls []CashAccount26     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CshAcctDtls"`
	PmtCardDtls PaymentCard2        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PmtCardDtls"`
	DrctDbtDtls DirectDebitMandate4 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 DrctDbtDtls"`
	Chq         bool                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Chq"`
	BkrsDrft    bool                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BkrsDrft"`
}

// May be one of AREG, CPFA, DRLC, EMID, IDCD, NRIN, OTHR, PASS, POCD, SOCS, SRSA, GUNL
type PersonIdentificationType5Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Ctry"`
}

type PostalAddress3 struct {
	AdrTp      AddressType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 AdrTp"`
	MlngInd    bool             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 MlngInd"`
	RegnAdrInd bool             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RegnAdrInd"`
	NmAndAdr   NameAndAddress4  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 NmAndAdr"`
}

// May be one of NPRO, PROV
type Provided1Code string

// Must be at least 1 items long
type RICIdentifier string

// May be one of REFR, NRFR, UKNW
type Referred1Code string

type ReferredAgent1 struct {
	Rfrd          Referred1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Rfrd"`
	RfrdPlcmntAgt PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RfrdPlcmntAgt,omitempty"`
}

type RegulatoryInformation1 struct {
	Sctr  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Sctr,omitempty"`
	Brnch Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Brnch,omitempty"`
	Grp   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Grp,omitempty"`
	Othr  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Othr,omitempty"`
}

type Repartition2 struct {
	Pctg      float64               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Pctg"`
	FinInstrm FinancialInstrument29 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 FinInstrm"`
	CcyOfPlan CurrencyCode          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CcyOfPlan,omitempty"`
}

// May be one of RESI, PRES, NRES
type ResidentialStatus1Code string

type RiskLevel1Choice struct {
	Cd    RiskLevel1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification41 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of HIGH, LOWW, MEDM
type RiskLevel1Code string

// May be one of RDUP, RDWN, STAN, DIST
type RoundingDirection1Code string

type RoundingParameters1 struct {
	RndgMdlus float64                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RndgMdlus,omitempty"`
	RndgDrctn RoundingDirection1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RndgDrctn"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 OthrPrtryId"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Id"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type StatementFrequencyReason1Choice struct {
	Cd    EventFrequency1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

type TaxExemptionReason1Choice struct {
	Cd    TaxExemptReason1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Prtry"`
}

// May be one of WHCO, REPT, CRTF, WTHD, WTRE
type TaxWithholdingMethod2Code string

// Must be at least 1 items long
type TickerIdentifier string

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

type UnitsOrAmount1Choice struct {
	Amt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Amt"`
	Unit float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03 Unit"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
