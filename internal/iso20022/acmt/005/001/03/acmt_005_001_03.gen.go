// Code generated by main. DO NOT EDIT.

package acmt_005_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Prtry"`
}

type AccountManagementMessageReference2 struct {
	LkdRef      LinkedMessage2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 LkdRef,omitempty"`
	StsReqTp    AccountManagementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 StsReqTp"`
	AcctApplId  Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AcctApplId,omitempty"`
	InvstmtAcct InvestmentAccount45        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 InvstmtAcct,omitempty"`
}

// May be one of ACCO, ACCM
type AccountManagementType1Code string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	ReqForAcctMgmtStsRpt RequestForAccountManagementStatusReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 ReqForAcctMgmtStsRpt"`
}

// Must be at least 1 items long
type Extended350Code string

// May be one of MALE, FEMA
type GenderCode string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Issr,omitempty"`
}

type GenericIdentification10 struct {
	Id         Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Id"`
	IdTp       PersonIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 IdTp"`
	XtndedIdTp Extended350Code               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 XtndedIdTp"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IndividualPerson4 struct {
	GvnNm   Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 GvnNm"`
	MddlNm  Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 MddlNm,omitempty"`
	Nm      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Nm"`
	Gndr    GenderCode `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Gndr,omitempty"`
	BirthDt ISODate    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 BirthDt,omitempty"`
}

type IndividualPersonIdentificationChoice struct {
	IdNb   GenericIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 IdNb"`
	PrsnNm IndividualPerson4       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 PrsnNm"`
}

type InvestmentAccount45 struct {
	AcctId    AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AcctId"`
	AcctNm    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AcctNm,omitempty"`
	AcctDsgnt Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AcctDsgnt,omitempty"`
	OwnrId    OwnerIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 OwnrId,omitempty"`
	AcctSvcr  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AcctSvcr,omitempty"`
}

type LinkedMessage2Choice struct {
	PrvsRef AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 PrvsRef"`
	OthrRef AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 OthrRef"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Adr,omitempty"`
}

type OwnerIdentification1Choice struct {
	IndvOwnrId IndividualPersonIdentificationChoice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 IndvOwnrId"`
	OrgOwnrId  PartyIdentification5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 OrgOwnrId"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 NmAndAdr"`
}

type PartyIdentification5Choice struct {
	BICOrBEI  AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 BICOrBEI"`
	PrtryId   GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 PrtryId"`
	NmAndAdr  NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 NmAndAdr"`
	TaxIdNb   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 TaxIdNb"`
	NtlRegnNb Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 NtlRegnNb"`
}

// May be one of PASS, CPFA, SRSA, NRIN, OTHR, DRLC, SOCS, AREG, IDCD, EMID
type PersonIdentificationType1Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Ctry"`
}

type RequestForAccountManagementStatusReportV03 struct {
	MsgId   MessageIdentification1             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 MsgId"`
	ReqDtls AccountManagementMessageReference2 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 ReqDtls"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03 Id"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
