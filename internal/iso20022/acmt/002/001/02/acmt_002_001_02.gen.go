// Code generated by main. DO NOT EDIT.

package acmt_002_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account2 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id,omitempty"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctSvcr"`
}

type AccountDetailsConfirmationV02 struct {
	MsgId            MessageIdentification1                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MsgId"`
	OrdrRef          InvestmentFundOrder4                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OrdrRef,omitempty"`
	RltdRef          AdditionalReference3                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RltdRef,omitempty"`
	ConfDtls         AccountManagementConfirmation1           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ConfDtls"`
	InvstmtAcct      InvestmentAccount27                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 InvstmtAcct,omitempty"`
	AcctPties        AccountParties5                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctPties,omitempty"`
	Intrmies         []Intermediary12                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Intrmies,omitempty"`
	Plcmnt           ReferredAgent1                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Plcmnt,omitempty"`
	NewIsseAllcn     NewIssueAllocation1                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NewIsseAllcn,omitempty"`
	SvgsInvstmtPlan  []InvestmentPlan4                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SvgsInvstmtPlan,omitempty"`
	WdrwlInvstmtPlan []InvestmentPlan4                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 WdrwlInvstmtPlan,omitempty"`
	CshSttlm         InvestmentFundCashSettlementInformation3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CshSttlm,omitempty"`
	SvcLvlAgrmt      []DocumentToSend1                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SvcLvlAgrmt,omitempty"`
	Xtnsn            []Extension1                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Xtnsn,omitempty"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Prtry"`
}

type AccountIdentificationAndName3 struct {
	Id CashAccountIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Nm Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm,omitempty"`
}

type AccountManagementConfirmation1 struct {
	ConfTp     AccountManagementType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ConfTp"`
	AcctApplId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctApplId,omitempty"`
}

// May be one of ACCO, ACCM, GACC
type AccountManagementType2Code string

// May be one of JOIN, COMO, CUST, SIGL, JOIT, CORP, PART, TRUS, NOMI, NFPO, ONIS, EURE, GOVO, LLCO, RGIC
type AccountOwnershipType3Code string

type AccountParties5 struct {
	PmryOwnr    InvestmentAccountOwnershipInformation5   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PmryOwnr"`
	Trstee      []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Trstee"`
	CtdnForMnr  InvestmentAccountOwnershipInformation5   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CtdnForMnr"`
	Nmnee       InvestmentAccountOwnershipInformation5   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nmnee"`
	JntOwnr     []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 JntOwnr"`
	ScndryOwnr  []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ScndryOwnr,omitempty"`
	Bnfcry      []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Bnfcry,omitempty"`
	PwrOfAttny  []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PwrOfAttny,omitempty"`
	LglGuardn   []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 LglGuardn,omitempty"`
	SucssrOnDth []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SucssrOnDth,omitempty"`
	Admstr      InvestmentAccountOwnershipInformation5   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Admstr,omitempty"`
	OthrPty     []ExtendedParty2                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OthrPty,omitempty"`
	Grntr       []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Grntr,omitempty"`
	Sttlr       []InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Sttlr,omitempty"`
}

// May be one of ENAB, DISA, DELE
type AccountStatus1Code string

// May be one of ENAB, DISA, FORM
type AccountStatus2Code string

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MsgNm,omitempty"`
}

// May be one of HOME, BIZZ
type AddressType1Code string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

type BranchData struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id,omitempty"`
	Nm      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm,omitempty"`
	PstlAdr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PstlAdr,omitempty"`
}

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

// May be one of CRDT, DBIT
type CardType1Code string

type CashAccount12 struct {
	Id       CashAccountIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Nm       Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm"`
	Tp       CashAccountType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Tp,omitempty"`
	XtndedTp Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedTp,omitempty"`
	Ccy      ActiveCurrencyCode               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ccy"`
	Sts      AccountStatus1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Sts"`
}

type CashAccount4 struct {
	Id                  AccountIdentificationAndName3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	AcctOwnr            PartyIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctOwnr,omitempty"`
	AcctSvcr            PartyIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctSvcr,omitempty"`
	AcctSvcrBrnch       BranchData                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctSvcrBrnch,omitempty"`
	InvstmtAcctTp       FundCashAccount2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 InvstmtAcctTp,omitempty"`
	XtndedInvstmtAcctTp Extended350Code               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedInvstmtAcctTp,omitempty"`
}

type CashAccountIdentification1Choice struct {
	IBAN     IBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IBAN"`
	BBAN     BBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BBAN"`
	UPIC     UPICIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 UPIC"`
	DmstAcct SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DmstAcct"`
}

// May be one of SACC, CACC, SVGS
type CashAccountType1Code string

// May be one of DFOR, GOST, LREF, AMLC, INCU, PASS, DVLC, IDEN, PRAD
type CertificateType1Code string

type Cheque4 struct {
	PyeeId NameAndAddress5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PyeeId"`
}

type CitizenshipInformation struct {
	Ntlty  string `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ntlty"`
	MnrInd bool   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MnrInd"`
}

type ClearingSystemMemberIdentificationChoice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AUBSBs"`
}

type CommunicationAddress3 struct {
	Email  Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Email,omitempty"`
	Phne   PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Phne,omitempty"`
	Mob    PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Mob,omitempty"`
	FaxNb  PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FaxNb,omitempty"`
	TlxAdr Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TlxAdr,omitempty"`
	URLAdr Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 URLAdr,omitempty"`
}

// May be one of SWMT, SWMX, FAXI, EMAL, PROP
type CommunicationMethod1Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type CountryAndResidentialStatusType1 struct {
	Ctry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ctry"`
	ResdtlSts ResidentialStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ResdtlSts"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DeMinimusApplicable1 struct {
	NewIssePrmssn bool    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NewIssePrmssn"`
	Pctg          float64 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Pctg,omitempty"`
}

type DeMinimusNotApplicable1 struct {
	RstrctdPrsnRsn Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RstrctdPrsnRsn"`
}

type DirectDebitMandate4 struct {
	DbtrAcct      AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DbtrAcct"`
	Dbtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Dbtr,omitempty"`
	DbtrTaxIdNb   Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DbtrTaxIdNb,omitempty"`
	DbtrNtlRegnNb Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DbtrNtlRegnNb,omitempty"`
	Cdtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Cdtr,omitempty"`
	DbtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DbtrAgt"`
	DbtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DbtrAgtBrnch,omitempty"`
	CdtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CdtrAgt,omitempty"`
	CdtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CdtrAgtBrnch,omitempty"`
	RegnId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RegnId,omitempty"`
	MndtId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MndtId,omitempty"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	AcctDtlsConfV02 AccountDetailsConfirmationV02 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctDtlsConfV02"`
}

type DocumentToSend1 struct {
	Tp                  Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Tp"`
	Rcpt                PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Rcpt"`
	MtdOfTrnsmssn       CommunicationMethod1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MtdOfTrnsmssn"`
	XtndedMtdOfTrnsmssn Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedMtdOfTrnsmssn"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// May be one of YEAR, SEMI, QUTR, TOMN, MNTH, TWMN, TOWK, WEEK, DAIL, ADHO, INDA, OVNG, ONDE
type EventFrequency1Code string

// Must be at least 1 items long
type Extended350Code string

type ExtendedParty2 struct {
	XtndedPtyRole Extended350Code                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedPtyRole"`
	OthrPtyDtls   InvestmentAccountOwnershipInformation5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OthrPtyDtls"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type FinancialInstitutionIdentification3Choice struct {
	NmAndAdr    NameAndAddress5                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmAndAdr"`
	BIC         BICIdentifier                            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BIC"`
	ClrSysMmbId ClearingSystemMemberIdentificationChoice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ClrSysMmbId"`
	PrtryId     SimpleIdentificationInformation          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PrtryId"`
}

type FinancialInstrument10 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SplmtryId,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PdctGrp,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

// May be one of CASH, CPFO, CPFS, SRSA
type FundCashAccount2Code string

// May be one of CASH, CPFO, CPFS, SRSA, HEDG
type FundCashAccount3Code string

// May be one of MALE, FEMA
type GenderCode string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Issr,omitempty"`
}

type GenericIdentification9 struct {
	Id         Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	IdTp       PersonIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IdTp"`
	XtndedIdTp Extended350Code               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedIdTp"`
	Issr       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Issr,omitempty"`
	IsseDt     ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IsseDt,omitempty"`
	XpryDt     ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XpryDt,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type IndividualPerson10 struct {
	NmPrfx           NamePrefix1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmPrfx,omitempty"`
	XtndedNmPrfx     Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedNmPrfx,omitempty"`
	GvnNm            Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 GvnNm"`
	MddlNm           Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MddlNm,omitempty"`
	Nm               Max350Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm"`
	NmSfx            Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmSfx,omitempty"`
	Gndr             GenderCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Gndr,omitempty"`
	Lang             string                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Lang,omitempty"`
	BirthDt          ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BirthDt"`
	CtryOfBirth      CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CtryOfBirth,omitempty"`
	PrvcOfBirth      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PrvcOfBirth,omitempty"`
	CityOfBirth      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CityOfBirth,omitempty"`
	Prfssn           Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Prfssn,omitempty"`
	TaxtnCtry        CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TaxtnCtry,omitempty"`
	CtryAndResdtlSts CountryAndResidentialStatusType1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CtryAndResdtlSts,omitempty"`
	PstlAdr          []PostalAddress3                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PstlAdr"`
	Ctznsh           []CitizenshipInformation         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ctznsh"`
	EmplngCpny       Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 EmplngCpny,omitempty"`
	BizFctn          Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BizFctn,omitempty"`
	PmryComAdr       CommunicationAddress3            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PmryComAdr,omitempty"`
	ScndryComAdr     CommunicationAddress3            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ScndryComAdr,omitempty"`
	OthrId           []GenericIdentification9         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OthrId,omitempty"`
}

type Intermediary12 struct {
	Id               PartyIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Acct             Account2                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Acct,omitempty"`
	WvdTrlrComssnInd bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 WvdTrlrComssnInd,omitempty"`
	Role             InvestmentFundRole3Code    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Role,omitempty"`
	XtndedRole       Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedRole,omitempty"`
	PmryComAdr       CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PmryComAdr,omitempty"`
	ScndryComAdr     CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ScndryComAdr,omitempty"`
	NmAndAdr         NameAndAddress4            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmAndAdr,omitempty"`
}

type InvestmentAccount27 struct {
	Id                AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Sts               AccountStatus2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Sts"`
	Nm                Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm,omitempty"`
	Dsgnt             Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Dsgnt,omitempty"`
	Tp                FundCashAccount3Code       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Tp,omitempty"`
	XtndedTp          Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedTp,omitempty"`
	OwnrshTp          AccountOwnershipType3Code  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OwnrshTp"`
	XtndedOwnrshTp    Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedOwnrshTp"`
	TaxXmptnRsn       TaxExemptReason1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TaxXmptnRsn,omitempty"`
	XtndedTaxXmptnRsn Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedTaxXmptnRsn,omitempty"`
	StmtFrqcy         EventFrequency1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 StmtFrqcy,omitempty"`
	XtndedStmtFrqcy   Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedStmtFrqcy,omitempty"`
	RefCcy            ActiveCurrencyCode         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RefCcy,omitempty"`
	Lang              string                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Lang,omitempty"`
	IncmPref          IncomePreference1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IncmPref,omitempty"`
	TaxWhldgMtd       TaxWithholdingMethod1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TaxWhldgMtd,omitempty"`
	LttrInttRef       Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 LttrInttRef,omitempty"`
	AcmltnRghtRef     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcmltnRghtRef,omitempty"`
	ReqrdSgntriesNb   float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ReqrdSgntriesNb,omitempty"`
	FndFmlyNm         Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FndFmlyNm,omitempty"`
	RndgDtls          RoundingParameters1        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RndgDtls,omitempty"`
	AcctSvcr          PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AcctSvcr,omitempty"`
	FndsDtls          []FinancialInstrument10    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FndsDtls,omitempty"`
	CshAcct           []CashAccount12            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CshAcct,omitempty"`
	SctiesAcct        []SecuritiesAccount4       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SctiesAcct,omitempty"`
}

type InvestmentAccountOwnershipInformation5 struct {
	Org                Organisation2              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Org"`
	IndvPrsn           IndividualPerson10         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IndvPrsn"`
	MnyLndrgChck       MoneyLaunderingCheck1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MnyLndrgChck,omitempty"`
	XtndedMnyLndrgChck Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedMnyLndrgChck,omitempty"`
	InvstrPrflVldtn    []PartyProfileInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 InvstrPrflVldtn,omitempty"`
	OwnrshBnfcryRate   float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OwnrshBnfcryRate,omitempty"`
	ClntId             Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ClntId,omitempty"`
	FsclXmptn          bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FsclXmptn,omitempty"`
	SgntryRghtInd      bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SgntryRghtInd,omitempty"`
}

type InvestmentFundCashSettlementInformation3 struct {
	SbcptPmtInstrm    PaymentInstrument8 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SbcptPmtInstrm,omitempty"`
	RedPmtInstrm      PaymentInstrument9 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RedPmtInstrm,omitempty"`
	DvddPmtInstrm     PaymentInstrument9 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DvddPmtInstrm,omitempty"`
	SvgsPlanPmtInstrm PaymentInstrument8 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SvgsPlanPmtInstrm,omitempty"`
}

type InvestmentFundOrder4 struct {
	OrdrRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OrdrRef,omitempty"`
	MstrRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MstrRef,omitempty"`
}

// May be one of CACO, CUST, DATP, FIAG, FMCO, FACT, INVS, INVE, PAYI, REGI, TRAG, INTR, FNBR, FTAG, FIAD, DIST, CONC
type InvestmentFundRole3Code string

type InvestmentPlan4 struct {
	Frqcy            EventFrequency1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Frqcy"`
	XtndedFrqcy      Extended350Code                          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedFrqcy"`
	StartDt          ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 StartDt"`
	EndDt            ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 EndDt,omitempty"`
	Amt              ActiveCurrencyAndAmount                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Amt"`
	GrssAmtInd       bool                                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 GrssAmtInd,omitempty"`
	IncmPref         IncomePreference1Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 IncmPref,omitempty"`
	InitlNbOfInstlmt float64                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 InitlNbOfInstlmt,omitempty"`
	TtlNbOfInstlmt   float64                                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TtlNbOfInstlmt,omitempty"`
	RndgDrctn        RoundingDirection1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RndgDrctn,omitempty"`
	SctyDtls         []Repartition1                           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SctyDtls"`
	CshSttlm         InvestmentFundCashSettlementInformation3 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CshSttlm,omitempty"`
}

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max3Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CreDtTm"`
}

// May be one of PASS, NOTC, EXEM, CLMO, AUTH, POEP
type MoneyLaunderingCheck1Code string

type NameAndAddress4 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm,omitempty"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Adr"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type NewIssueAllocation1 struct {
	Rstrctd        bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Rstrctd"`
	XmptPrsnRsn    Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XmptPrsnRsn,omitempty"`
	DeMnmsAplbl    DeMinimusApplicable1    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DeMnmsAplbl,omitempty"`
	DeMnmsNotAplbl DeMinimusNotApplicable1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DeMnmsNotAplbl,omitempty"`
}

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type Organisation2 struct {
	Nm           Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm"`
	Id           PartyIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id,omitempty"`
	Purp         Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Purp,omitempty"`
	TaxtnCtry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TaxtnCtry,omitempty"`
	RegnCtry     CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RegnCtry,omitempty"`
	RegnDt       ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RegnDt,omitempty"`
	TaxIdNb      Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TaxIdNb,omitempty"`
	NtlRegnNb    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NtlRegnNb,omitempty"`
	PstlAdr      []PostalAddress3           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PstlAdr"`
	PmryComAdr   CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PmryComAdr,omitempty"`
	ScndryComAdr CommunicationAddress3      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ScndryComAdr,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmAndAdr"`
}

type PartyIdentification4Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PrtryId"`
}

type PartyProfileInformation1 struct {
	CertfctnInd  bool                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CertfctnInd"`
	VldtngPty    Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 VldtngPty,omitempty"`
	ChckngPty    Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ChckngPty,omitempty"`
	RspnsblPty   Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RspnsblPty,omitempty"`
	CertTp       CertificateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CertTp"`
	XtndedCertTp Extended350Code      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XtndedCertTp"`
	ChckngDt     ISODate              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ChckngDt,omitempty"`
	ChckngFrqcy  EventFrequency1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ChckngFrqcy,omitempty"`
	NxtRvsnDt    ISODate              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NxtRvsnDt,omitempty"`
	SlryRg       Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SlryRg,omitempty"`
	SrcOfWlth    Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SrcOfWlth,omitempty"`
}

type PaymentCard2 struct {
	Tp         CardType1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Tp"`
	Nb         Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nb"`
	HldrNm     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 HldrNm"`
	StartDt    ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 StartDt,omitempty"`
	XpryDt     ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 XpryDt"`
	CardIssrNm Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CardIssrNm,omitempty"`
	CardIssrId PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CardIssrId,omitempty"`
	SctyCd     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SctyCd,omitempty"`
	SeqNb      Max3Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SeqNb,omitempty"`
}

type PaymentInstrument8 struct {
	SttlmCcy    ActiveCurrencyCode  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SttlmCcy"`
	CshAcctDtls []CashAccount4      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CshAcctDtls"`
	PmtCardDtls PaymentCard2        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PmtCardDtls"`
	DrctDbtDtls DirectDebitMandate4 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 DrctDbtDtls"`
	Chq         bool                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Chq"`
	BkrsDrft    bool                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BkrsDrft"`
}

type PaymentInstrument9 struct {
	SttlmCcy     ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SttlmCcy"`
	CshAcctDtls  []CashAccount4     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CshAcctDtls"`
	ChqDtls      Cheque4            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ChqDtls"`
	BkrsDrftDtls Cheque4            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BkrsDrftDtls"`
}

// May be one of PASS, CPFA, SRSA, NRIN, OTHR, DRLC, SOCS, AREG, IDCD, EMID
type PersonIdentificationType1Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Ctry"`
}

type PostalAddress3 struct {
	AdrTp      AddressType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 AdrTp"`
	MlngInd    bool             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 MlngInd"`
	RegnAdrInd bool             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RegnAdrInd"`
	NmAndAdr   NameAndAddress4  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 NmAndAdr"`
}

// Must be at least 1 items long
type RICIdentifier string

// May be one of REFR, NRFR, UKNW
type Referred1Code string

type ReferredAgent1 struct {
	Rfrd          Referred1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Rfrd"`
	RfrdPlcmntAgt PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RfrdPlcmntAgt,omitempty"`
}

type Repartition1 struct {
	Pctg      float64               `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Pctg"`
	FinInstrm FinancialInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FinInstrm"`
}

// May be one of RESI, PRES, NRES
type ResidentialStatus1Code string

// May be one of RDUP, RDWN, STAN, DIST
type RoundingDirection1Code string

type RoundingParameters1 struct {
	RndgMdlus float64                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RndgMdlus,omitempty"`
	RndgDrctn RoundingDirection1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RndgDrctn"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

type SecuritiesAccount4 struct {
	Id                 AccountIdentification1        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
	Nm                 Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Nm"`
	FinInstrmSplmtryId Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FinInstrmSplmtryId,omitempty"`
	FinInstrmId        SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FinInstrmId,omitempty"`
	FinInstrmNm        Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 FinInstrmNm,omitempty"`
	Sts                AccountStatus1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Sts"`
}

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 OthrPrtryId"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02 Id"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

// May be one of WTHD, REPT, CRTF, WTRE
type TaxWithholdingMethod1Code string

// Must be at least 1 items long
type TickerIdentifier string

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
