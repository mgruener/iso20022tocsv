// Code generated by main. DO NOT EDIT.

package fxtr_017_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AgreedRate1 struct {
	XchgRate float64      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 XchgRate"`
	UnitCcy  CurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 UnitCcy,omitempty"`
	QtdCcy   CurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 QtdCcy,omitempty"`
}

// May be one of POST, PREA, UNAL
type AllocationIndicator1Code string

type AmountsAndValueDate1 struct {
	TradgSdBuyAmt  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdBuyAmt"`
	TradgSdSellAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdSellAmt"`
	SttlmDt        ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SttlmDt"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type ClearingBrokerIdentification1 struct {
	SdInd     SideIndicator1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SdInd"`
	ClrBrkrId Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrBrkrId"`
}

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Prtry"`
}

// May be one of FULL, ONEW, PART, UNCO
type CollateralisationIndicator1Code string

type ContactInformation1 struct {
	Nm       Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Nm,omitempty"`
	FaxNb    PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FaxNb,omitempty"`
	TelNb    PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TelNb,omitempty"`
	EmailAdr Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 EmailAdr,omitempty"`
}

// May be one of L, A, C, I, F, O, R, U
type CorporateSectorIdentifier1Code string

type CounterpartySideTransactionReporting1 struct {
	RptgJursdctn     Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RptgJursdctn,omitempty"`
	RptgPty          PartyIdentification73Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RptgPty,omitempty"`
	CtrPtySdUnqTxIdr []UniqueTransactionIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrPtySdUnqTxIdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 DtTm"`
}

type Document struct {
	FXTradStsAndDtlsNtfctn ForeignExchangeTradeStatusAndDetailsNotificationV03 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FXTradStsAndDtlsNtfctn"`
}

// May be no more than 42 items long
type Exact42Text string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

type ForeignExchangeTradeStatusAndDetailsNotificationV03 struct {
	StsDtls             TradeData9                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 StsDtls"`
	TradInf             TradeAgreement12          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradInf"`
	TradgSdId           TradePartyIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdId"`
	CtrPtySdId          TradePartyIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrPtySdId"`
	TradAmts            AmountsAndValueDate1      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradAmts"`
	AgrdRate            AgreedRate1               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AgrdRate"`
	TradgSdSttlmInstrs  SettlementParties29       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdSttlmInstrs,omitempty"`
	CtrPtySdSttlmInstrs SettlementParties29       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrPtySdSttlmInstrs,omitempty"`
	GnlInf              GeneralInformation4       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 GnlInf,omitempty"`
	SpltTradInf         []SplitTradeDetails1      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SpltTradInf,omitempty"`
	RgltryRptg          RegulatoryReporting4      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RgltryRptg,omitempty"`
	SplmtryData         []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SplmtryData,omitempty"`
}

type FundIdentification4 struct {
	FndId         PartyIdentification60       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FndId"`
	AcctIdWthCtdn Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AcctIdWthCtdn,omitempty"`
	CtdnId        PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtdnId,omitempty"`
}

type GeneralInformation4 struct {
	BlckInd            bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 BlckInd,omitempty"`
	RltdTradRef        Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RltdTradRef,omitempty"`
	DealgMtd           Trading1MethodCode          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 DealgMtd,omitempty"`
	BrkrId             PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 BrkrId,omitempty"`
	CtrPtyRef          Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrPtyRef,omitempty"`
	BrkrsComssn        ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 BrkrsComssn,omitempty"`
	SndrToRcvrInf      Max210Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SndrToRcvrInf,omitempty"`
	DealgBrnchTradgSd  PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 DealgBrnchTradgSd,omitempty"`
	DealgBrnchCtrPtySd PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 DealgBrnchCtrPtySd,omitempty"`
	CtctInf            ContactInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtctInf,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max105Text string

// Must be at least 1 items long
type Max10Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max4Text string

// Must be at least 1 items long
type Max52Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress8 struct {
	Nm         Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Nm"`
	Adr        PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Adr,omitempty"`
	AltrntvIdr []Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AltrntvIdr,omitempty"`
}

type PartyIdentification44 struct {
	AnyBIC     AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AnyBIC"`
	AltrntvIdr []Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AltrntvIdr,omitempty"`
}

type PartyIdentification59 struct {
	PtyNm      Max34Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PtyNm,omitempty"`
	AnyBIC     PartyIdentification44               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AnyBIC,omitempty"`
	AcctNb     Max34Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AcctNb,omitempty"`
	Adr        Max105Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Adr,omitempty"`
	ClrSysId   ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrSysId,omitempty"`
	LglNttyIdr LEIIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 LglNttyIdr,omitempty"`
}

type PartyIdentification60 struct {
	FndId      Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FndId"`
	NmAndAdr   NameAndAddress8 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 NmAndAdr,omitempty"`
	LglNttyIdr LEIIdentifier   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 LglNttyIdr,omitempty"`
}

type PartyIdentification73Choice struct {
	NmAndAdr NameAndAddress8       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 NmAndAdr"`
	AnyBIC   PartyIdentification44 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AnyBIC"`
	PtyId    PartyIdentification59 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PtyId"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Ctry"`
}

type RegulatoryReporting4 struct {
	TradgSdTxRptg          []TradingSideTransactionReporting1      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdTxRptg,omitempty"`
	CtrPtySdTxRptg         []CounterpartySideTransactionReporting1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CtrPtySdTxRptg,omitempty"`
	CntrlCtrPtyClrHs       PartyIdentification73Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CntrlCtrPtyClrHs,omitempty"`
	ClrBrkr                PartyIdentification73Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrBrkr,omitempty"`
	ClrXcptnPty            PartyIdentification73Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrXcptnPty,omitempty"`
	ClrBrkrId              ClearingBrokerIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrBrkrId,omitempty"`
	ClrThrshldInd          bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrThrshldInd,omitempty"`
	ClrdPdctId             Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ClrdPdctId,omitempty"`
	UndrlygPdctIdr         UnderlyingProductIdentifier1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 UndrlygPdctIdr,omitempty"`
	AllcnInd               AllocationIndicator1Code                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AllcnInd,omitempty"`
	CollstnInd             CollateralisationIndicator1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CollstnInd,omitempty"`
	ExctnVn                Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ExctnVn,omitempty"`
	ExctnTmstmp            DateAndDateTimeChoice                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ExctnTmstmp,omitempty"`
	NonStdFlg              bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 NonStdFlg,omitempty"`
	LkSwpId                Exact42Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 LkSwpId,omitempty"`
	FinNtrOfTheCtrPtyInd   bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FinNtrOfTheCtrPtyInd,omitempty"`
	CollPrtflInd           bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CollPrtflInd,omitempty"`
	CollPrtflCd            Max10Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CollPrtflCd,omitempty"`
	PrtflCmprssnInd        bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PrtflCmprssnInd,omitempty"`
	CorpSctrInd            CorporateSectorIdentifier1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CorpSctrInd,omitempty"`
	TradWthNonEEACtrPtyInd bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradWthNonEEACtrPtyInd,omitempty"`
	NtrgrpTradInd          bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 NtrgrpTradInd,omitempty"`
	ComrclOrTrsrFincgInd   bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 ComrclOrTrsrFincgInd,omitempty"`
	AddtlRptgInf           Max210Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AddtlRptgInf,omitempty"`
}

type SettlementParties29 struct {
	DlvryAgt    PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 DlvryAgt,omitempty"`
	Intrmy      PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Intrmy,omitempty"`
	RcvgAgt     PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RcvgAgt"`
	BnfcryInstn PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 BnfcryInstn,omitempty"`
}

// May be one of CCPL, CLNT
type SideIndicator1Code string

type SplitTradeDetails1 struct {
	StsDtls  TradeData9           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 StsDtls,omitempty"`
	TradAmts AmountsAndValueDate1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradAmts"`
	AgrdRate AgreedRate1          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AgrdRate,omitempty"`
}

type Status13Choice struct {
	Cd    TradeStatus5Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Cd"`
	Prtry Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Prtry"`
}

type Status5Choice struct {
	Cd    TradeStatus3Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Cd"`
	Prtry Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Prtry"`
}

type StatusAndSubStatus1 struct {
	StsCd    Status13Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 StsCd"`
	SubStsCd Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SubStsCd,omitempty"`
}

// May be one of NONE, PEND, SMDY, SDPG
type StatusSubType1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradeAgreement12 struct {
	TradDt        ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradDt"`
	MsgId         Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 MsgId"`
	OrgtrRef      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 OrgtrRef"`
	CmonRef       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CmonRef,omitempty"`
	AmdOrCclRsn   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AmdOrCclRsn,omitempty"`
	RltdRef       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RltdRef,omitempty"`
	PdctTp        Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PdctTp,omitempty"`
	OprTp         Max4Text               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 OprTp,omitempty"`
	OprScp        Max4Text               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 OprScp,omitempty"`
	SttlmSsnIdr   Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SttlmSsnIdr,omitempty"`
	SpltTradInd   bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SpltTradInd"`
	PmtVrssPmtInd bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PmtVrssPmtInd,omitempty"`
}

type TradeData9 struct {
	MtchgSysUnqRef     Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 MtchgSysUnqRef"`
	MtchgSysMtchgRef   Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 MtchgSysMtchgRef,omitempty"`
	MtchgSysMtchdSdRef Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 MtchgSysMtchdSdRef,omitempty"`
	StsOrgtr           Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 StsOrgtr,omitempty"`
	CurSts             StatusAndSubStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CurSts"`
	CurStsSubTp        StatusSubType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CurStsSubTp,omitempty"`
	CurStsDtTm         ISODateTime         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 CurStsDtTm,omitempty"`
	PrvsSts            Status5Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PrvsSts,omitempty"`
	AllgdTrad          bool                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 AllgdTrad,omitempty"`
	PrvsStsSubTp       StatusSubType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PrvsStsSubTp,omitempty"`
}

type TradePartyIdentification6 struct {
	SubmitgPty PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 SubmitgPty"`
	TradPty    PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradPty,omitempty"`
	FndId      []FundIdentification4       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 FndId,omitempty"`
}

// May be one of INVA, UMTC, RSCD, STLD, FMTC, RJCT, SMAU, SMNA, SMAT, SPLI, SUSP, NAUT
type TradeStatus3Code string

// May be one of INVA, FMTC, AMUI, SMAP, NAUT, RJCT, RSCD, STLD, SMAU, SMNA, SPLI, SUSP, UMTC, SMAT
type TradeStatus5Code string

// May be one of ELEC, PHON, BROK
type Trading1MethodCode string

type TradingSideTransactionReporting1 struct {
	RptgJursdctn    Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RptgJursdctn,omitempty"`
	RptgPty         PartyIdentification73Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 RptgPty,omitempty"`
	TradgSdUnqTxIdr []UniqueTransactionIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 TradgSdUnqTxIdr,omitempty"`
}

// May be one of FORW, NDFO, SPOT, SWAP
type UnderlyingProductIdentifier1Code string

type UniqueTransactionIdentifier2 struct {
	UnqTxIdr    Max52Text   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 UnqTxIdr"`
	PrrUnqTxIdr []Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03 PrrUnqTxIdr,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
