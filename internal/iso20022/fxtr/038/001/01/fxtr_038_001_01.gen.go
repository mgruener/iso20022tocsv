// Code generated by main. DO NOT EDIT.

package fxtr_038_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalInformation5 struct {
	Inf []Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Inf"`
}

// May be one of ATCN, ATSC, COMP, MISM, MISE, NOTP, OUOR, OUOS, RECE, UNRE
type AffirmStatus1Code string

type Document struct {
	FXTradConfStsAdvcAck ForeignExchangeTradeConfirmationStatusAdviceAcknowledgementV01 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 FXTradConfStsAdvcAck"`
}

type ForeignExchangeTradeConfirmationStatusAdviceAcknowledgementV01 struct {
	AdvcAckId   MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 AdvcAckId,omitempty"`
	ReqId       MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 ReqId"`
	TradDt      ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 TradDt"`
	TradId      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 TradId"`
	TradgMd     TradingModeType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 TradgMd"`
	AffirmSts   AffirmStatus1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 AffirmSts"`
	ConfSts     TradeConfirmationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 ConfSts"`
	MktId       MarketIdentification88       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 MktId"`
	AddtlInf    AdditionalInformation5       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 AddtlInf,omitempty"`
	SplmtryData []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 SplmtryData,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MarketIdentification1Choice struct {
	MktIdrCd MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 MktIdrCd"`
	Desc     Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Desc"`
}

type MarketIdentification88 struct {
	Id MarketIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Id,omitempty"`
	Tp MarketType13Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Tp"`
}

type MarketType13Choice struct {
	Cd    MarketType8Code        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Cd"`
	Prtry GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Prtry,omitempty"`
}

// May be one of COUN, INBA, OTCO, PRIM, SECM, EXCH, VARI
type MarketType8Code string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 CreDtTm"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ALST, CONF, DISA, EMCN, MISM, SCCN, SNCC, SNCN, UNCN
type TradeConfirmationStatus1Code string

// May be one of QUDR, ORDR, NETR, AUCT, MARC, BILA, ANON
type TradingModeType1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
