// Code generated by main. DO NOT EDIT.

package tsrv_006_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AdvisingPartyAdditionalInformation1 struct {
	RefNb         Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 RefNb,omitempty"`
	BkToBnfcryInf []Max2000Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 BkToBnfcryInf,omitempty"`
}

type Amendment1 struct {
	SeqNb                  Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 SeqNb"`
	DtOfIssnc              ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DtOfIssnc"`
	UdrtkgId               Undertaking7            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgId"`
	AdvsgPty               PartyIdentification43   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AdvsgPty,omitempty"`
	ScndAdvsgPty           PartyIdentification43   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 ScndAdvsgPty,omitempty"`
	TermntnDtls            UndertakingTermination3 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 TermntnDtls,omitempty"`
	UdrtkgAmtAdjstmnt      UndertakingAmount2      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgAmtAdjstmnt,omitempty"`
	NewXpryDtls            ExpiryDetails1          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewXpryDtls,omitempty"`
	NewBnfcry              PartyIdentification43   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewBnfcry,omitempty"`
	NewUdrtkgTermsAndConds []Narrative1            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewUdrtkgTermsAndConds,omitempty"`
	LclUdrtkg              Undertaking11           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 LclUdrtkg,omitempty"`
	BnfcryCnsntReqInd      bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 BnfcryCnsntReqInd,omitempty"`
	DlvryChanl             CommunicationChannel1   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DlvryChanl,omitempty"`
	NclsdFile              []Document9             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NclsdFile,omitempty"`
	AddtlInf               []Max2000Text           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AddtlInf,omitempty"`
}

type Amendment2 struct {
	UdrtkgAmdmntMsg      UndertakingAmendmentMessage1        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgAmdmntMsg"`
	FrstAdvsgPtyAddtlInf AdvisingPartyAdditionalInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 FrstAdvsgPtyAddtlInf,omitempty"`
	ScndAdvsgPtyAddtlInf AdvisingPartyAdditionalInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 ScndAdvsgPtyAddtlInf,omitempty"`
	ConfDtls             UndertakingConfirmation1            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 ConfDtls,omitempty"`
	DgtlSgntr            []PartyAndSignature2                `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DgtlSgntr,omitempty"`
}

type Amount1Choice struct {
	IncrAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 IncrAmt"`
	DcrAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DcrAmt"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type AutoExtend1Choice struct {
	Days  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Days"`
	Mnths float64 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Mnths"`
	Yrs   float64 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Yrs"`
	Dt    ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Dt"`
}

type AutoExtension1 struct {
	Prd            AutoExtend1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prd,omitempty"`
	FnlXpryDt      ISODate           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 FnlXpryDt,omitempty"`
	NonXtnsnNtfctn []NonExtension1   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NonXtnsnNtfctn,omitempty"`
}

type CommunicationChannel1 struct {
	Mtd         ExternalChannel1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Mtd"`
	DlvrToPtyTp PartyType1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DlvrToPtyTp"`
	DlvrToNm    Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DlvrToNm,omitempty"`
	DlvrToAdr   PostalAddress6       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DlvrToAdr,omitempty"`
}

type CommunicationMethod1Choice struct {
	Cd    ExternalChannel1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type ContactDetails2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NmPrfx,omitempty"`
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Nm,omitempty"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 FaxNb,omitempty"`
	EmailAdr Max2048Text     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 EmailAdr,omitempty"`
	Othr     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Othr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DtTm"`
}

type DateAndPlaceOfBirth struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 CtryOfBirth"`
}

type Document struct {
	UdrtkgAmdmntAdvc UndertakingAmendmentAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgAmdmntAdvc"`
}

type Document9 struct {
	Tp        UndertakingDocumentType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Tp"`
	Id        Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id"`
	Frmt      DocumentFormat1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Frmt,omitempty"`
	Nclsr     Max2MBBinary                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Nclsr"`
	DgtlSgntr PartyAndSignature2             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DgtlSgntr,omitempty"`
}

type DocumentFormat1Choice struct {
	Cd    ExternalDocumentFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type ExpiryDetails1 struct {
	XpryTerms    ExpiryTerms1  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 XpryTerms,omitempty"`
	AddtlXpryInf []Max2000Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AddtlXpryInf,omitempty"`
}

type ExpiryTerms1 struct {
	DtTm       DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DtTm,omitempty"`
	AutoXtnsn  AutoExtension1        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AutoXtnsn,omitempty"`
	Cond       Max2000Text           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cond,omitempty"`
	OpnEnddInd bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 OpnEnddInd,omitempty"`
}

// Must be at least 1 items long
type ExternalChannel1Code string

// Must be at least 1 items long
type ExternalDocumentFormat1Code string

// Must be at least 1 items long
type ExternalNarrativeType1Code string

// Must be at least 1 items long
type ExternalOrganisationIdentification1Code string

// Must be at least 1 items long
type ExternalPersonIdentification1Code string

// Must be at least 1 items long
type ExternalTypeOfParty1Code string

// Must be at least 1 items long
type ExternalUndertakingDocumentType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Issr,omitempty"`
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id"`
	SchmeNm OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Issr,omitempty"`
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id"`
	SchmeNm PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max20000Text string

// Must be at least 1 items long
type Max2000Text string

// Must be at least 1 items long
type Max2048Text string

type Max2MBBinary []byte

func (t *Max2MBBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max2MBBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type Narrative1 struct {
	Tp  NarrativeType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Tp,omitempty"`
	Txt []Max20000Text       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Txt"`
}

type NarrativeType1Choice struct {
	Cd    ExternalNarrativeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type NonExtension1 struct {
	NtfctnPrd     float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NtfctnPrd,omitempty"`
	NtfctnMtd     CommunicationMethod1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NtfctnMtd,omitempty"`
	NtfctnRcptTp  PartyType1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NtfctnRcptTp,omitempty"`
	NtfctnRcptNm  Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NtfctnRcptNm,omitempty"`
	NtfctnRcptAdr PostalAddress6             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NtfctnRcptAdr,omitempty"`
}

type OrganisationIdentification8 struct {
	AnyBIC AnyBICIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AnyBIC,omitempty"`
	Othr   []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Othr,omitempty"`
}

type OrganisationIdentificationSchemeName1Choice struct {
	Cd    ExternalOrganisationIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type Party11Choice struct {
	OrgId  OrganisationIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 OrgId"`
	PrvtId PersonIdentification5       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 PrvtId"`
}

type PartyAndSignature2 struct {
	Pty   PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Pty"`
	Sgntr ProprietaryData3      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Sgntr"`
}

type PartyIdentification43 struct {
	Nm        Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Nm,omitempty"`
	PstlAdr   PostalAddress6  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 PstlAdr,omitempty"`
	Id        Party11Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id,omitempty"`
	CtryOfRes CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 CtryOfRes,omitempty"`
	CtctDtls  ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 CtctDtls,omitempty"`
}

type PartyType1Choice struct {
	Cd    ExternalTypeOfParty1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type PersonIdentification5 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DtAndPlcOfBirth,omitempty"`
	Othr            []GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Othr,omitempty"`
}

type PersonIdentificationSchemeName1Choice struct {
	Cd    ExternalPersonIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AdrLine,omitempty"`
}

type ProprietaryData3 struct {
	Item string `xml:",any"`
}

type TerminationReason1Choice struct {
	Cd    TerminationReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

// May be one of REFU, NOAC, BUFI, WOEX
type TerminationReason1Code string

type Undertaking11 struct {
	NewUdrtkgAmt           UndertakingAmount2    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewUdrtkgAmt,omitempty"`
	NewXpryDtls            ExpiryDetails1        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewXpryDtls,omitempty"`
	NewBnfcry              PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewBnfcry,omitempty"`
	NewUdrtkgTermsAndConds Narrative1            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 NewUdrtkgTermsAndConds,omitempty"`
	DlvryChanl             CommunicationChannel1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DlvryChanl,omitempty"`
}

type Undertaking7 struct {
	Id   Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Id"`
	Issr PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Issr"`
}

type UndertakingAmendmentAdviceV01 struct {
	AdvsgPty             PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AdvsgPty"`
	ScndAdvsgPty         PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 ScndAdvsgPty,omitempty"`
	DtOfAdvc             ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DtOfAdvc"`
	UdrtkgAmdmntAdvcDtls Amendment2            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgAmdmntAdvcDtls"`
	BkToBkInf            []Max2000Text         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 BkToBkInf,omitempty"`
	DgtlSgntr            PartyAndSignature2    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DgtlSgntr,omitempty"`
}

type UndertakingAmendmentMessage1 struct {
	UdrtkgAmdmntDtls Amendment1         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 UdrtkgAmdmntDtls"`
	DgtlSgntr        PartyAndSignature2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 DgtlSgntr,omitempty"`
}

type UndertakingAmount2 struct {
	AmtChc   Amount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AmtChc"`
	AddtlInf []Max2000Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AddtlInf,omitempty"`
}

type UndertakingConfirmation1 struct {
	Cnfrmr PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cnfrmr"`
	RefNb  Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 RefNb"`
	Dt     DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Dt"`
	Conf   []Max2000Text         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Conf,omitempty"`
}

type UndertakingDocumentType1Choice struct {
	Cd    ExternalUndertakingDocumentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Cd"`
	Prtry GenericIdentification1               `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Prtry"`
}

type UndertakingTermination3 struct {
	FctvDt   ISODate                  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 FctvDt"`
	Rsn      TerminationReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 Rsn,omitempty"`
	AddtlInf []Max2000Text            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01 AddtlInf,omitempty"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
