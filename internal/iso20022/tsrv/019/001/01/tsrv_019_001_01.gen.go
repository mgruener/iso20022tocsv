// Code generated by main. DO NOT EDIT.

package tsrv_019_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICFIIdentifier string

type BranchAndFinancialInstitutionIdentification5 struct {
	FinInstnId FinancialInstitutionIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 FinInstnId"`
	BrnchId    BranchData2                         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BrnchId,omitempty"`
}

type BranchData2 struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id,omitempty"`
	Nm      Max140Text     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PstlAdr PostalAddress6 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstlAdr,omitempty"`
}

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 ClrSysId,omitempty"`
	MmbId    Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 MmbId"`
}

type ContactDetails2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 NmPrfx,omitempty"`
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 FaxNb,omitempty"`
	EmailAdr Max2048Text     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 EmailAdr,omitempty"`
	Othr     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndPlaceOfBirth struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtryOfBirth"`
}

type Document struct {
	UdrtkgStsRpt UndertakingStatusReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 UdrtkgStsRpt"`
}

type Document9 struct {
	Tp        UndertakingDocumentType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Tp"`
	Id        Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	Frmt      DocumentFormat1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Frmt,omitempty"`
	Nclsr     Max2MBBinary                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nclsr"`
	DgtlSgntr PartyAndSignature2             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 DgtlSgntr,omitempty"`
}

type DocumentFormat1Choice struct {
	Cd    ExternalDocumentFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry GenericIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

// Must be at least 1 items long
type ExternalDocumentFormat1Code string

// Must be at least 1 items long
type ExternalFinancialInstitutionIdentification1Code string

// Must be at least 1 items long
type ExternalOrganisationIdentification1Code string

// Must be at least 1 items long
type ExternalPersonIdentification1Code string

// Must be at least 1 items long
type ExternalStatusReason1Code string

// Must be at least 1 items long
type ExternalUndertakingAmountType1Code string

// Must be at least 1 items long
type ExternalUndertakingDocumentType1Code string

// Must be at least 1 items long
type ExternalUndertakingStatusCategory1Code string

type FinancialIdentificationSchemeName1Choice struct {
	Cd    ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

type FinancialInstitutionIdentification8 struct {
	BICFI       BICFIIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BICFI,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 ClrSysMmbId,omitempty"`
	Nm          Max140Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PstlAdr     PostalAddress6                      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstlAdr,omitempty"`
	Othr        GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	SchmeNm FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Issr,omitempty"`
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	SchmeNm OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Issr,omitempty"`
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	SchmeNm PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISONormalisedDateTime time.Time

func (t *ISONormalisedDateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISONormalisedDateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max105Text string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max2000Text string

// Must be at least 1 items long
type Max2048Text string

type Max2MBBinary []byte

func (t *Max2MBBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max2MBBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type OrganisationIdentification4 struct {
	BICOrBEI AnyBICIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BICOrBEI,omitempty"`
	Othr     []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

type OrganisationIdentification7 struct {
	AnyBIC AnyBICIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AnyBIC,omitempty"`
	Othr   []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

type OrganisationIdentification8 struct {
	AnyBIC AnyBICIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AnyBIC,omitempty"`
	Othr   []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

type OrganisationIdentificationSchemeName1Choice struct {
	Cd    ExternalOrganisationIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

type OriginalMessage1 struct {
	MsgDefIdr Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 MsgDefIdr"`
	Fr        Party9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Fr"`
	To        Party9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 To"`
	BizMsgIdr Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BizMsgIdr"`
	CreDt     ISONormalisedDateTime `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CreDt"`
	CpyDplct  CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CpyDplct,omitempty"`
}

type Party10Choice struct {
	OrgId  OrganisationIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 OrgId"`
	PrvtId PersonIdentification5       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PrvtId"`
}

type Party11Choice struct {
	OrgId  OrganisationIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 OrgId"`
	PrvtId PersonIdentification5       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PrvtId"`
}

type Party6Choice struct {
	OrgId  OrganisationIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 OrgId"`
	PrvtId PersonIdentification5       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PrvtId"`
}

type Party9Choice struct {
	OrgId PartyIdentification42                        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 OrgId"`
	FIId  BranchAndFinancialInstitutionIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 FIId"`
}

type PartyAndSignature2 struct {
	Pty   PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Pty"`
	Sgntr ProprietaryData3      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Sgntr"`
}

type PartyIdentification32 struct {
	Nm        Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PstlAdr   PostalAddress6  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstlAdr,omitempty"`
	Id        Party6Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id,omitempty"`
	CtryOfRes CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtryOfRes,omitempty"`
	CtctDtls  ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtctDtls,omitempty"`
}

type PartyIdentification42 struct {
	Nm        Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PstlAdr   PostalAddress6  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstlAdr,omitempty"`
	Id        Party10Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id,omitempty"`
	CtryOfRes CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtryOfRes,omitempty"`
	CtctDtls  ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtctDtls,omitempty"`
}

type PartyIdentification43 struct {
	Nm        Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Nm,omitempty"`
	PstlAdr   PostalAddress6  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstlAdr,omitempty"`
	Id        Party11Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id,omitempty"`
	CtryOfRes CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtryOfRes,omitempty"`
	CtctDtls  ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtctDtls,omitempty"`
}

type PersonIdentification5 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 DtAndPlcOfBirth,omitempty"`
	Othr            []GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Othr,omitempty"`
}

type PersonIdentificationSchemeName1Choice struct {
	Cd    ExternalPersonIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AdrLine,omitempty"`
}

type ProprietaryData3 struct {
	Item string `xml:",any"`
}

type ReportedAmount1 struct {
	Id  Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	Tp  ExternalUndertakingAmountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Tp"`
	Amt ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Amt"`
}

type StatusReason6Choice struct {
	Cd    ExternalStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

type StatusReasonInformation8 struct {
	Orgtr    PartyIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Orgtr,omitempty"`
	Rsn      StatusReason6Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Rsn,omitempty"`
	AddtlInf []Max105Text          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AddtlInf,omitempty"`
}

type Undertaking8 struct {
	Id           Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Id"`
	Issr         PartyIdentification43 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Issr"`
	ApplcntRefNb Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 ApplcntRefNb,omitempty"`
	BnfcryRefNb  Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 BnfcryRefNb,omitempty"`
}

type UndertakingDocumentType1Choice struct {
	Cd    ExternalUndertakingDocumentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Cd"`
	Prtry GenericIdentification1               `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Prtry"`
}

// May be one of ACCP, NCON, REJT, WTHD, AMTC, AMTU
type UndertakingStatus3Code string

type UndertakingStatusAdvice1 struct {
	InitgPty      PartyIdentification43                  `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 InitgPty"`
	UdrtkgId      Undertaking8                           `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 UdrtkgId,omitempty"`
	AmdmntSeqNb   float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AmdmntSeqNb,omitempty"`
	AdvsgPtyRefNb Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AdvsgPtyRefNb,omitempty"`
	CnfrmrRefNb   Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 CnfrmrRefNb,omitempty"`
	StsCtgy       ExternalUndertakingStatusCategory1Code `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 StsCtgy"`
	Sts           UndertakingStatus3Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 Sts"`
	StsRsn        []StatusReasonInformation8             `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 StsRsn,omitempty"`
	RptdAmt       []ReportedAmount1                      `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 RptdAmt,omitempty"`
	OrgnlMsgDtls  OriginalMessage1                       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 OrgnlMsgDtls,omitempty"`
	NclsdFile     []Document9                            `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 NclsdFile,omitempty"`
	AddtlInf      []Max2000Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 AddtlInf,omitempty"`
}

type UndertakingStatusReportV01 struct {
	UdrtkgStsRptDtls UndertakingStatusAdvice1 `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 UdrtkgStsRptDtls"`
	DgtlSgntr        PartyAndSignature2       `xml:"urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01 DgtlSgntr,omitempty"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
