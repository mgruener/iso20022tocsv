// Code generated by main. DO NOT EDIT.

package seev_045_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DtTm"`
}

// May be one of FIFO, LIFO
type DateCalculationMethod1Code string

type DateCode20Choice struct {
	Cd    DateType1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Prtry"`
}

type DateFormat46Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Dt"`
	DtCd DateCode20Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DtCd"`
}

// May be one of UKWN
type DateType1Code string

// May be one of NEWM, REPL
type DisclosureRequestType1Code string

type Document struct {
	ShrhldrsIdDsclsrReq ShareholdersIdentificationDisclosureRequestV02 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ShrhldrsIdDsclsrReq"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Adr,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Tp"`
}

type PartyAddress1 struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AnyBIC,omitempty"`
	PstlAdr  PostalAddress26         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PstlAdr,omitempty"`
	EmailAdr Max256Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 EmailAdr,omitempty"`
	URLAdr   Max2048Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 URLAdr,omitempty"`
}

type PartyIdentification129Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 NmAndAdr"`
	LEI      LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 LEI"`
}

type PartyIdentification203Choice struct {
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PrtryId"`
	LEI     LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 LEI"`
}

type PartyIdentification214 struct {
	Id          PartyIdentification203Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Id"`
	RcptNm      Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 RcptNm"`
	RspnRcptAdr PartyAddress1                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 RspnRcptAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Ctry"`
}

type PostalAddress26 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 BldgNb,omitempty"`
	PstBx       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PstBx,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Ctry"`
}

type RequestShareHeldDate1Choice struct {
	DtClctnMtd  DateCalculationMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DtClctnMtd"`
	DtClctnDesc Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DtClctnDesc"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Desc,omitempty"`
}

type ShareholdersIdentificationDisclosureRequestV02 struct {
	IssrDsclsrReqId      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 IssrDsclsrReqId"`
	DsclsrReqTp          DisclosureRequestType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DsclsrReqTp"`
	FwdReqInd            bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 FwdReqInd,omitempty"`
	RspnThrghChainInd    bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 RspnThrghChainInd,omitempty"`
	ShrhldrRghtsDrctvInd bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ShrhldrRghtsDrctvInd,omitempty"`
	FinInstrmId          SecurityIdentification19     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 FinInstrmId"`
	ShrhldrsDsclsrRcrdDt DateFormat46Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ShrhldrsDsclsrRcrdDt"`
	ShrsQtyThrshld       float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ShrsQtyThrshld,omitempty"`
	ReqShrHeldDt         RequestShareHeldDate1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 ReqShrHeldDt,omitempty"`
	DsclsrRspnRcpt       PartyIdentification214       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DsclsrRspnRcpt"`
	IssrDsclsrDdln       DateFormat46Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 IssrDsclsrDdln"`
	DsclsrRspnDdln       DateFormat46Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 DsclsrRspnDdln,omitempty"`
	Issr                 PartyIdentification129Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Issr,omitempty"`
	SplmtryData          []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.045.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
