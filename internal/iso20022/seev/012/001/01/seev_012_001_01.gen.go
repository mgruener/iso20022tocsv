// Code generated by main. DO NOT EDIT.

package seev_012_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification2Choice struct {
	CshAcctId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CshAcctId"`
	SctiesAcctId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctiesAcctId"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AgentCAElectionAdviceV01 struct {
	Id                DocumentIdentification8               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	ElctnAdvcTpAndLkg ElectionAdviceFunction1               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 ElctnAdvcTpAndLkg"`
	CorpActnGnlInf    CorporateActionInformation1           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CorpActnGnlInf"`
	ElctnDtls         CorporateActionElection3              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 ElctnDtls"`
	AddtlInf          CorporateActionAdditionalInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AddtlInf,omitempty"`
	CtctDtls          ContactPerson1                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CtctDtls,omitempty"`
}

type AlternateSecurityIdentification3 struct {
	Id         Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

type BeneficialOwner1 struct {
	BnfclOwnrId    PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BnfclOwnrId"`
	AddtlId        GenericIdentification16                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AddtlId,omitempty"`
	Ntlty          CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Ntlty,omitempty"`
	DmclCtry       CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DmclCtry,omitempty"`
	NonDmclCtry    CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 NonDmclCtry,omitempty"`
	CertfctnInd    bool                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CertfctnInd,omitempty"`
	CertfctnTp     BeneficiaryCertificationType1FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CertfctnTp,omitempty"`
	DclrtnDtls     Max350Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DclrtnDtls,omitempty"`
	SctyId         SecurityIdentification7                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctyId,omitempty"`
	ElctdSctiesQty UnitOrFaceAmount1Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 ElctdSctiesQty"`
}

// May be one of ACCI, DOMI, FULL, QIBB, TRBD, NCOM
type BeneficiaryCertificationType1Code string

type BeneficiaryCertificationType1FormatChoice struct {
	Cd    BeneficiaryCertificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

type CashAccount19 struct {
	CdtDbtInd  CreditDebitCode              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CdtDbtInd"`
	AcctOwnrId PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctOwnrId,omitempty"`
	AcctId     AccountIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctId"`
}

type CashAccountIdentification1Choice struct {
	IBAN     IBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 IBAN"`
	BBAN     BBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BBAN"`
	UPIC     UPICIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 UPIC"`
	DmstAcct SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DmstAcct"`
}

type ContactIdentification4 struct {
	Nm       Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Nm"`
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 NmPrfx,omitempty"`
	GvnNm    Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 GvnNm,omitempty"`
	Role     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Role,omitempty"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PhneNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 EmailAdr,omitempty"`
}

type ContactPerson1 struct {
	CtctPrsn ContactIdentification4     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CtctPrsn"`
	InstnId  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 InstnId,omitempty"`
}

type CorporateActionAdditionalInformation1 struct {
	BnfclOwnrDtls []BeneficialOwner1                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BnfclOwnrDtls,omitempty"`
	RegnDtls      Max350Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 RegnDtls,omitempty"`
	RcvrId        PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 RcvrId,omitempty"`
	CertfctnInd   bool                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CertfctnInd,omitempty"`
	CertfctnTp    BeneficiaryCertificationType1FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CertfctnTp,omitempty"`
	DlvryDtls     []ProceedsDelivery1                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DlvryDtls,omitempty"`
	AddtlInstr    Max350Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AddtlInstr,omitempty"`
}

type CorporateActionCashMovements2 struct {
	PstngId   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngId,omitempty"`
	PstngDtTm DateAndDateTimeChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngDtTm,omitempty"`
	PstngAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngAmt"`
	AcctDtls  []CashAccount19         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctDtls"`
}

type CorporateActionElection3 struct {
	AcctDtls              SecuritiesAccount7                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctDtls,omitempty"`
	OptnTp                CorporateActionOption1FormatChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 OptnTp,omitempty"`
	OptnNb                Exact3NumericText                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 OptnNb,omitempty"`
	InstdUndrlygSctiesQty UnitOrFaceAmount1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 InstdUndrlygSctiesQty,omitempty"`
	InstdSctiesQtyToRcv   UnitOrFaceAmount1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 InstdSctiesQtyToRcv,omitempty"`
	PropsdRate            float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PropsdRate,omitempty"`
	CshMvmntDtls          []CorporateActionCashMovements2      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CshMvmntDtls,omitempty"`
	SctiesMvmntDtls       []CorporateActionSecuritiesMovement2 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctiesMvmntDtls,omitempty"`
}

// May be one of GENL, DISN, REOR
type CorporateActionEventProcessingType1Code string

type CorporateActionEventProcessingType1FormatChoice struct {
	Cd    CorporateActionEventProcessingType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

// May be one of ACTV, ATTI, BIDS, BONU, BPUT, BRUP, CAPG, CAPI, CERT, CHAN, CLSA, CONS, CONV, COOP, DECR, DETI, DFLT, DLST, DRAW, DRIP, DSCL, DTCH, DVCA, DVOP, DVSC, DVSE, EXOF, EXRI, EXTM, EXWA, INCR, INTR, LIQU, MCAL, MRGR, ODLT, PARI, PCAL, PDEF, PINK, PLAC, PPMT, PRED, PRII, PRIO, REDM, REDO, REMK, RHDI, RHTS, SHPR, SMAL, SOFF, SPLF, SPLR, SUSP, TEND, TREC, WRTH, WTRC, OTHR
type CorporateActionEventType2Code string

type CorporateActionEventType2FormatChoice struct {
	Cd    CorporateActionEventType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

type CorporateActionInformation1 struct {
	AgtId             PartyIdentification2Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AgtId"`
	IssrCorpActnId    Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 IssrCorpActnId,omitempty"`
	CorpActnPrcgId    Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CorpActnPrcgId,omitempty"`
	EvtTp             CorporateActionEventType2FormatChoice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 EvtTp"`
	MndtryVlntryEvtTp CorporateActionMandatoryVoluntary1FormatChoice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 MndtryVlntryEvtTp"`
	EvtPrcgTp         CorporateActionEventProcessingType1FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 EvtPrcgTp,omitempty"`
	UndrlygScty       FinancialInstrumentDescription3                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 UndrlygScty"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionMandatoryVoluntary1FormatChoice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

type CorporateActionOption1FormatChoice struct {
	Cd    CorporateActionOptionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

// May be one of BSPL, BUYA, CASE, CASH, CEXC, CTEN, CONN, CONY, EXER, LAPS, MPUT, NOAC, OFFR, OVER, SECU, SLLE, SPLI, NOQU, OTHR, QINV
type CorporateActionOptionType1Code string

type CorporateActionSecuritiesMovement2 struct {
	SctyId    SecurityIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctyId"`
	PstngDtTm DateAndDateTimeChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngDtTm,omitempty"`
	PstngId   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngId,omitempty"`
	PstngQty  UnitOrFaceAmount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstngQty"`
	AcctDtls  []SecuritiesAccount9    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctDtls"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 DtTm"`
}

type Document struct {
	AgtCAElctnAdvc AgentCAElectionAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AgtCAElctnAdvc"`
}

type DocumentIdentification8 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CreDtTm,omitempty"`
}

type ElectionAdviceFunction1 struct {
	ElctnTp               ElectionType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 ElctnTp"`
	PrvsAgtCAElctnAdvcId  DocumentIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PrvsAgtCAElctnAdvcId,omitempty"`
	AgtCAElctnStsAdvcId   DocumentIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AgtCAElctnStsAdvcId,omitempty"`
	AgtCAElctnAmdmntReqId DocumentIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AgtCAElctnAmdmntReqId,omitempty"`
}

// May be one of NEWM, CHAN
type ElectionType1Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

type FinancialInstrumentDescription3 struct {
	SctyId     SecurityIdentification7    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctyId"`
	PlcOfListg MICIdentifier              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PlcOfListg,omitempty"`
	SfkpgPlc   PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SfkpgPlc,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Issr,omitempty"`
}

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Issr"`
}

type GenericIdentification16 struct {
	Id   Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
	IdTp PersonIdentificationType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 IdTp"`
	Issr Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Issr,omitempty"`
}

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 NmAndAdr"`
}

type PersonIdentificationType3Choice struct {
	Cd    PersonIdentificationType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

// May be one of ARNU, CCPT, EMID, DRLC, FINN, TXID
type PersonIdentificationType3Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Ctry"`
}

type ProceedsDelivery1 struct {
	SctiesAcctId Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctiesAcctId"`
	CshAcctId    CashAccountIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CshAcctId"`
	AcctOwnrId   PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctOwnrId,omitempty"`
	AcctSvcrId   PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctSvcrId,omitempty"`
}

type SecuritiesAccount7 struct {
	AcctOwnrId PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctOwnrId,omitempty"`
	AcctId     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctId"`
}

type SecuritiesAccount9 struct {
	CdtDbtInd    CreditDebitCode                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 CdtDbtInd"`
	AcctOwnrId   PartyIdentification2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctOwnrId,omitempty"`
	AcctId       Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 AcctId"`
	BalTp        SecuritiesBalanceType10FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 BalTp,omitempty"`
	OptnTp       CorporateActionOption1FormatChoice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 OptnTp,omitempty"`
	OptnNb       Exact3NumericText                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 OptnNb,omitempty"`
	SctyHldgForm FormOfSecurity1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 SctyHldgForm,omitempty"`
}

// May be one of AVLB, REST, RDIS, RREM
type SecuritiesBalanceType10Code string

type SecuritiesBalanceType10FormatChoice struct {
	Cd    SecuritiesBalanceType10Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Cd"`
	Prtry GenericIdentification13     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Prtry"`
}

type SecurityIdentification7 struct {
	ISIN   ISINIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 ISIN"`
	OthrId AlternateSecurityIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 OthrId"`
	Desc   Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Desc,omitempty"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Id"`
}

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

type UnitOrFaceAmount1Choice struct {
	Unit    float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 Unit"`
	FaceAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.012.001.01 FaceAmt"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
