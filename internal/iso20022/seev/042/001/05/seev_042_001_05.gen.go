// Code generated by main. DO NOT EDIT.

package seev_042_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification33 struct {
	SfkpgAcct         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SfkpgAcct"`
	AcctOwnr          PartyIdentification92Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 AcctOwnr,omitempty"`
	SfkpgPlc          SafekeepingPlaceFormat8Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SfkpgPlc,omitempty"`
	CorpActnEvtAndBal []CorporateActionEventAndBalance9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CorpActnEvtAndBal,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BalanceFormat5Choice struct {
	Bal         SignedQuantityFormat7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Bal"`
	ElgblBal    SignedQuantityFormat6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ElgblBal"`
	NotElgblBal SignedQuantityFormat6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 NotElgblBal"`
}

type CorporateActionBalanceDetails30 struct {
	TtlElgblBal      Quantity17Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TtlElgblBal"`
	UinstdBal        BalanceFormat5Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 UinstdBal"`
	TtlInstdBalDtls  InstructedBalanceDetails5 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TtlInstdBalDtls"`
	BlckdBal         SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 BlckdBal,omitempty"`
	BrrwdBal         SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 BrrwdBal,omitempty"`
	CollInBal        SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CollInBal,omitempty"`
	CollOutBal       SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CollOutBal,omitempty"`
	OnLnBal          SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OnLnBal,omitempty"`
	OutForRegnBal    SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OutForRegnBal,omitempty"`
	SttlmPosBal      SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SttlmPosBal,omitempty"`
	StrtPosBal       SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StrtPosBal,omitempty"`
	TradDtPosBal     SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TradDtPosBal,omitempty"`
	InTrnsShipmntBal SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 InTrnsShipmntBal,omitempty"`
	RegdBal          SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 RegdBal,omitempty"`
	OblgtdBal        SignedQuantityFormat6     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OblgtdBal,omitempty"`
	PdgDlvryBal      []PendingBalance3         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PdgDlvryBal,omitempty"`
	PdgRctBal        []PendingBalance3         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PdgRctBal,omitempty"`
}

// May be one of MKDT, RDDT, EARD
type CorporateActionDeadline1Code string

type CorporateActionEventAndBalance9 struct {
	GnlInf      EventInformation7               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 GnlInf"`
	UndrlygScty SecurityIdentification19        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 UndrlygScty"`
	Bal         CorporateActionBalanceDetails30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Bal,omitempty"`
	SplmtryData []SupplementaryData1            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SplmtryData,omitempty"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, CLSA, COOP, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH
type CorporateActionEventType15Code string

type CorporateActionEventType32Choice struct {
	Cd    CorporateActionEventType15Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type CorporateActionInstructionStatementReportV05 struct {
	Pgntn           Pagination                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Pgntn"`
	StmtGnlDtls     Statement47               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StmtGnlDtls"`
	AcctAndStmtDtls []AccountIdentification33 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 AcctAndStmtDtls"`
	SplmtryData     []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SplmtryData,omitempty"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionMandatoryVoluntary3Choice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type CorporateActionOption18Choice struct {
	Cd    CorporateActionOption7Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

// May be one of ABST, AMGT, BSPL, BUYA, CASE, CASH, CEXC, CONN, CONY, CTEN, EXER, LAPS, MNGT, MPUT, NOAC, NOQU, OFFR, OTHR, OVER, PROX, QINV, SECU, SLLE, SPLI, PRUN
type CorporateActionOption7Code string

// May be one of MASE, SAME
type CorporateActionStatementReportingType1Code string

// May be one of MISS, ALLL
type CorporateActionStatementType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DtTm"`
}

type DateOrDateTimePeriodChoice struct {
	Dt   DatePeriodDetails     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Dt"`
	DtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DtTm"`
}

type DatePeriodDetails struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ToDt"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ToDtTm"`
}

type DeadlineCode3Choice struct {
	Cd    CorporateActionDeadline1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type DefaultProcessingOrStandingInstruction1Choice struct {
	DfltOptnInd bool `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DfltOptnInd"`
	StgInstrInd bool `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StgInstrInd"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	CorpActnInstrStmtRpt CorporateActionInstructionStatementReportV05 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CorpActnInstrStmtRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

type EventInformation7 struct {
	CorpActnEvtId      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CorpActnEvtId"`
	OffclCorpActnEvtId Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OffclCorpActnEvtId,omitempty"`
	EvtTp              CorporateActionEventType32Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 EvtTp"`
	MndtryVlntryEvtTp  CorporateActionMandatoryVoluntary3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 MndtryVlntryEvtTp"`
	LastNtfctnId       NotificationIdentification3              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 LastNtfctnId,omitempty"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 AmtsdVal"`
}

type Frequency25Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type InstructedBalanceDetails5 struct {
	TtlInstdBal BalanceFormat5Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TtlInstdBal"`
	OptnDtls    []InstructedCorporateActionOption6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OptnDtls,omitempty"`
}

type InstructedCorporateActionOption6 struct {
	OptnNb   Exact3NumericText                             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OptnNb,omitempty"`
	OptnTp   CorporateActionOption18Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OptnTp"`
	InstdBal BalanceFormat5Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 InstdBal"`
	DfltActn DefaultProcessingOrStandingInstruction1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DfltActn,omitempty"`
	DdlnDtTm ISODateTime                                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DdlnDtTm"`
	DdlnTp   DeadlineCode3Choice                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 DdlnTp"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

type NotificationIdentification3 struct {
	Id      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
	CreDtTm DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 CreDtTm,omitempty"`
}

type OriginalAndCurrentQuantities6 struct {
	ShrtLngPos ShortLong1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ShrtLngPos"`
	FaceAmt    float64        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 FaceAmt"`
	AmtsdVal   float64        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 AmtsdVal"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Tp"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 LastPgInd"`
}

type PartyIdentification92Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 AnyBIC"`
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PrtryId"`
}

type PendingBalance3 struct {
	Bal    SignedQuantityFormat6               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Bal"`
	PdgTxs []SettlementTypeAndIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PdgTxs,omitempty"`
}

type ProprietaryQuantity7 struct {
	ShrtLngPos ShortLong1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ShrtLngPos,omitempty"`
	Qty        float64                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Qty"`
	QtyTp      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 QtyTp"`
	Issr       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Issr"`
	SchmeNm    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SchmeNm,omitempty"`
}

type ProprietaryQuantity8 struct {
	Qty     float64                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Qty"`
	QtyTp   Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 QtyTp"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SchmeNm,omitempty"`
}

type Quantity17Choice struct {
	QtyChc   Quantity18Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 QtyChc"`
	PrtryQty ProprietaryQuantity7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PrtryQty"`
}

type Quantity18Choice struct {
	OrgnlAndCurFaceAmt OriginalAndCurrentQuantities6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OrgnlAndCurFaceAmt"`
	SgndQty            SignedQuantityFormat6         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SgndQty"`
}

type Quantity19Choice struct {
	Qty      FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Qty"`
	PrtryQty ProprietaryQuantity8               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PrtryQty"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat8Choice struct {
	Id      SafekeepingPlaceTypeAndText6             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TpAndId"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Id,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Desc,omitempty"`
}

type SettlementTypeAndIdentification20 struct {
	Pmt     DeliveryReceiptType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Pmt"`
	TxId    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 TxId"`
	SttlmDt DateAndDateTimeChoice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 SttlmDt,omitempty"`
}

// May be one of SHOR, LONG
type ShortLong1Code string

type SignedQuantityFormat6 struct {
	ShrtLngPos ShortLong1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ShrtLngPos"`
	Qty        FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Qty"`
}

type SignedQuantityFormat7 struct {
	ShrtLngPos ShortLong1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ShrtLngPos"`
	QtyChc     Quantity19Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 QtyChc"`
}

type Statement47 struct {
	StmtTp        CorporateActionStatementType1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StmtTp"`
	RptgTp        CorporateActionStatementReportingType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 RptgTp"`
	StmtId        Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StmtId"`
	RptNb         Max5NumericText                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 RptNb,omitempty"`
	StmtDtTm      DateAndDateTimeChoice                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 StmtDtTm"`
	Frqcy         Frequency25Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Frqcy"`
	UpdTp         UpdateType15Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 UpdTp"`
	ActvtyInd     bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 ActvtyInd"`
	NtfctnDdlnPrd DateOrDateTimePeriodChoice                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 NtfctnDdlnPrd,omitempty"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type UpdateType15Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Cd"`
	Prtry GenericIdentification30  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.001.05 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
