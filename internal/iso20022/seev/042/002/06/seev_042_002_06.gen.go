// Code generated by main. DO NOT EDIT.

package seev_042_002_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification41 struct {
	SfkpgAcct         RestrictedFINXMax35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SfkpgAcct"`
	AcctOwnr          PartyIdentification103Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 AcctOwnr,omitempty"`
	SfkpgPlc          SafekeepingPlaceFormat11Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SfkpgPlc,omitempty"`
	CorpActnEvtAndBal []CorporateActionEventAndBalance12 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CorpActnEvtAndBal,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BalanceFormat7Choice struct {
	Bal         SignedQuantityFormat8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Bal"`
	ElgblBal    SignedQuantityFormat9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ElgblBal"`
	NotElgblBal SignedQuantityFormat9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 NotElgblBal"`
}

type CorporateActionBalanceDetails33 struct {
	TtlElgblBal      Quantity22Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TtlElgblBal"`
	UinstdBal        BalanceFormat7Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 UinstdBal"`
	TtlInstdBalDtls  InstructedBalanceDetails6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TtlInstdBalDtls"`
	BlckdBal         SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 BlckdBal,omitempty"`
	BrrwdBal         SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 BrrwdBal,omitempty"`
	CollInBal        SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CollInBal,omitempty"`
	CollOutBal       SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CollOutBal,omitempty"`
	OnLnBal          SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OnLnBal,omitempty"`
	OutForRegnBal    SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OutForRegnBal,omitempty"`
	SttlmPosBal      SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SttlmPosBal,omitempty"`
	StrtPosBal       SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StrtPosBal,omitempty"`
	TradDtPosBal     SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TradDtPosBal,omitempty"`
	InTrnsShipmntBal SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 InTrnsShipmntBal,omitempty"`
	RegdBal          SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 RegdBal,omitempty"`
	OblgtdBal        SignedQuantityFormat9     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OblgtdBal,omitempty"`
	PdgDlvryBal      []PendingBalance4         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PdgDlvryBal,omitempty"`
	PdgRctBal        []PendingBalance4         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PdgRctBal,omitempty"`
}

// May be one of MKDT, RDDT, EARD
type CorporateActionDeadline1Code string

type CorporateActionEventAndBalance12 struct {
	GnlInf      EventInformation10              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 GnlInf"`
	UndrlygScty SecurityIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 UndrlygScty"`
	Bal         CorporateActionBalanceDetails33 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Bal,omitempty"`
	SplmtryData []SupplementaryData1            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SplmtryData,omitempty"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, COOP, CLSA, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH
type CorporateActionEventType20Code string

type CorporateActionEventType58Choice struct {
	Cd    CorporateActionEventType20Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type CorporateActionInstructionStatementReport002V06 struct {
	Pgntn           Pagination                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Pgntn"`
	StmtGnlDtls     Statement48               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StmtGnlDtls"`
	AcctAndStmtDtls []AccountIdentification41 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 AcctAndStmtDtls"`
	SplmtryData     []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SplmtryData,omitempty"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionMandatoryVoluntary4Choice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type CorporateActionOption23Choice struct {
	Cd    CorporateActionOption7Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

// May be one of ABST, AMGT, BSPL, BUYA, CASE, CASH, CEXC, CONN, CONY, CTEN, EXER, LAPS, MNGT, MPUT, NOAC, NOQU, OFFR, OTHR, OVER, PROX, QINV, SECU, SLLE, SPLI, PRUN
type CorporateActionOption7Code string

// May be one of MASE, SAME
type CorporateActionStatementReportingType1Code string

// May be one of MISS, ALLL
type CorporateActionStatementType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DtTm"`
}

type DateOrDateTimePeriodChoice struct {
	Dt   DatePeriodDetails     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Dt"`
	DtTm DateTimePeriodDetails `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DtTm"`
}

type DatePeriodDetails struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ToDt"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ToDtTm"`
}

type DeadlineCode4Choice struct {
	Cd    CorporateActionDeadline1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type DefaultProcessingOrStandingInstruction1Choice struct {
	DfltOptnInd bool `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DfltOptnInd"`
	StgInstrInd bool `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StgInstrInd"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	CorpActnInstrStmtRpt CorporateActionInstructionStatementReport002V06 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CorpActnInstrStmtRpt"`
}

// May be one of YEAR, ADHO, MNTH, DAIL, INDA, WEEK
type EventFrequency4Code string

type EventInformation10 struct {
	CorpActnEvtId      RestrictedFINXMax16Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CorpActnEvtId"`
	OffclCorpActnEvtId RestrictedFINXMax16Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OffclCorpActnEvtId,omitempty"`
	EvtTp              CorporateActionEventType58Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 EvtTp"`
	MndtryVlntryEvtTp  CorporateActionMandatoryVoluntary4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 MndtryVlntryEvtTp"`
	LastNtfctnId       NotificationIdentification4              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 LastNtfctnId,omitempty"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity15Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 AmtsdVal"`
}

type Frequency26Choice struct {
	Cd    EventFrequency4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SchmeNm,omitempty"`
}

type GenericIdentification85 struct {
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Tp"`
	Id RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type InstructedBalanceDetails6 struct {
	TtlInstdBal BalanceFormat7Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TtlInstdBal"`
	OptnDtls    []InstructedCorporateActionOption7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OptnDtls,omitempty"`
}

type InstructedCorporateActionOption7 struct {
	OptnNb   Exact3NumericText                             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OptnNb,omitempty"`
	OptnTp   CorporateActionOption23Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OptnTp"`
	InstdBal BalanceFormat7Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 InstdBal"`
	DfltActn DefaultProcessingOrStandingInstruction1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DfltActn,omitempty"`
	DdlnDtTm ISODateTime                                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DdlnDtTm"`
	DdlnTp   DeadlineCode4Choice                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 DdlnTp"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

type NotificationIdentification4 struct {
	Id      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
	CreDtTm DateAndDateTimeChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 CreDtTm,omitempty"`
}

type OriginalAndCurrentQuantities7 struct {
	ShrtLngPos ShortLong1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ShrtLngPos"`
	FaceAmt    float64        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 FaceAmt"`
	AmtsdVal   float64        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 AmtsdVal"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Tp"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 LastPgInd"`
}

type PartyIdentification103Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 AnyBIC"`
	PrtryId GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PrtryId"`
}

type PendingBalance4 struct {
	Bal    SignedQuantityFormat9               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Bal"`
	PdgTxs []SettlementTypeAndIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PdgTxs,omitempty"`
}

type ProprietaryQuantity10 struct {
	ShrtLngPos ShortLong1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ShrtLngPos,omitempty"`
	Qty        float64                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Qty"`
	QtyTp      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 QtyTp"`
	Issr       Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Issr"`
	SchmeNm    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SchmeNm,omitempty"`
}

type ProprietaryQuantity9 struct {
	Qty     float64                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Qty"`
	QtyTp   Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 QtyTp"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SchmeNm,omitempty"`
}

type Quantity21Choice struct {
	Qty      FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Qty"`
	PrtryQty ProprietaryQuantity9                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PrtryQty"`
}

type Quantity22Choice struct {
	QtyChc   Quantity23Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 QtyChc"`
	PrtryQty ProprietaryQuantity10 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PrtryQty"`
}

type Quantity23Choice struct {
	OrgnlAndCurFaceAmt OriginalAndCurrentQuantities7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OrgnlAndCurFaceAmt"`
	SgndQty            SignedQuantityFormat9         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SgndQty"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat11Choice struct {
	Id      SafekeepingPlaceTypeAndText9             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TpAndId"`
	Prtry   GenericIdentification85                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id"`
}

type SafekeepingPlaceTypeAndText9 struct {
	SfkpgPlcTp SafekeepingPlace2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SfkpgPlcTp"`
	Id         RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Id,omitempty"`
}

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Desc,omitempty"`
}

type SettlementTypeAndIdentification21 struct {
	Pmt     DeliveryReceiptType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Pmt"`
	TxId    RestrictedFINXMax16Text  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 TxId"`
	SttlmDt DateAndDateTimeChoice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 SttlmDt,omitempty"`
}

// May be one of SHOR, LONG
type ShortLong1Code string

type SignedQuantityFormat8 struct {
	ShrtLngPos ShortLong1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ShrtLngPos"`
	QtyChc     Quantity21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 QtyChc"`
}

type SignedQuantityFormat9 struct {
	ShrtLngPos ShortLong1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ShrtLngPos"`
	Qty        FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Qty"`
}

type Statement48 struct {
	StmtTp        CorporateActionStatementType1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StmtTp"`
	RptgTp        CorporateActionStatementReportingType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 RptgTp"`
	StmtId        RestrictedFINXMax16Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StmtId"`
	RptNb         Max5NumericText                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 RptNb,omitempty"`
	StmtDtTm      DateAndDateTimeChoice                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 StmtDtTm"`
	Frqcy         Frequency26Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Frqcy"`
	UpdTp         UpdateType16Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 UpdTp"`
	ActvtyInd     bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 ActvtyInd"`
	NtfctnDdlnPrd DateOrDateTimePeriodChoice                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 NtfctnDdlnPrd,omitempty"`
}

// May be one of COMP, DELT
type StatementUpdateType1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type UpdateType16Choice struct {
	Cd    StatementUpdateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Cd"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.042.002.06 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
