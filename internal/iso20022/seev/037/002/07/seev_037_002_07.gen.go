// Code generated by main. DO NOT EDIT.

package seev_037_002_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account9Choice struct {
	CshAcct   CashAccountIdentification6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CshAcct"`
	ChrgsAcct CashAccountIdentification6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ChrgsAcct"`
	TaxAcct   CashAccountIdentification6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 TaxAcct"`
}

type AccountAndBalance40 struct {
	SfkpgAcct RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SfkpgAcct"`
	ConfdBal  BalanceFormat7Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ConfdBal"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of CLAI, TAXR, ACLA, ATXF, CNTR, CONS, NAMC, NPLE, SCHM, PPUT, PPRE, FPRE
type AdditionalBusinessProcess7Code string

type AdditionalBusinessProcessFormat14Choice struct {
	Cd    AdditionalBusinessProcess7Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BalanceFormat7Choice struct {
	Bal         SignedQuantityFormat8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Bal"`
	ElgblBal    SignedQuantityFormat9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ElgblBal"`
	NotElgblBal SignedQuantityFormat9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 NotElgblBal"`
}

type CashAccountIdentification6Choice struct {
	IBAN  IBAN2007Identifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 IBAN"`
	Prtry RestrictedFINX2Max34Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

type CashOption48 struct {
	CdtDbtInd    CreditDebitCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CdtDbtInd"`
	Acct         Account9Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Acct,omitempty"`
	PstngDt      DateAndDateTimeChoice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PstngDt"`
	OrgnlPstngDt DateAndDateTimeChoice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OrgnlPstngDt,omitempty"`
	ValDt        DateAndDateTimeChoice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ValDt,omitempty"`
	PstngAmt     RestrictedFINActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PstngAmt"`
}

type CorporateAction36 struct {
	DtDtls         CorporateActionDate50                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 DtDtls,omitempty"`
	EvtStag        CorporateActionEventStageFormat15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 EvtStag,omitempty"`
	AddtlBizPrcInd AdditionalBusinessProcessFormat14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AddtlBizPrcInd,omitempty"`
	LtryTp         LotteryTypeFormat5Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LtryTp,omitempty"`
}

type CorporateActionDate50 struct {
	RcrdDt   DateFormat34Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 RcrdDt,omitempty"`
	ExDvddDt DateFormat34Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ExDvddDt,omitempty"`
}

type CorporateActionEventReference4 struct {
	EvtId CorporateActionEventReference4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 EvtId"`
	LkgTp ProcessingPosition10Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LkgTp,omitempty"`
}

type CorporateActionEventReference4Choice struct {
	LkdOffclCorpActnEvtId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LkdOffclCorpActnEvtId"`
	LkdCorpActnId         RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LkdCorpActnId"`
}

// May be one of FULL, PART, RESC
type CorporateActionEventStage4Code string

type CorporateActionEventStageFormat15Choice struct {
	Cd    CorporateActionEventStage4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, CLSA, COOP, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, PRII, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH, MTNG, ACCU
type CorporateActionEventType16Code string

type CorporateActionEventType41Choice struct {
	Cd    CorporateActionEventType16Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

type CorporateActionGeneralInformation98 struct {
	CorpActnEvtId          RestrictedFINXMax16Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CorpActnEvtId"`
	OffclCorpActnEvtId     RestrictedFINXMax16Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OffclCorpActnEvtId,omitempty"`
	ClssActnNb             RestrictedFINXMax16Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ClssActnNb,omitempty"`
	EvtTp                  CorporateActionEventType41Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 EvtTp"`
	FinInstrmId            SecurityIdentification20                             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 FinInstrmId"`
	IntrmdtSctiesDstrbtnTp IntermediateSecuritiesDistributionTypeFormat17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 IntrmdtSctiesDstrbtnTp,omitempty"`
	FrctnlQty              FinancialInstrumentQuantity15Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 FrctnlQty,omitempty"`
}

type CorporateActionMovementReversalAdvice002V07 struct {
	MvmntConfId      DocumentIdentification37            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 MvmntConfId"`
	OthrDocId        []DocumentIdentification38          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OthrDocId,omitempty"`
	EvtsLkg          []CorporateActionEventReference4    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 EvtsLkg,omitempty"`
	RvslRsn          CorporateActionReversalReason4      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 RvslRsn,omitempty"`
	CorpActnGnlInf   CorporateActionGeneralInformation98 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CorpActnGnlInf"`
	AcctDtls         AccountAndBalance40                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AcctDtls"`
	CorpActnDtls     CorporateAction36                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CorpActnDtls,omitempty"`
	CorpActnConfDtls CorporateActionOption126            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CorpActnConfDtls"`
	AddtlInf         CorporateActionNarrative35          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AddtlInf,omitempty"`
	IssrAgt          []PartyIdentification104Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 IssrAgt,omitempty"`
	PngAgt           []PartyIdentification104Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PngAgt,omitempty"`
	SubPngAgt        []PartyIdentification104Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SubPngAgt,omitempty"`
	SplmtryData      []SupplementaryData1                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SplmtryData,omitempty"`
}

type CorporateActionNarrative35 struct {
	AddtlTxt     []RestrictedFINXMax350Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AddtlTxt,omitempty"`
	NrrtvVrsn    []RestrictedFINXMax350Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 NrrtvVrsn,omitempty"`
	PtyCtctNrrtv []RestrictedFINXMax350Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PtyCtctNrrtv,omitempty"`
	TaxtnConds   []RestrictedFINXMax350Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 TaxtnConds,omitempty"`
}

type CorporateActionOption126 struct {
	OptnNb          OptionNumber1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OptnNb"`
	OptnTp          CorporateActionOption26Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OptnTp"`
	SctiesMvmntDtls []SecuritiesOption58          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SctiesMvmntDtls,omitempty"`
	CshMvmntDtls    []CashOption48                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CshMvmntDtls,omitempty"`
}

type CorporateActionOption26Choice struct {
	Cd    CorporateActionOption8Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// May be one of ABST, AMGT, BSPL, BUYA, CASE, CASH, CEXC, CONN, CONY, CTEN, EXER, LAPS, MKDW, MKUP, MNGT, MPUT, NOAC, NOQU, OFFR, OTHR, OVER, PROX, QINV, SECU, SLLE, SPLI, PRUN
type CorporateActionOption8Code string

// May be one of DCBD, IVAD, IRED, IPRI, UPAY, IETR, FNRC, POCS, IPCU
type CorporateActionReversalReason1Code string

type CorporateActionReversalReason4 struct {
	Rsn         CorporateActionReversalReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Rsn"`
	AddtlRsnInf RestrictedFINXMax256Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AddtlRsnInf,omitempty"`
}

type CorporateActionReversalReason4Choice struct {
	Cd    CorporateActionReversalReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 DtTm"`
}

type DateCode22Choice struct {
	Cd    DateType8Code           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

type DateFormat34Choice struct {
	Dt   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Dt"`
	DtCd DateCode22Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 DtCd"`
}

// May be one of UKWN, ONGO
type DateType8Code string

type Document struct {
	CorpActnMvmntRvslAdvc CorporateActionMovementReversalAdvice002V07 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CorpActnMvmntRvslAdvc"`
}

type DocumentIdentification37 struct {
	Id    RestrictedFINXMax16Text    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	LkgTp ProcessingPosition10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LkgTp,omitempty"`
}

type DocumentIdentification38 struct {
	Id    DocumentIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	DocNb DocumentNumber6Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 DocNb,omitempty"`
	LkgTp ProcessingPosition10Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LkgTp,omitempty"`
}

type DocumentIdentification4Choice struct {
	AcctSvcrDocId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AcctSvcrDocId"`
	AcctOwnrDocId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AcctOwnrDocId"`
}

type DocumentNumber6Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 LngNb"`
	PrtryNb GenericIdentification86           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PrtryNb"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity15Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AmtsdVal"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SchmeNm,omitempty"`
}

type GenericIdentification86 struct {
	Id      RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

type IntermediateSecuritiesDistributionTypeFormat17Choice struct {
	Cd    IntermediateSecurityDistributionType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// May be one of BIDS, DRIP, DVCA, DVOP, EXRI, PRIO, DVSC, DVSE, INTR, LIQU, SOFF, SPLF, BONU, EXOF
type IntermediateSecurityDistributionType4Code string

// May be one of ORIG, SUPP
type LotteryType1Code string

type LotteryTypeFormat5Choice struct {
	Cd    LotteryType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

type NameAndAddress12 struct {
	Nm RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Nm"`
}

type OptionNumber1Choice struct {
	Nb Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Nb"`
	Cd OptionNumber1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
}

// May be one of UNSO
type OptionNumber1Code string

type OriginalAndCurrentQuantities4 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AmtsdVal"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Tp"`
}

type PartyIdentification104Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 AnyBIC"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PrtryId"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 NmAndAdr"`
}

type ProcessingPosition10Choice struct {
	Cd    ProcessingPosition3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Prtry"`
}

// May be one of AFTE, WITH, BEFO, INFO
type ProcessingPosition3Code string

type ProprietaryQuantity9 struct {
	Qty     float64                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Qty"`
	QtyTp   Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 QtyTp"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 SchmeNm,omitempty"`
}

type Quantity10Choice struct {
	Qty             FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities4       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OrgnlAndCurFace"`
}

type Quantity21Choice struct {
	Qty      FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Qty"`
	PrtryQty ProprietaryQuantity9                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PrtryQty"`
}

type RestrictedFINActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,34}
type RestrictedFINX2Max34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,256}
type RestrictedFINXMax256Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,350}
type RestrictedFINXMax350Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

type SecuritiesOption58 struct {
	FinInstrmId  SecurityIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 FinInstrmId"`
	CdtDbtInd    CreditDebitCode          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 CdtDbtInd"`
	PstngQty     Quantity10Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PstngQty"`
	PstngDt      DateAndDateTimeChoice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PstngDt"`
	OrgnlPstngDt DateAndDateTimeChoice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OrgnlPstngDt,omitempty"`
}

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Desc,omitempty"`
}

// May be one of SHOR, LONG
type ShortLong1Code string

type SignedQuantityFormat8 struct {
	ShrtLngPos ShortLong1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ShrtLngPos"`
	QtyChc     Quantity21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 QtyChc"`
}

type SignedQuantityFormat9 struct {
	ShrtLngPos ShortLong1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 ShrtLngPos"`
	Qty        FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Qty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.037.002.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
