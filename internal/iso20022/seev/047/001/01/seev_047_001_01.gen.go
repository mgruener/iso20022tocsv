// Code generated by main. DO NOT EDIT.

package seev_047_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of USUF, OWNR, BOWN
type AccountOwnershipType5Code string

type AccountSubLevel20 struct {
	SfkpgAcct  Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SfkpgAcct,omitempty"`
	AcctHldr   PartyIdentification196Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AcctHldr"`
	ShrhldgBal []ShareholdingBalance1       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldgBal"`
}

type AccountSublevel21 struct {
	NonDscldShrhldgQty   FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NonDscldShrhldgQty,omitempty"`
	BlwThrshldShrhldgQty FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 BlwThrshldShrhldgQty,omitempty"`
	Dsclsr               []AccountSubLevel20                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Dsclsr,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 EmailAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DtTm"`
}

type DateAndPlaceOfBirth2 struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 CityOfBirth,omitempty"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 CtryOfBirth,omitempty"`
}

type DateCode20Choice struct {
	Cd    DateType1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

type DateFormat46Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Dt"`
	DtCd DateCode20Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DtCd"`
}

type DateFormat57Choice struct {
	Dt   ISODate          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Dt"`
	DtCd DateCode20Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DtCd"`
}

// May be one of UKWN
type DateType1Code string

type Disclosure1Choice struct {
	NoDsclsr          NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NoDsclsr"`
	SfkpgAcctAndHldgs []SafekeepingAccount8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SfkpgAcctAndHldgs"`
}

type DisclosureRequestIdentification1 struct {
	IssrDsclsrReqId      Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 IssrDsclsrReqId"`
	FinInstrmId          SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 FinInstrmId"`
	ShrhldrsDsclsrRcrdDt DateFormat46Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldrsDsclsrRcrdDt"`
}

type Document struct {
	ShrhldrsIdDsclsrRspn ShareholdersIdentificationDisclosureResponseV01 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldrsIdDsclsrRspn"`
}

// May be one of ELIG, RETL, PROF
type Eligibility1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity18Choice struct {
	Unit    float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Unit"`
	FaceAmt float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 FaceAmt"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-U]{1,1}[0-9]{0,4}
type ISICIdentifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

type IdentificationType45Choice struct {
	Cd    TypeOfIdentification4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

type InvestorType1Choice struct {
	Cd    Eligibility1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max50Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress17 struct {
	Nm  Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Nm"`
	Adr PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// May be one of DOCT, MADM, MISS, MIST, MIKS
type NamePrefix2Code string

type NaturalPersonIdentification1 struct {
	Id   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	IdTp IdentificationType45Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 IdTp,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Tp"`
}

type Ownership1 struct {
	OwnrshTp   OwnershipType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 OwnrshTp,omitempty"`
	OwnrshPctg float64              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 OwnrshPctg,omitempty"`
	UsfrctPctg float64              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 UsfrctPctg,omitempty"`
}

type OwnershipType3Choice struct {
	Cd    AccountOwnershipType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 LastPgInd"`
}

type PartyIdentification195Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AnyBIC"`
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PrtryId"`
	LEI     LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 LEI"`
}

type PartyIdentification196Choice struct {
	LglPrsn  PartyIdentification216   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 LglPrsn"`
	NtrlPrsn []PartyIdentification217 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NtrlPrsn"`
}

type PartyIdentification198Choice struct {
	NtlRegnNb Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NtlRegnNb"`
	LEI       LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 LEI"`
	AnyBIC    AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AnyBIC"`
	ClntId    Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ClntId"`
	PrtryId   GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PrtryId"`
}

type PartyIdentification201 struct {
	NmAndAdr PersonName2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmAndAdr,omitempty"`
	Id       PartyIdentification198Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
}

type PartyIdentification202 struct {
	NmAndAdr PersonName1                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmAndAdr"`
	Id       NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
}

type PartyIdentification205Choice struct {
	LglPrsn  PartyIdentification201 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 LglPrsn"`
	NtrlPrsn PartyIdentification202 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NtrlPrsn"`
}

type PartyIdentification216 struct {
	NmAndAdr        NameAndAddress17             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmAndAdr"`
	EmailAdr        Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 EmailAdr,omitempty"`
	Id              PartyIdentification198Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	CtryOfIncorprtn CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 CtryOfIncorprtn,omitempty"`
	ActvtyInd       ISICIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ActvtyInd,omitempty"`
	InvstrTp        InvestorType1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 InvstrTp,omitempty"`
	Ownrsh          Ownership1                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Ownrsh,omitempty"`
}

type PartyIdentification217 struct {
	NmAndAdr        PersonName3                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmAndAdr"`
	EmailAdr        Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 EmailAdr,omitempty"`
	Id              NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	Ntlty           CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Ntlty,omitempty"`
	DtAndPlcOfBirth DateAndPlaceOfBirth2         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DtAndPlcOfBirth,omitempty"`
	InvstrTp        InvestorType1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 InvstrTp,omitempty"`
	Ownrsh          Ownership1                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Ownrsh,omitempty"`
}

type PartyIdentification218 struct {
	Role PartyRole6Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Role"`
	Id   PartyIdentification205Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
}

type PartyIdentification219 struct {
	NmAndAdr PersonName2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmAndAdr"`
	Id       PartyIdentification195Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Id"`
	CtctPrsn ContactIdentification2       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 CtctPrsn,omitempty"`
}

// May be one of DIST, LGRD, DECM
type PartyRole2Code string

type PartyRole6Choice struct {
	Cd    PartyRole2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Prtry"`
}

type PersonName1 struct {
	FrstNm Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 FrstNm"`
	Srnm   Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Srnm"`
	Adr    PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Adr,omitempty"`
}

type PersonName2 struct {
	Nm  Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Nm"`
	Adr PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Adr,omitempty"`
}

type PersonName3 struct {
	NmPrfx NamePrefix2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 NmPrfx,omitempty"`
	FrstNm Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 FrstNm"`
	Srnm   Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Srnm"`
	Adr    PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Adr,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress26 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 BldgNb,omitempty"`
	PstBx       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PstBx,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Ctry"`
}

type SafekeepingAccount8 struct {
	SfkpgAcct            Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SfkpgAcct"`
	AcctSvcr             PartyIdentification195Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AcctSvcr"`
	ShrhldgBalOnOwnAcct  FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldgBalOnOwnAcct"`
	ShrhldgBalOnClntAcct FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldgBalOnClntAcct"`
	TtlShrhldgBal        FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 TtlShrhldgBal"`
	AcctSubLvl           AccountSublevel21                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 AcctSubLvl,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Desc,omitempty"`
}

type ShareholdersIdentificationDisclosureResponseV01 struct {
	Pgntn            Pagination1                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Pgntn,omitempty"`
	IssrDsclsrReqRef DisclosureRequestIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 IssrDsclsrReqRef"`
	DsclsrRspnId     Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DsclsrRspnId"`
	RspndgIntrmy     PartyIdentification219           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 RspndgIntrmy"`
	DsclsrInf        Disclosure1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 DsclsrInf"`
	SplmtryData      []SupplementaryData1             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SplmtryData,omitempty"`
}

type ShareholdingBalance1 struct {
	ShrhldgTp        ShareholdingType1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ShrhldgTp"`
	Qty              FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Qty"`
	InitlDtOfShrhldg DateFormat57Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 InitlDtOfShrhldg,omitempty"`
	ThrdPty          []PartyIdentification218            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 ThrdPty,omitempty"`
	SplmtryData      []SupplementaryData1                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 SplmtryData,omitempty"`
}

// May be one of BENE, NOMI, OOAC, UKWN
type ShareholdingType1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.047.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ARNU, CUST, CORP, DRLC, IDCD, NRIN, CCPT, SOCS, TXID
type TypeOfIdentification4Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
