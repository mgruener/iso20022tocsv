// Code generated by main. DO NOT EDIT.

package seev_008_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AmendInformation3 struct {
	PrvsRef MessageIdentification `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 PrvsRef"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CommunicationAddress4 struct {
	EmailAdr Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 EmailAdr,omitempty"`
	URLAdr   Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 URLAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	MtgRsltDssmntn MeetingResultDisseminationV05 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 MtgRsltDssmntn"`
}

type EligiblePosition5 struct {
	AcctId    Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AcctId,omitempty"`
	AcctOwnr  PartyIdentification40Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AcctOwnr,omitempty"`
	HldgBal   []HoldingBalance7             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 HldgBal,omitempty"`
	RghtsHldr []PartyIdentification40Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 RghtsHldr,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Issr"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SchmeNm,omitempty"`
}

type GenericIdentification21 struct {
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id,omitempty"`
}

type HoldingBalance7 struct {
	Bal      UnitOrFaceAmount1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Bal,omitempty"`
	BalTp    SecuritiesEntryType2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 BalTp,omitempty"`
	SfkpgPlc SafekeepingPlaceFormat2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SfkpgPlc,omitempty"`
	Dt       ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Dt,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MeetingReference7 struct {
	MtgId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 MtgId,omitempty"`
	IssrMtgId  Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 IssrMtgId,omitempty"`
	MtgDtAndTm ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 MtgDtAndTm"`
	Tp         MeetingType3Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Tp"`
	Clssfctn   MeetingTypeClassification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Clssfctn,omitempty"`
	Lctn       []PostalAddress1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Lctn,omitempty"`
}

type MeetingResultDisseminationV05 struct {
	Amdmnt      AmendInformation3     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Amdmnt,omitempty"`
	MtgRef      MeetingReference7     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 MtgRef"`
	Scty        []SecurityPosition8   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Scty"`
	VoteRslt    []Vote7               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 VoteRslt"`
	Prtcptn     Participation4        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Prtcptn,omitempty"`
	AddtlInf    CommunicationAddress4 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AddtlInf,omitempty"`
	SplmtryData []SupplementaryData1  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SplmtryData,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL, BMET
type MeetingType3Code string

type MeetingTypeClassification1Choice struct {
	Cd    MeetingTypeClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Cd"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Prtry"`
}

// May be one of AMET, OMET, CLAS, ISSU, VRHI, CORT
type MeetingTypeClassification1Code string

type MessageIdentification struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Adr,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Tp"`
}

type Participation4 struct {
	TtlNbOfVtngRghts     float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 TtlNbOfVtngRghts,omitempty"`
	PctgOfVtngRghts      float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 PctgOfVtngRghts,omitempty"`
	TtlNbOfSctiesOutsdng UnitOrFaceAmount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 TtlNbOfSctiesOutsdng,omitempty"`
	ClctnDt              ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 ClctnDt,omitempty"`
}

type PartyIdentification40Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AnyBIC"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Ctry"`
}

// May be one of ACPT, REJT, WDRA
type ResolutionStatus2Code string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat2Choice struct {
	Id      SafekeepingPlaceTypeAndText2             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 TpAndId"`
	Prtry   GenericIdentification21                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id"`
}

type SafekeepingPlaceTypeAndText2 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Id,omitempty"`
}

// May be one of BLOK, ELIG, PEND, PENR, NOMI, SETD, BORR, LOAN, SPOS, TRAD, COLI, COLO, UNBA, INBA, REGO
type SecuritiesEntryType2Code string

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Desc,omitempty"`
}

type SecurityPosition8 struct {
	FinInstrmId SecurityIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 FinInstrmId"`
	Pos         []EligiblePosition5      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Pos,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type UnitOrFaceAmount1Choice struct {
	Unit    float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Unit"`
	FaceAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 FaceAmt"`
}

type Vote7 struct {
	IssrLabl Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 IssrLabl"`
	RsltnSts ResolutionStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 RsltnSts"`
	For      float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 For,omitempty"`
	Agnst    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Agnst,omitempty"`
	Abstn    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Abstn,omitempty"`
	Wthhld   float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 Wthhld,omitempty"`
	OneYr    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 OneYr,omitempty"`
	TwoYrs   float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 TwoYrs,omitempty"`
	ThreeYrs float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 ThreeYrs,omitempty"`
	NoActn   float64               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.05 NoActn,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
