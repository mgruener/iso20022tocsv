// Code generated by main. DO NOT EDIT.

package seev_008_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateFinancialInstrumentIdentification1 struct {
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 DmstIdSrc"`
	PrtryIdSrc Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PrtryIdSrc"`
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
}

type AmendInformation2 struct {
	PrvsRef MessageIdentification `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PrvsRef"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CommunicationAddress4 struct {
	EmailAdr Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 EmailAdr,omitempty"`
	URLAdr   Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 URLAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type Document struct {
	MtgRsltDssmntn MeetingResultDisseminationV02 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 MtgRsltDssmntn"`
}

type EligiblePosition2 struct {
	AcctId    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 AcctId,omitempty"`
	AcctOwnr  PartyIdentification9Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 AcctOwnr,omitempty"`
	HldgBal   []HoldingBalance3            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 HldgBal,omitempty"`
	RghtsHldr []PartyIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 RghtsHldr,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Issr,omitempty"`
}

type GenericIdentification5 struct {
	Issr  Max8Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Issr"`
	Inf   Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Inf"`
	Nrrtv Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Nrrtv,omitempty"`
}

type HoldingBalance3 struct {
	Bal      UnitOrFaceAmountChoice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Bal,omitempty"`
	BalTp    SecuritiesEntryType2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 BalTp,omitempty"`
	SfkpgPlc SafekeepingPlaceFormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 SfkpgPlc,omitempty"`
	Dt       ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Dt,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

// Must be at least 1 items long
type Max8Text string

type MeetingReference3 struct {
	MtgId          Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 MtgId,omitempty"`
	IssrMtgId      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 IssrMtgId,omitempty"`
	MtgDtAndTm     ISODateTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 MtgDtAndTm"`
	Tp             MeetingType2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Tp"`
	Clssfctn       MeetingTypeClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Clssfctn,omitempty"`
	XtndedClssfctn Extended350Code                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 XtndedClssfctn,omitempty"`
	Lctn           []PostalAddress1               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Lctn,omitempty"`
}

type MeetingResultDisseminationV02 struct {
	MtgRsltDssmntnId MessageIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 MtgRsltDssmntnId"`
	Amdmnt           AmendInformation2          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Amdmnt,omitempty"`
	MtgRef           MeetingReference3          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 MtgRef"`
	RptgPty          PartyIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 RptgPty"`
	Scty             []SecurityPosition5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Scty"`
	VoteRslt         []Vote5                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 VoteRslt"`
	Prtcptn          Participation2             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Prtcptn,omitempty"`
	AddtlInf         CommunicationAddress4      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 AddtlInf,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL
type MeetingType2Code string

// May be one of AMET, OMET, CLAS, ISSU, VRHI, CORT
type MeetingTypeClassification1Code string

type MessageIdentification struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Adr,omitempty"`
}

type Participation2 struct {
	TtlNbOfVtngRghts     float64           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 TtlNbOfVtngRghts,omitempty"`
	PctgOfVtngRghts      float64           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PctgOfVtngRghts,omitempty"`
	TtlNbOfSctiesOutsdng CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 TtlNbOfSctiesOutsdng,omitempty"`
	ClctnDt              ISODate           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 ClctnDt,omitempty"`
}

type PartyIdentification3 struct {
	BICOrBEI AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 BICOrBEI"`
}

type PartyIdentification9Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Ctry"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

type SafekeepingPlaceAsCodeAndPartyIdentification struct {
	PlcSfkpg SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 PlcSfkpg"`
	Nrrtv    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Nrrtv,omitempty"`
	Pty      PartyIdentification3  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Pty,omitempty"`
}

type SafekeepingPlaceFormatChoice struct {
	Id       SafekeepingPlaceAsCodeAndPartyIdentification `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
	IdAsDSS  GenericIdentification5                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 IdAsDSS"`
	IdAsCtry CountryCode                                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 IdAsCtry"`
}

// May be one of BLOK, ELIG, PEND, PENR, NOMI, SETD, BORR, LOAN, SPOS, TRAD, COLI, COLO, UNBA, INBA, REGO
type SecuritiesEntryType2Code string

type SecurityIdentification3 struct {
	ISIN     ISINIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 ISIN"`
	TckrSymb TickerIdentifier                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 TckrSymb,omitempty"`
	CUSIP    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 CUSIP,omitempty"`
	SEDOL    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 SEDOL,omitempty"`
	QUICK    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 QUICK,omitempty"`
	OthrId   AlternateFinancialInstrumentIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 OthrId,omitempty"`
}

type SecurityPosition5 struct {
	Id  SecurityIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Id"`
	Pos []EligiblePosition2     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Pos,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

type UnitOrFaceAmountChoice struct {
	Unit    float64           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Unit"`
	FaceAmt CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 FaceAmt"`
}

type Vote5 struct {
	IssrLabl Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 IssrLabl"`
	Accptd   bool      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Accptd"`
	For      float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 For,omitempty"`
	Agnst    float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Agnst,omitempty"`
	Abstn    float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Abstn,omitempty"`
	Wthhld   float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 Wthhld,omitempty"`
	NoActn   float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.008.001.02 NoActn,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
