// Code generated by main. DO NOT EDIT.

package seev_007_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DetailedInstructionStatus9 struct {
	InstrId      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 InstrId"`
	AcctId       Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 AcctId,omitempty"`
	AcctOwnr     PartyIdentification9Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 AcctOwnr,omitempty"`
	SubAcctId    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 SubAcctId,omitempty"`
	RghtsHldr    []PartyIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 RghtsHldr,omitempty"`
	StgInstr     bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 StgInstr"`
	VotePerRsltn []Vote4                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 VotePerRsltn"`
}

type Document struct {
	MtgVoteExctnConf MeetingVoteExecutionConfirmationV03 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 MtgVoteExctnConf"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Issr,omitempty"`
}

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Issr"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MeetingReference4 struct {
	MtgId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 MtgId,omitempty"`
	IssrMtgId  Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 IssrMtgId,omitempty"`
	MtgDtAndTm ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 MtgDtAndTm"`
	Tp         MeetingType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Tp"`
	Clssfctn   MeetingTypeClassification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Clssfctn,omitempty"`
	Lctn       []PostalAddress1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Lctn,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL
type MeetingType2Code string

type MeetingTypeClassification1Choice struct {
	Cd    MeetingTypeClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Cd"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Prtry"`
}

// May be one of AMET, OMET, CLAS, ISSU, VRHI, CORT
type MeetingTypeClassification1Code string

type MeetingVoteExecutionConfirmationV03 struct {
	Id         MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	RltdRef    MessageIdentification        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 RltdRef"`
	MtgRef     MeetingReference4            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 MtgRef"`
	RptgPty    PartyIdentification9Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 RptgPty"`
	SctyId     SecurityIdentification11     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 SctyId"`
	VoteInstrs []DetailedInstructionStatus9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 VoteInstrs"`
}

type MessageIdentification struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Adr,omitempty"`
}

type PartyIdentification9Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Ctry"`
}

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 OthrId"`
}

type Vote4 struct {
	IssrLabl  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 IssrLabl"`
	For       float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 For,omitempty"`
	Agnst     float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Agnst,omitempty"`
	Abstn     float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Abstn,omitempty"`
	Wthhld    float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Wthhld,omitempty"`
	WthMgmt   float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 WthMgmt,omitempty"`
	AgnstMgmt float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 AgnstMgmt,omitempty"`
	Dscrtnry  float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 Dscrtnry,omitempty"`
	NoActn    float64   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.03 NoActn,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
