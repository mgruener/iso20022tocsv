// Code generated by main. DO NOT EDIT.

package seev_006_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalStatus1 struct {
	Rsn      InstructionRejectionStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Rsn"`
	AddtlInf Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AddtlInf,omitempty"`
}

type AdditionalStatus2 struct {
	Rsn      CancellationRejectionStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Rsn"`
	AddtlInf Max350Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AddtlInf,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationProcessingStatus1 struct {
	Sts      CancellationStatus3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Sts"`
	AddtlInf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AddtlInf,omitempty"`
}

type CancellationRejectionStatus1Choice struct {
	Cd    RejectionReason2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Cd"`
	Prtry GenericIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Prtry"`
}

type CancellationStatus2Choice struct {
	PrcgSts  CancellationProcessingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 PrcgSts"`
	RjctnSts AdditionalStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 RjctnSts"`
}

// May be one of PACK, CANP, CAND, RCIS
type CancellationStatus3Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DetailedInstructionStatus8 struct {
	InstrId   Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrId"`
	AcctId    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AcctId,omitempty"`
	SubAcctId Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 SubAcctId,omitempty"`
	InstrSts  InstructionStatus4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrSts"`
}

type Document struct {
	MtgInstrSts MeetingInstructionStatusV04 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 MtgInstrSts"`
}

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Issr,omitempty"`
}

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Issr"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Prtry"`
}

type InstructionProcessingStatus1 struct {
	Sts      Status3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Sts"`
	AddtlInf Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AddtlInf,omitempty"`
}

type InstructionRejectionStatus1Choice struct {
	Cd    RejectionReason1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Cd"`
	Prtry GenericIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Prtry"`
}

type InstructionStatus3Choice struct {
	GblInstrSts  InstructionStatus4Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 GblInstrSts"`
	DtldInstrSts []DetailedInstructionStatus8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 DtldInstrSts"`
}

type InstructionStatus4Choice struct {
	PrcgSts  InstructionProcessingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 PrcgSts"`
	RjctnSts AdditionalStatus1            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 RjctnSts"`
}

type InstructionType1Choice struct {
	InstrId    MessageIdentification `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrId"`
	InstrCxlId MessageIdentification `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrCxlId"`
}

type InstructionTypeStatus1Choice struct {
	InstrSts InstructionStatus3Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrSts"`
	CxlSts   CancellationStatus2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 CxlSts"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MeetingInstructionStatusV04 struct {
	Id         MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	InstrTp    InstructionType1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrTp"`
	MtgRef     MeetingReference4            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 MtgRef"`
	RptgPty    PartyIdentification9Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 RptgPty"`
	SctyId     SecurityIdentification11     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 SctyId"`
	InstrTpSts InstructionTypeStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 InstrTpSts"`
	Xtnsn      []Extension2                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Xtnsn,omitempty"`
}

type MeetingReference4 struct {
	MtgId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 MtgId,omitempty"`
	IssrMtgId  Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 IssrMtgId,omitempty"`
	MtgDtAndTm ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 MtgDtAndTm"`
	Tp         MeetingType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Tp"`
	Clssfctn   MeetingTypeClassification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Clssfctn,omitempty"`
	Lctn       []PostalAddress1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Lctn,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL
type MeetingType2Code string

type MeetingTypeClassification1Choice struct {
	Cd    MeetingTypeClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Cd"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Prtry"`
}

// May be one of AMET, OMET, CLAS, ISSU, VRHI, CORT
type MeetingTypeClassification1Code string

type MessageIdentification struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Adr,omitempty"`
}

type PartyIdentification9Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Ctry"`
}

// May be one of ADEA, LATE, DQUA, IPOS, LACK, SAFE, RBIS, EVNM, ULNK, PRXY, PART, SPLT, IPOA, IREG, DSEC
type RejectionReason1Code string

// May be one of ULNK, RBIS, INIR, ADEA, LATE, DCAN, DPRG
type RejectionReason2Code string

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.04 OthrId"`
}

// May be one of CAND, PACK, NOIN, COMP, RCIS, STIN
type Status3Code string

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
