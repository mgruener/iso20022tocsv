// Code generated by main. DO NOT EDIT.

package seev_006_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateFinancialInstrumentIdentification1 struct {
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 DmstIdSrc"`
	PrtryIdSrc Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 PrtryIdSrc"`
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Id"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationProcessingStatus1 struct {
	Sts      CancellationStatus3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Sts"`
	AddtlInf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AddtlInf,omitempty"`
}

type CancellationRejectionStatus1 struct {
	Rsn       RejectionReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Rsn"`
	XtndedRsn Extended350Code      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 XtndedRsn"`
	AddtlInf  Max350Text           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AddtlInf,omitempty"`
}

type CancellationStatus1Choice struct {
	PrcgSts  CancellationProcessingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 PrcgSts"`
	RjctnSts CancellationRejectionStatus1  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 RjctnSts"`
}

// May be one of PACK, CANP, CAND, RCIS
type CancellationStatus3Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DetailedInstructionStatus1 struct {
	InstrId   Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 InstrId"`
	AcctId    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AcctId,omitempty"`
	SubAcctId Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 SubAcctId,omitempty"`
	InstrSts  InstructionStatus2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 InstrSts"`
}

type Document struct {
	MtgInstrSts MeetingInstructionStatusV02 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 MtgInstrSts"`
}

// Must be at least 1 items long
type Extended350Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InstructionProcessingStatus1 struct {
	Sts      Status3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Sts"`
	AddtlInf Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AddtlInf,omitempty"`
}

type InstructionRejectionStatus1 struct {
	Rsn       RejectionReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Rsn"`
	XtndedRsn Extended350Code      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 XtndedRsn"`
	AddtlInf  Max350Text           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AddtlInf,omitempty"`
}

type InstructionStatus1Choice struct {
	GblInstrSts  InstructionStatus2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 GblInstrSts"`
	DtldInstrSts []DetailedInstructionStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 DtldInstrSts"`
}

type InstructionStatus2Choice struct {
	PrcgSts  InstructionProcessingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 PrcgSts"`
	RjctnSts InstructionRejectionStatus1  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 RjctnSts"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MeetingInstructionStatusV02 struct {
	MtgInstrStsId MessageIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 MtgInstrStsId"`
	InstrId       MessageIdentification      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 InstrId"`
	InstrCxlId    MessageIdentification      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 InstrCxlId"`
	MtgRef        MeetingReference3          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 MtgRef"`
	RptgPty       PartyIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 RptgPty"`
	SctyId        SecurityIdentification3    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 SctyId"`
	InstrSts      InstructionStatus1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 InstrSts"`
	CxlSts        CancellationStatus1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 CxlSts"`
}

type MeetingReference3 struct {
	MtgId          Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 MtgId,omitempty"`
	IssrMtgId      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 IssrMtgId,omitempty"`
	MtgDtAndTm     ISODateTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 MtgDtAndTm"`
	Tp             MeetingType2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Tp"`
	Clssfctn       MeetingTypeClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Clssfctn,omitempty"`
	XtndedClssfctn Extended350Code                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 XtndedClssfctn,omitempty"`
	Lctn           []PostalAddress1               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Lctn,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL
type MeetingType2Code string

// May be one of AMET, OMET, CLAS, ISSU, VRHI, CORT
type MeetingTypeClassification1Code string

type MessageIdentification struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Id"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Adr,omitempty"`
}

type PartyIdentification9Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 Ctry"`
}

// May be one of ADEA, LATE, DQUA, IPOS, LACK, SAFE, RBIS, EVNM, ULNK, PRXY, PART, SPLT, IPOA, IREG, DSEC
type RejectionReason1Code string

// May be one of ULNK, RBIS, INIR, ADEA, LATE, DCAN, DPRG
type RejectionReason2Code string

type SecurityIdentification3 struct {
	ISIN     ISINIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 ISIN"`
	TckrSymb TickerIdentifier                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 TckrSymb,omitempty"`
	CUSIP    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 CUSIP,omitempty"`
	SEDOL    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 SEDOL,omitempty"`
	QUICK    string                                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 QUICK,omitempty"`
	OthrId   AlternateFinancialInstrumentIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.02 OthrId,omitempty"`
}

// May be one of CAND, PACK, NOIN, COMP, RCIS, STIN
type Status3Code string

// Must be at least 1 items long
type TickerIdentifier string

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
