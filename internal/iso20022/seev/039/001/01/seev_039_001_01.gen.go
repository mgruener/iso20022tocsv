// Code generated by main. DO NOT EDIT.

package seev_039_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification10 struct {
	IdCd SafekeepingAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 IdCd"`
}

type AccountIdentification6Choice struct {
	ForAllAccts AccountIdentification10  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 ForAllAccts"`
	AcctsList   []AccountIdentification9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 AcctsList"`
}

type AccountIdentification9 struct {
	SfkpgAcct Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SfkpgAcct"`
	AcctOwnr  PartyIdentification13Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 AcctOwnr,omitempty"`
	SfkpgPlc  SafekeepingPlaceFormat2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SfkpgPlc,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

type CorporateActionCancellation1 struct {
	CxlRsnCd CorporateActionCancellationReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CxlRsnCd"`
	CxlRsn   Max140Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CxlRsn,omitempty"`
	PrcgSts  CorporateActionProcessingStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PrcgSts"`
}

type CorporateActionCancellationAdviceV01 struct {
	Id             DocumentIdentification11           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	CxlAdvcGnlInf  CorporateActionCancellation1       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CxlAdvcGnlInf"`
	CorpActnGnlInf CorporateActionGeneralInformation8 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CorpActnGnlInf"`
	AcctsDtls      AccountIdentification6Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 AcctsDtls"`
	MsgOrgtr       PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 MsgOrgtr,omitempty"`
	MsgRcpt        PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 MsgRcpt,omitempty"`
	IssrAgt        []PartyIdentification10Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 IssrAgt,omitempty"`
	PngAgt         []PartyIdentification10Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PngAgt,omitempty"`
	SubPngAgt      []PartyIdentification10Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SubPngAgt,omitempty"`
	Regar          PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Regar,omitempty"`
	RsellngAgt     []PartyIdentification10Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 RsellngAgt,omitempty"`
	PhysSctiesAgt  PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PhysSctiesAgt,omitempty"`
	DrpAgt         PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 DrpAgt,omitempty"`
	SlctnAgt       []PartyIdentification10Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SlctnAgt,omitempty"`
	InfAgt         PartyIdentification10Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 InfAgt,omitempty"`
	Xtnsn          []Extension2                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Xtnsn,omitempty"`
}

// May be one of WITH, PROC
type CorporateActionCancellationReason1Code string

type CorporateActionEventStatus1 struct {
	EvtCmpltnsSts EventCompletenessStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 EvtCmpltnsSts"`
	EvtConfSts    EventConfirmationStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 EvtConfSts"`
}

type CorporateActionEventType3Choice struct {
	Cd    CorporateActionEventType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Cd"`
	Prtry GenericIdentification20       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Prtry"`
}

// May be one of ACTV, ATTI, BIDS, BONU, BPUT, BRUP, CAPG, CAPI, CERT, CHAN, CLSA, CONS, CONV, COOP, DECR, DETI, DFLT, DLST, DRAW, DRIP, DSCL, DTCH, DVCA, DVOP, DVSC, DVSE, EXOF, EXRI, EXTM, EXWA, CAPD, INCR, INTR, LIQU, MCAL, MRGR, ODLT, OTHR, PARI, PCAL, PDEF, PINK, PLAC, PPMT, PRED, PRII, PRIO, REDM, REDO, REMK, RHDI, RHTS, SHPR, SMAL, SOFF, SPLF, SPLR, SUSP, TEND, TREC, WRTH, WTRC, CREV
type CorporateActionEventType6Code string

type CorporateActionGeneralInformation8 struct {
	CorpActnEvtId      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CorpActnEvtId"`
	OffclCorpActnEvtId Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 OffclCorpActnEvtId,omitempty"`
	ClssActnNb         Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 ClssActnNb,omitempty"`
	EvtTp              CorporateActionEventType3Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 EvtTp"`
	MndtryVlntryEvtTp  CorporateActionMandatoryVoluntary1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 MndtryVlntryEvtTp"`
	UndrlygSctyId      SecurityIdentification11                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 UndrlygSctyId"`
}

type CorporateActionMandatoryVoluntary1Choice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Cd"`
	Prtry GenericIdentification20                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Prtry"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionProcessingStatus1Choice struct {
	EvtSts        CorporateActionEventStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 EvtSts"`
	ForInfOnlyInd bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 ForInfOnlyInd"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 DtTm"`
}

type Document struct {
	CorpActnCxlAdvc CorporateActionCancellationAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CorpActnCxlAdvc"`
}

type DocumentIdentification11 struct {
	Id       Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	CreDtTm  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CreDtTm,omitempty"`
	CpyDplct CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CpyDplct,omitempty"`
}

// May be one of COMP, INCO
type EventCompletenessStatus1Code string

// May be one of CONF, UCON
type EventConfirmationStatus1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SchmeNm,omitempty"`
}

type GenericIdentification21 struct {
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Adr,omitempty"`
}

type PartyIdentification10Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 NmAndAdr"`
}

type PartyIdentification13Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PrtryId"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Ctry"`
}

// May be one of GENR
type SafekeepingAccountIdentification1Code string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat2Choice struct {
	Id      SafekeepingPlaceTypeAndText2             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 TpAndId"`
	Prtry   GenericIdentification21                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
}

type SafekeepingPlaceTypeAndText2 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id,omitempty"`
}

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.039.001.01 OthrId"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
