// Code generated by main. DO NOT EDIT.

package catp_007_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

// ATMAccountStatement1
//
// Statement information of an account.
type ATMAccountStatement1 struct {
	AcctIdr  AccountIdentification31Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctIdr"`
	AcctNm   Max70Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctNm,omitempty"`
	AcctStmt []ATMAccountStatement2        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctStmt,omitempty"`
}

// ATMAccountStatement2
//
// Statement information of an account.
type ATMAccountStatement2 struct {
	TxDt    ISODate            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TxDt,omitempty"`
	ValDt   ISODate            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ValDt,omitempty"`
	ShrtTxt Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ShrtTxt,omitempty"`
	CdtTx   bool               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CdtTx,omitempty"`
	Amt     float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Amt"`
	Ccy     ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ccy,omitempty"`
	LngTxt  Max256Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 LngTxt,omitempty"`
}

// ATMCommand1
//
// Maintenance command to perform on an ATM.
type ATMCommand1 struct {
	Tp        ATMCommand1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tp"`
	Urgcy     TMSContactLevel2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Urgcy"`
	DtTm      ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DtTm,omitempty"`
	CmdId     ATMCommandIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CmdId,omitempty"`
	CmdParams ATMCommandParameters1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CmdParams,omitempty"`
}

// May be one of ABAL, ASTS, CFGT, CCNT, DISC, SNDM
type ATMCommand1Code string

// ATMCommandIdentification1
//
// Identification of the entity issuing the command.
type ATMCommandIdentification1 struct {
	Orgn Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Orgn,omitempty"`
	Ref  Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ref,omitempty"`
	Prcr Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Prcr,omitempty"`
}

// ATMCommandParameters1Choice
//
// Specific parameters attached to an ATM command.
type ATMCommandParameters1Choice struct {
	ATMReqrdGblSts  ATMStatus1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATMReqrdGblSts"`
	XpctdMsgFctn    MessageFunction8Code       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 XpctdMsgFctn"`
	ReqrdCfgtnParam ATMConfigurationParameter1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ReqrdCfgtnParam"`
}

// ATMConfigurationParameter1
//
// Configuration parameter version of the ATM.
type ATMConfigurationParameter1 struct {
	Tp   DataSetCategory7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tp"`
	Vrsn Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Vrsn"`
}

// ATMContext6
//
// Context in which the inquiry is performed.
type ATMContext6 struct {
	SsnRef Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SsnRef,omitempty"`
	Svc    ATMService6 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Svc"`
}

// ATMCustomer2
//
// Customer involved in a withdrawal transaction.
type ATMCustomer2 struct {
	Prfl         ATMCustomerProfile2              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Prfl,omitempty"`
	AuthntcnRslt []TransactionVerificationResult5 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AuthntcnRslt,omitempty"`
}

// ATMCustomerProfile2
//
// Profile of the customer selected by an ATM.
type ATMCustomerProfile2 struct {
	PrflRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrflRef,omitempty"`
	CstmrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CstmrId,omitempty"`
}

// ATMCustomerProfile3
//
// Profile of the customer with the allowed services and restrictions.
type ATMCustomerProfile3 struct {
	PrflRef   Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrflRef,omitempty"`
	CstmrId   Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CstmrId,omitempty"`
	PrflDesc  Max70Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrflDesc,omitempty"`
	AllwdSvcs []ATMService7 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AllwdSvcs,omitempty"`
}

// May be one of CDIS, DPRN, JRNL, JPRN, RPRN, RWDR
type ATMDevice1Code string

// ATMEnvironment5
//
// Environment of the transaction.
type ATMEnvironment5 struct {
	ATM            AutomatedTellerMachine2  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATM"`
	Cstmr          ATMCustomer2             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Cstmr"`
	PrtctdCardData ContentInformationType10 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrtctdCardData,omitempty"`
	PlainCardData  PlainCardData14          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PlainCardData,omitempty"`
}

// ATMInquiryResponse1
//
// Information related to the response of an ATM inquiry from an ATM manager.
type ATMInquiryResponse1 struct {
	Envt  ATMEnvironment5 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Envt"`
	Cntxt ATMContext6     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Cntxt"`
	Tx    ATMTransaction7 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tx"`
}

// ATMInquiryResponseV01
//
// The ATMInquiryResponse message is sent by an ATM manager or its agent to the ATM to provide the information and the outcome of the verifications requested in the ATMInquiryRequest.
type ATMInquiryResponseV01 struct {
	Hdr               Header20                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Hdr"`
	PrtctdATMNqryRspn ContentInformationType10 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrtctdATMNqryRspn,omitempty"`
	ATMNqryRspn       ATMInquiryResponse1      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATMNqryRspn,omitempty"`
	SctyTrlr          ContentInformationType15 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SctyTrlr,omitempty"`
}

// ATMMediaMix2
//
// Media mix selected.
type ATMMediaMix2 struct {
	Nb      float64 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Nb"`
	UnitVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UnitVal"`
}

// ATMMessageFunction1
//
// Identifies the type of process related to an ATM message.
type ATMMessageFunction1 struct {
	Fctn     MessageFunction7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Fctn"`
	ATMSvcCd Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATMSvcCd,omitempty"`
	HstSvcCd Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 HstSvcCd,omitempty"`
}

// ATMService6
//
// Service provided by the ATM inside the session.
type ATMService6 struct {
	SvcRef   Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SvcRef,omitempty"`
	ATMSvcCd Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATMSvcCd,omitempty"`
	HstSvcCd Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 HstSvcCd,omitempty"`
	SvcTp    ATMServiceType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SvcTp"`
}

// ATMService7
//
// Services allowed for the customer's profile.
type ATMService7 struct {
	SvcTp       ATMServiceType4Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SvcTp"`
	Lmts        []ATMTransactionAmounts3 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Lmts,omitempty"`
	PrefrdWdrwl ATMTransaction8          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrefrdWdrwl,omitempty"`
}

// May be one of ASTS, CDVF, DCCS, XRTD, XRTW, EMVS, CMPF, BLCQ
type ATMServiceType3Code string

// May be one of ASTS, BLCQ, DPST, PINC, STDR, PRFL, PATH, CHSN
type ATMServiceType4Code string

// May be one of INSV, OUTS
type ATMStatus1Code string

// ATMTransaction7
//
// Inquiry information for the transaction.
type ATMTransaction7 struct {
	TxId         TransactionIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TxId"`
	TxRspn       ResponseType3          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TxRspn"`
	Actn         []Action5              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Actn,omitempty"`
	CstmrSvcPrfl ATMCustomerProfile3    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CstmrSvcPrfl,omitempty"`
	CcyConvs     CurrencyConversion3    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CcyConvs,omitempty"`
	AcctInf      []CardAccount6         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctInf,omitempty"`
	AcctStmtData []ATMAccountStatement1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctStmtData,omitempty"`
	CcyXchg      CurrencyConversion5    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CcyXchg,omitempty"`
	ICCRltdData  Max10000Binary         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ICCRltdData,omitempty"`
	Cmd          []ATMCommand1          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Cmd,omitempty"`
}

// ATMTransaction8
//
// Preferred withdrawal transaction chosen by the the customer.
type ATMTransaction8 struct {
	Amt       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Amt,omitempty"`
	Ccy       ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ccy,omitempty"`
	RctFlg    bool               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RctFlg,omitempty"`
	BalPrtFlg bool               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BalPrtFlg,omitempty"`
	MixTp     Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MixTp,omitempty"`
	Mix       []ATMMediaMix2     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Mix,omitempty"`
}

// ATMTransactionAmounts3
//
// Limit of amounts for the customer.
type ATMTransactionAmounts3 struct {
	Tp     Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tp"`
	Labl   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Labl,omitempty"`
	Ccy    ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ccy"`
	MinAmt float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MinAmt,omitempty"`
	MaxAmt float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MaxAmt,omitempty"`
}

// ATMTransactionAmounts4
//
// Withdrawal limits for the account.
type ATMTransactionAmounts4 struct {
	DispFlg   bool            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DispFlg,omitempty"`
	AvlblAmt  float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AvlblAmt,omitempty"`
	DalyBal   DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DalyBal,omitempty"`
	WklyBal   DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 WklyBal,omitempty"`
	MnthlyBal DetailedAmount4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MnthlyBal,omitempty"`
}

// ATMTransactionAmounts5
//
// Deposit limits for the account.
type ATMTransactionAmounts5 struct {
	DispFlg bool    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DispFlg,omitempty"`
	MaxAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MaxAmt,omitempty"`
}

// AccountIdentification31Choice
//
// Unique identifier of an account, as assigned by the account servicer.
type AccountIdentification31Choice struct {
	IBAN     IBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 IBAN"`
	BBAN     BBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BBAN"`
	UPIC     UPICIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UPIC"`
	DmstAcct SimpleIdentificationInformation4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DmstAcct"`
}

// Action5
//
// Set of actions to be performed by the card acceptor.
type Action5 struct {
	ActnTp     ActionType6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ActnTp"`
	MsgToPres  ActionMessage4       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MsgToPres,omitempty"`
	ReqToPrfrm MessageFunction7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ReqToPrfrm,omitempty"`
}

// ActionMessage4
//
// Information to display, print or log.
type ActionMessage4 struct {
	Frmt         OutputFormat2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Frmt,omitempty"`
	Msg          Max20000Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Msg,omitempty"`
	Ref          Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ref,omitempty"`
	Dvc          ATMDevice1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Dvc,omitempty"`
	MsgCnttSgntr Max35Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MsgCnttSgntr,omitempty"`
}

// May be one of DCCQ, FEES, HAMT, LAMT, BUSY, CPTR, DISP, CPNS, RQST, PINL, PINR, TRCK
type ActionType6Code string

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5
type Algorithm12Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1, EA9C, EA5C
type Algorithm13Code string

// May be one of EA2C, E3DC, EA9C, EA5C
type Algorithm15Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

// AlgorithmIdentification11
//
// Cryptographic algorithms and parameters for the protection of transported keys by an asymmetric key.
type AlgorithmIdentification11 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Algo"`
	Param Parameter4     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Param,omitempty"`
}

// AlgorithmIdentification12
//
// Mask generator function cryptographic algorithm and parameters.
type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Param,omitempty"`
}

// AlgorithmIdentification13
//
// Cryptographic algorithm and parameters for the protection of the transported key.
type AlgorithmIdentification13 struct {
	Algo  Algorithm13Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Param,omitempty"`
}

// AlgorithmIdentification14
//
// Cryptographic algorithm and parameters for encryptions with a symmetric cryptographic key.
type AlgorithmIdentification14 struct {
	Algo  Algorithm15Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Param,omitempty"`
}

// AlgorithmIdentification15
//
// Identification of a cryptographic algorithm and parameters for the MAC computation.
type AlgorithmIdentification15 struct {
	Algo  Algorithm12Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Param,omitempty"`
}

// AmountAndDirection43
//
// Signed amount.
type AmountAndDirection43 struct {
	Amt CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Amt"`
	Sgn bool              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Sgn,omitempty"`
	Dt  ISODate           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Dt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

// AuthenticatedData4
//
// Message authentication code (MAC), computed on the data to protect with an encryption key.
type AuthenticatedData4 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Vrsn,omitempty"`
	Rcpt        []Recipient4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rcpt"`
	MACAlgo     AlgorithmIdentification15 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MAC"`
}

// May be one of ICCD, AGNT, MERC, ACQR, ISSR, TRML
type AuthenticationEntity2Code string

// May be one of TOKA, BIOM, MOBL, OTHR, FPIN, NPIN, PSWD, SCRT, SCNL
type AuthenticationMethod7Code string

// AutomatedTellerMachine2
//
// ATM information.
type AutomatedTellerMachine2 struct {
	Id      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Id"`
	AddtlId Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AddtlId,omitempty"`
	SeqNb   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SeqNb,omitempty"`
	BaseCcy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BaseCcy,omitempty"`
	Lctn    PostalAddress17    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Lctn,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

// CardAccount6
//
// Customer account information.
type CardAccount6 struct {
	AcctTp      CardAccountType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctTp,omitempty"`
	AcctNm      Max70Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctNm,omitempty"`
	Ccy         ActiveCurrencyCode            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ccy,omitempty"`
	AcctIdr     AccountIdentification31Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AcctIdr,omitempty"`
	CdtRef      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CdtRef,omitempty"`
	Svcr        PartyIdentification72Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Svcr,omitempty"`
	Bal         AmountAndDirection43          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Bal,omitempty"`
	BalDispFlg  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BalDispFlg,omitempty"`
	DfltAcctInd bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DfltAcctInd,omitempty"`
	AllwdSvcs   []ATMServiceType4Code         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AllwdSvcs,omitempty"`
	WdrwlLmts   ATMTransactionAmounts4        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 WdrwlLmts,omitempty"`
	DpstLmts    ATMTransactionAmounts5        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DpstLmts,omitempty"`
}

// May be one of CTDP, CHCK, CRDT, CURR, CDBT, DFLT, EPRS, HEQL, ISTL, INVS, LCDT, MBNW, MNMK, MNMC, MTGL, RTRM, RVLV, SVNG, STBD, UVRL
type CardAccountType2Code string

// CertificateIssuer1
//
// Certificate issuer name (see X.509).
type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RltvDstngshdNm"`
}

// Commission18
//
// Amount of money due to a party as compensation for a service.
type Commission18 struct {
	Rate     float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rate"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AddtlInf,omitempty"`
}

// Commission19
//
// Amount of money due to a party as compensation for a service.
type Commission19 struct {
	Amt      float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Amt"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AddtlInf,omitempty"`
}

// ContentInformationType10
//
// General cryptographic message syntax (CMS) containing encrypted data.
type ContentInformationType10 struct {
	CnttTp     ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CnttTp"`
	EnvlpdData EnvelopedData4   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 EnvlpdData"`
}

// ContentInformationType15
//
// General cryptographic message syntax (CMS) containing authenticated data.
type ContentInformationType15 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CnttTp"`
	AuthntcdData AuthenticatedData4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AuthntcdData"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// CurrencyAndAmount
//
// Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217.  The decimal separator is a dot.
// Note: A zero amount is considered a positive amount.
type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

// CurrencyConversion2
//
// Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be accepted by the cardholder.
type CurrencyConversion2 struct {
	CcyConvsId    Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CcyConvsId,omitempty"`
	TrgtCcy       CurrencyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TrgtCcy"`
	RsltgAmt      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RsltgAmt"`
	XchgRate      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 XchgRate"`
	XchgRateDcml  float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 XchgRateDcml,omitempty"`
	NvrtdXchgRate float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NvrtdXchgRate,omitempty"`
	QtnDt         ISODateTime      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 QtnDt,omitempty"`
	VldUntil      ISODateTime      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 VldUntil,omitempty"`
	SrcCcy        CurrencyDetails1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SrcCcy"`
	OrgnlAmt      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 OrgnlAmt"`
	ComssnDtls    []Commission19   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ComssnDtls,omitempty"`
	MrkUpDtls     []Commission18   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MrkUpDtls,omitempty"`
	DclrtnDtls    Max2048Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DclrtnDtls,omitempty"`
}

// CurrencyConversion3
//
// Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider.
type CurrencyConversion3 struct {
	Rslt    CurrencyConversionResponse1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rslt"`
	RsltRsn Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RsltRsn,omitempty"`
	Convs   CurrencyConversion2             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Convs,omitempty"`
}

// CurrencyConversion5
//
// Exchange rate and calculated amount to be presented to the customer when the dispense currency or the deposit currency (target currency) is different to account currency (source currency).
type CurrencyConversion5 struct {
	SrcCcy      ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SrcCcy"`
	SrcCcyNmrc  ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SrcCcyNmrc"`
	TrgtCcy     ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TrgtCcy"`
	TrgtCcyNmrc Exact3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TrgtCcyNmrc"`
	Rate        float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rate"`
	ClctdAmt    float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ClctdAmt"`
}

// May be one of ODCC, DCCA, ICRD, IMER, IPRD, IRAT, NDCC
type CurrencyConversionResponse1Code string

// CurrencyDetails1
//
// Details of a currency.
type CurrencyDetails1 struct {
	AlphaCd CurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AlphaCd"`
	NmrcCd  Exact3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NmrcCd"`
	Dcml    float64           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Dcml"`
	Nm      Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Nm,omitempty"`
}

// May be one of ATMC, ATMP, APPR, CRAP, CPRC, OEXR, AMNT, LOCC, MNOC
type DataSetCategory7Code string

// DetailedAmount4
//
// Detailed amounts associated with the total amount of transaction.
type DetailedAmount4 struct {
	Amt  float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Amt"`
	Labl Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Labl,omitempty"`
}

type Document struct {
	ATMNqryRspn ATMInquiryResponseV01 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ATMNqryRspn"`
}

// EncapsulatedContent3
//
// Data to authenticate.
type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Cntt,omitempty"`
}

// EncryptedContent3
//
// Encrypted data with an encryption key.
type EncryptedContent3 struct {
	CnttTp         ContentType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CnttNcrptnAlgo"`
	NcrptdData     Max100KBinary             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptdData"`
}

// May be one of TR31, TR34
type EncryptionFormat1Code string

// EnvelopedData4
//
// Encrypted data with encryption key.
type EnvelopedData4 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Vrsn,omitempty"`
	Rcpt       []Recipient4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rcpt"`
	NcrptdCntt EncryptedContent3  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptdCntt,omitempty"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// GenericIdentification1
//
// Information related to an identification, eg, party identification or account identification.
type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Issr,omitempty"`
}

// GenericIdentification77
//
// Identification of an entity.
type GenericIdentification77 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Id"`
	Tp     PartyType12Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tp"`
	Issr   PartyType12Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 ShrtNm,omitempty"`
}

// GeographicCoordinates1
//
// Location on the Earth specified by two numbers representing vertical and horizontal position.
type GeographicCoordinates1 struct {
	Lat  Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Lat"`
	Long Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Long"`
}

// GeographicLocation1Choice
//
// Geographic location of the ATM specified by geographic coordinates or UTM coordinates.
type GeographicLocation1Choice struct {
	GeogcCordints GeographicCoordinates1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 GeogcCordints"`
	UTMCordints   UTMCoordinates1        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UTMCordints"`
}

// Header20
//
// Information related to the protocol management on a segment of the path from the ATM to the acquirer.
type Header20 struct {
	MsgFctn    ATMMessageFunction1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MsgFctn"`
	PrtcolVrsn Max6Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrtcolVrsn"`
	XchgId     Max3NumericText     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 XchgId"`
	CreDtTm    ISODateTime         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CreDtTm"`
	InitgPty   Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 InitgPty"`
	RcptPty    Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RcptPty,omitempty"`
	PrcStat    Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrcStat,omitempty"`
	Tracblt    []Traceability4     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Tracblt,omitempty"`
}

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// ISODate
//
// A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

// ISODateTime
//
// A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
// Note on the time format:
// 1) beginning / end of calendar day
// 00:00:00 = the beginning of a calendar day
// 24:00:00 = the end of a calendar day
// 2) fractions of second in time format
// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// IssuerAndSerialNumber1
//
// Certificate issuer name and serial number  (see X.509).
type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SrlNb"`
}

// KEK4
//
// Key encryption key (KEK), using previously distributed symmetric key.
type KEK4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptdKey"`
}

// KEKIdentifier2
//
// Identification of a key encryption key (KEK), using previously distributed symmetric key.
type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DerivtnId,omitempty"`
}

// KeyTransport4
//
// Key encryption key (KEK), encrypted with a previously distributed asymmetric public key.
type KeyTransport4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Vrsn,omitempty"`
	RcptId        Recipient5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification11 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptdKey"`
}

// Max10000Binary
//
// Specifies a binary string with a maximum length of 10000 binary bytes.
type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Max100KBinary
//
// Binary data of 100K maximum.
type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max10Text string

// Max140Binary
//
// Specifies a binary string with a maximum length of 140 binary bytes.
type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max20000Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Max35Binary
//
// Specifies a binary string with a maximum length of 35 binary bytes.
type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

// Max5000Binary
//
// Specifies a binary string with a maximum length of 5000 binary bytes.
type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Max500Binary
//
// Specifies a binary string with a maximum length of 500 binary bytes.
type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// May be one of BALN, CMPA, CMPD, ACMD, DVCC, DIAQ, DIAP, GSTS, INQQ, INQP, KYAQ, KYAP, PINQ, PINP, RJAQ, RJAP, WITV, WITK, WITQ, WITP, INQC, H2AP, H2AQ, TMOP, CSEC, DSEC, SKSC, SSTS
type MessageFunction7Code string

// May be one of BALN, GSTS, DSEC, INQC, KEYQ, SSTS
type MessageFunction8Code string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

// Min5Max16Binary
//
// Specifies a binary string with a minimum length of 5 bytes, and a maximum length of 16 bytes.
type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

// May be one of MREF, SREF, TEXT, HTML
type OutputFormat2Code string

// Parameter4
//
// Parameters of the asymmetric encryption algorithm.
type Parameter4 struct {
	NcrptnFrmt   EncryptionFormat1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm11Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 MskGnrtrAlgo,omitempty"`
}

// Parameter5
//
// Parameters associated to a mask generator cryptographic function.
type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 DgstAlgo,omitempty"`
}

// Parameter6
//
// Parameters associated to a cryptographic encryption algorithm.
type Parameter6 struct {
	NcrptnFrmt   EncryptionFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BPddg,omitempty"`
}

// Parameter7
//
// Parameters associated to the MAC algorithm.
type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BPddg,omitempty"`
}

// PartyIdentification72Choice
//
// Choice of identification of a party. The party can be identified by giving a BIC or a proprietary code.
type PartyIdentification72Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PrtryId"`
}

// May be one of ACQR, ATMG, CISP, DLIS, HSTG, ITAG, OATM
type PartyType12Code string

// PlainCardData14
//
// Sensible data associated with the payment card performing the transaction.
type PlainCardData14 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PAN,omitempty"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CardSeqNb,omitempty"`
	FctvDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 FctvDt,omitempty"`
	XpryDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 XpryDt,omitempty"`
	Trck1     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Trck1,omitempty"`
	Trck2     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Trck2,omitempty"`
	Trck3     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Trck3,omitempty"`
}

// PostalAddress17
//
// Information that locates and identifies a specific address, as defined by postal services or in free format text.
type PostalAddress17 struct {
	AdrLine     []Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 BldgNb,omitempty"`
	PstCd       Max16Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 PstCd,omitempty"`
	TwnNm       Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TwnNm"`
	CtrySubDvsn []Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Ctry"`
	GLctn       GeographicLocation1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 GLctn,omitempty"`
}

// Recipient4Choice
//
// Transport key or key encryption key (KEK) for the recipient.
type Recipient4Choice struct {
	KeyTrnsprt KeyTransport4  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyTrnsprt"`
	KEK        KEK4           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KEK"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyIdr"`
}

// Recipient5Choice
//
// Identification of a cryptographic asymmetric key.
type Recipient5Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 IssrAndSrlNb"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 KeyIdr"`
}

// RelativeDistinguishedName1
//
// Relative distinguished name defined by X.500 and X.509.
type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AttrVal"`
}

// May be one of APPR, DECL, PART
type Response4Code string

// ResponseType3
//
// Response of a requested service.
type ResponseType3 struct {
	Rspn         Response4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rspn"`
	RspnRsn      ResultDetail2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RspnRsn,omitempty"`
	AddtlRspnInf Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AddtlRspnInf,omitempty"`
}

// May be one of ACTF, ACQS, AMLV, AMTA, AUTH, BANK, CRDR, CRDF, ACTC, CTVG, DBER, FEES, TXNL, AMTD, NMBD, CRDX, FDCL, FMTR, TXNG, FNDI, ACPI, AMTI, ADDI, BRHI, CHDI, CRDI, CTFV, AMTO, PINV, TKKO, SGNI, TKID, TXNV, DATI, ISSP, ISSF, ISSO, ISST, ISSU, KEYS, LBLA, CRDL, MACR, MACK, ICCM, PINN, CRDA, LBLU, PINA, NPRA, OFFL, ONLP, NPRC, TXNM, OTHR, BALO, SEQO, PINC, PIND, PINS, PINX, PINE, QMAX, RECD, CRDT, SECV, SRVU, SFWE, SPCC, CRDS, SRCH, CNTC, FRDS, SYSP, SYSM, TRMI, ACTT, TTLV, TXNU, TXND, ORGF, UNBO, UNBP, UNBC, CMKY, CRDU, SVSU, VNDR, VNDF, AMTW, NMBW, CRDW
type ResultDetail2Code string

// SimpleIdentificationInformation4
//
// Information related to an identification, eg, party identification or account identification.
type SimpleIdentificationInformation4 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Id"`
}

// May be one of ASAP, CRIT, DTIM, ENCS
type TMSContactLevel2Code string

// Traceability4
//
// Identification of partners involved in exchange from the ATM to the issuer, with the relative timestamp of their exchanges.
type Traceability4 struct {
	RlayId      GenericIdentification77 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 RlayId"`
	SeqNb       Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 SeqNb,omitempty"`
	TracDtTmIn  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TracDtTmIn"`
	TracDtTmOut ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TracDtTmOut"`
}

// TransactionIdentifier1
//
// Identification of the transaction in an unambiguous way.
type TransactionIdentifier1 struct {
	TxDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TxDtTm"`
	TxRef  Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 TxRef"`
}

// TransactionVerificationResult5
//
// Result of performed verifications for the transaction.
type TransactionVerificationResult5 struct {
	Mtd         AuthenticationMethod7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Mtd"`
	VrfctnNtty  AuthenticationEntity2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 VrfctnNtty,omitempty"`
	Rslt        Verification1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 Rslt,omitempty"`
	AddtlRslt   Max500Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AddtlRslt,omitempty"`
	AuthntcnTkn Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 AuthntcnTkn,omitempty"`
}

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

// UTMCoordinates1
//
// Location on the Earth specified by the Universal Transverse Mercator coordinate system, using the WGS84 geodesic system.
type UTMCoordinates1 struct {
	UTMZone    Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UTMZone"`
	UTMEstwrd  float64   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UTMEstwrd"`
	UTMNrthwrd float64   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.007.001.01 UTMNrthwrd"`
}

// May be one of FAIL, MISS, NOVF, PART, SUCC, ERRR
type Verification1Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
