// Code generated by main. DO NOT EDIT.

package catp_003_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

// ATMCassette1
//
// Information on the cassette of an ATM.
type ATMCassette1 struct {
	PhysId    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PhysId,omitempty"`
	LogclId   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 LogclId"`
	Tp        ATMCassetteType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tp"`
	SubTp     []ATMNoteType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SubTp,omitempty"`
	MdiaTp    ATMMediaType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MdiaTp,omitempty"`
	MdiaCntrs []ATMCassetteCounters1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MdiaCntrs,omitempty"`
}

// ATMCassetteCounters1
//
// ATM cassette counter per unit value or globally.
type ATMCassetteCounters1 struct {
	UnitVal float64                `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UnitVal,omitempty"`
	Ccy     ActiveCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	ItmTp   ATMNoteType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ItmTp,omitempty"`
	Cntr    []ATMCassetteCounters2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cntr,omitempty"`
	CurNb   float64                `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CurNb"`
	CurAmt  float64                `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CurAmt,omitempty"`
}

// ATMCassetteCounters2
//
// Counters of media inside an ATM cassette.
type ATMCassetteCounters2 struct {
	Tp        ATMCounterType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tp"`
	AddedNb   float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddedNb,omitempty"`
	RmvdNb    float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RmvdNb,omitempty"`
	DspnsdNb  float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DspnsdNb,omitempty"`
	DpstNb    float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DpstNb,omitempty"`
	RcycldNb  float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RcycldNb,omitempty"`
	RtrctdNb  float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RtrctdNb,omitempty"`
	RjctdNb   float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RjctdNb,omitempty"`
	PresntdNb float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PresntdNb,omitempty"`
}

// May be one of DPST, DISP, RCYC, RJCT, RPLT, RTRC
type ATMCassetteType1Code string

// ATMConfigurationParameter1
//
// Configuration parameter version of the ATM.
type ATMConfigurationParameter1 struct {
	Tp   DataSetCategory7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tp"`
	Vrsn Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Vrsn"`
}

// ATMContext2
//
// Context in which the transaction is performed.
type ATMContext2 struct {
	SsnRef Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SsnRef,omitempty"`
	Svc    ATMService2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Svc,omitempty"`
}

// May be one of INQU, CTXN, CTOF, BDAY, PRTN, OPER
type ATMCounterType1Code string

// ATMCustomer3
//
// Customer involved in a withdrawal transaction.
type ATMCustomer3 struct {
	Prfl         ATMCustomerProfile1              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Prfl,omitempty"`
	SelctdLang   string                           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SelctdLang,omitempty"`
	AuthntcnRslt []TransactionVerificationResult5 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthntcnRslt"`
}

// ATMCustomerProfile1
//
// Profile of the customer selected by an ATM.
type ATMCustomerProfile1 struct {
	RtrvlMd ATMCustomerProfile1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RtrvlMd"`
	PrflRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrflRef,omitempty"`
	CstmrId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CstmrId,omitempty"`
}

// May be one of CRDF, OREQ, PREQ
type ATMCustomerProfile1Code string

// May be one of CDIS, DPRN, JRNL, JPRN, RPRN, RWDR
type ATMDevice1Code string

// ATMEnvironment3
//
// Environment of the withdrawal transaction.
type ATMEnvironment3 struct {
	Acqrr    Acquirer7               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Acqrr,omitempty"`
	ATMMgrId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMMgrId,omitempty"`
	HstgNtty TerminalHosting1        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 HstgNtty,omitempty"`
	ATM      AutomatedTellerMachine1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATM"`
	Cstmr    ATMCustomer3            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cstmr"`
	Card     PaymentCard17           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Card,omitempty"`
}

// ATMEquipment1
//
// ATM terminal equipment.
type ATMEquipment1 struct {
	Manfctr    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Manfctr,omitempty"`
	Mdl        Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Mdl,omitempty"`
	SrlNb      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SrlNb,omitempty"`
	ApplPrvdr  Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ApplPrvdr,omitempty"`
	ApplNm     Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ApplNm,omitempty"`
	ApplVrsn   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ApplVrsn,omitempty"`
	ApprvlNb   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ApprvlNb,omitempty"`
	CfgtnParam []ATMConfigurationParameter1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CfgtnParam,omitempty"`
}

// May be one of CARD, COIN, CMDT, CPNS, NOTE, STMP, UDTM
type ATMMediaType1Code string

// ATMMessageFunction1
//
// Identifies the type of process related to an ATM message.
type ATMMessageFunction1 struct {
	Fctn     MessageFunction7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Fctn"`
	ATMSvcCd Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMSvcCd,omitempty"`
	HstSvcCd Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 HstSvcCd,omitempty"`
}

// May be one of ALLT, CNTR, IDVD, SCNT, UNFT
type ATMNoteType1Code string

// May be one of CNTR, FITN, FITU, NTRL, SPCT, UNFT, UNRG
type ATMNoteType2Code string

// ATMService2
//
// Withdrawal service provided by the ATM inside the session.
type ATMService2 struct {
	SvcRef   Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SvcRef,omitempty"`
	ATMSvcCd Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMSvcCd,omitempty"`
	HstSvcCd Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 HstSvcCd,omitempty"`
	SvcTp    ATMServiceType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SvcTp"`
}

// May be one of CHSN, PATH, PRFL, STDR, SPRV
type ATMServiceType1Code string

// ATMTotals1
//
// Current totals of the ATM.
type ATMTotals1 struct {
	MdiaTp   ATMMediaType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MdiaTp,omitempty"`
	Ccy      ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	ATMBal   float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMBal,omitempty"`
	ATMCur   float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMCur,omitempty"`
	ATMBalNb float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMBalNb,omitempty"`
	ATMCurNb float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMCurNb,omitempty"`
}

// ATMTransaction3
//
// Withdrawal transaction for which the completion is sent.
type ATMTransaction3 struct {
	TxId           TransactionIdentifier1    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TxId"`
	TxSts          ATMTransactionStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TxSts"`
	MultiBndl      bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MultiBndl,omitempty"`
	BndlPresntdAmt []float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BndlPresntdAmt,omitempty"`
	PresntdAmtSts  ATMTransactionStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PresntdAmtSts"`
	Incdnt         []FailureReason4Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Incdnt,omitempty"`
	IncdntDtl      []Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 IncdntDtl,omitempty"`
	RcncltnId      Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RcncltnId,omitempty"`
	AcctData       CardAccount5              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AcctData,omitempty"`
	PrtctdAcctData ContentInformationType10  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrtctdAcctData,omitempty"`
	TtlPresntdAmt  AmountAndCurrency1        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TtlPresntdAmt"`
	TtlAuthrsdAmt  float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TtlAuthrsdAmt,omitempty"`
	TtlReqdAmt     float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TtlReqdAmt,omitempty"`
	DtldReqdAmt    DetailedAmount12          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DtldReqdAmt,omitempty"`
	CcyConvs       CurrencyConversion4       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CcyConvs,omitempty"`
	AddtlChrg      []DetailedAmount13        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlChrg,omitempty"`
	ReqdRct        bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ReqdRct,omitempty"`
	RctPrtd        bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RctPrtd,omitempty"`
	CaptrdCard     bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CaptrdCard,omitempty"`
	Lmts           ATMTransactionAmounts2    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Lmts,omitempty"`
	AuthstnRslt    AuthorisationResult9      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthstnRslt,omitempty"`
	ICCRltdData    Max10000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ICCRltdData,omitempty"`
	ATMTtls        []ATMTotals1              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMTtls,omitempty"`
	Csstt          []ATMCassette1            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Csstt,omitempty"`
}

// ATMTransactionAmounts2
//
// Limit of amounts for the customer.
type ATMTransactionAmounts2 struct {
	Ccy          ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	MaxAuthsbAmt float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MaxAuthsbAmt,omitempty"`
	MinAllwdAmt  float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MinAllwdAmt,omitempty"`
	MaxAllwdAmt  float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MaxAllwdAmt,omitempty"`
	DalyBal      DetailedAmount4    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DalyBal,omitempty"`
	WklyBal      DetailedAmount4    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 WklyBal,omitempty"`
	MnthlyBal    DetailedAmount4    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MnthlyBal,omitempty"`
}

// May be one of DOBT, FAIL, SCSS
type ATMTransactionStatus1Code string

// May be one of FULL, PART, NONE
type ATMTransactionStatus2Code string

// ATMWithdrawalCompletionAdvice1
//
// Information related to the completion of a withdrawal on the ATM.
type ATMWithdrawalCompletionAdvice1 struct {
	Envt  ATMEnvironment3 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Envt"`
	Cntxt ATMContext2     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cntxt"`
	Tx    ATMTransaction3 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tx"`
}

// ATMWithdrawalCompletionAdviceV01
//
// The ATMWithdrawalCompletionAdvice message is sent by an ATM to an acquirer or its agent to inform of the result of a withdrawal transaction at an ATM.
// If the ATM is configured to only send negative completion, a generic completion message should be used instead of ATMCompletionAdvice.
type ATMWithdrawalCompletionAdviceV01 struct {
	Hdr                      Header21                       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Hdr"`
	PrtctdATMWdrwlCmpltnAdvc ContentInformationType10       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrtctdATMWdrwlCmpltnAdvc,omitempty"`
	ATMWdrwlCmpltnAdvc       ATMWithdrawalCompletionAdvice1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMWdrwlCmpltnAdvc,omitempty"`
	SctyTrlr                 ContentInformationType15       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SctyTrlr,omitempty"`
}

// May be one of ACSL, ENTR, IMAC, IMPL, NOSL, TPSL
type AccountChoiceMethod1Code string

// AccountIdentification31Choice
//
// Unique identifier of an account, as assigned by the account servicer.
type AccountIdentification31Choice struct {
	IBAN     IBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 IBAN"`
	BBAN     BBANIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BBAN"`
	UPIC     UPICIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UPIC"`
	DmstAcct SimpleIdentificationInformation4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DmstAcct"`
}

// Acquirer7
//
// Acquirer of the withdrawal transaction, in charge of the funds settlement with the issuer.
type Acquirer7 struct {
	AcqrgInstn Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AcqrgInstn,omitempty"`
	Brnch      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Brnch,omitempty"`
}

// Action5
//
// Set of actions to be performed by the card acceptor.
type Action5 struct {
	ActnTp     ActionType6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ActnTp"`
	MsgToPres  ActionMessage4       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MsgToPres,omitempty"`
	ReqToPrfrm MessageFunction7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ReqToPrfrm,omitempty"`
}

// ActionMessage4
//
// Information to display, print or log.
type ActionMessage4 struct {
	Frmt         OutputFormat2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Frmt,omitempty"`
	Msg          Max20000Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Msg,omitempty"`
	Ref          Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ref,omitempty"`
	Dvc          ATMDevice1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Dvc,omitempty"`
	MsgCnttSgntr Max35Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MsgCnttSgntr,omitempty"`
}

// May be one of DCCQ, FEES, HAMT, LAMT, BUSY, CPTR, DISP, CPNS, RQST, PINL, PINR, TRCK
type ActionType6Code string

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5
type Algorithm12Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1, EA9C, EA5C
type Algorithm13Code string

// May be one of EA2C, E3DC, EA9C, EA5C
type Algorithm15Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

// AlgorithmIdentification11
//
// Cryptographic algorithms and parameters for the protection of transported keys by an asymmetric key.
type AlgorithmIdentification11 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Algo"`
	Param Parameter4     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Param,omitempty"`
}

// AlgorithmIdentification12
//
// Mask generator function cryptographic algorithm and parameters.
type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Param,omitempty"`
}

// AlgorithmIdentification13
//
// Cryptographic algorithm and parameters for the protection of the transported key.
type AlgorithmIdentification13 struct {
	Algo  Algorithm13Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Param,omitempty"`
}

// AlgorithmIdentification14
//
// Cryptographic algorithm and parameters for encryptions with a symmetric cryptographic key.
type AlgorithmIdentification14 struct {
	Algo  Algorithm15Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Param,omitempty"`
}

// AlgorithmIdentification15
//
// Identification of a cryptographic algorithm and parameters for the MAC computation.
type AlgorithmIdentification15 struct {
	Algo  Algorithm12Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Param,omitempty"`
}

// AmountAndCurrency1
//
// Amount to be authorised by the issuer.
type AmountAndCurrency1 struct {
	Amt float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Amt"`
	Ccy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

// AuthenticatedData4
//
// Message authentication code (MAC), computed on the data to protect with an encryption key.
type AuthenticatedData4 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Vrsn,omitempty"`
	Rcpt        []Recipient4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rcpt"`
	MACAlgo     AlgorithmIdentification15 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MAC"`
}

// May be one of ICCD, AGNT, MERC, ACQR, ISSR, TRML
type AuthenticationEntity2Code string

// May be one of TOKA, BIOM, MOBL, OTHR, FPIN, NPIN, PSWD, SCRT, SCNL
type AuthenticationMethod7Code string

// AuthorisationResult9
//
// Outcome of the withdrawal authorisation.
type AuthorisationResult9 struct {
	AuthstnNtty PartyType13Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthstnNtty,omitempty"`
	AuthstnRspn ResponseType3   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthstnRspn"`
	RspnTrac    []ResponseType4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RspnTrac,omitempty"`
	AuthstnCd   Min6Max8Text    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthstnCd,omitempty"`
	Actn        []Action5       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Actn,omitempty"`
}

// AutomatedTellerMachine1
//
// ATM information.
type AutomatedTellerMachine1 struct {
	Id       Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Id"`
	AddtlId  Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlId,omitempty"`
	SeqNb    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SeqNb,omitempty"`
	BaseCcy  ActiveCurrencyCode              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BaseCcy"`
	Lctn     PostalAddress17                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Lctn,omitempty"`
	LctnCtgy TransactionEnvironment2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 LctnCtgy,omitempty"`
	Cpblties PointOfInteractionCapabilities5 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cpblties,omitempty"`
	Eqpmnt   ATMEquipment1                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Eqpmnt,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

// CardAccount5
//
// Customer account information.
type CardAccount5 struct {
	SelctnMtd    AccountChoiceMethod1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SelctnMtd,omitempty"`
	SelctdAcctTp CardAccountType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SelctdAcctTp,omitempty"`
	AcctNm       Max70Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AcctNm,omitempty"`
	Ccy          ActiveCurrencyCode            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	AcctIdr      AccountIdentification31Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AcctIdr,omitempty"`
	CdtRef       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CdtRef,omitempty"`
	Svcr         PartyIdentification72Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Svcr,omitempty"`
}

// May be one of CTDP, CHCK, CRDT, CURR, CDBT, DFLT, EPRS, HEQL, ISTL, INVS, LCDT, MBNW, MNMK, MNMC, MTGL, RTRM, RVLV, SVNG, STBD, UVRL
type CardAccountType2Code string

// May be one of TAGC, PHYS, BRCD, MGST, CICC, DFLE, CTLS, ECTL
type CardDataReading1Code string

// May be one of ECTL, CICC, MGST, CTLS
type CardDataReading4Code string

// May be one of FFLB, SFLB, NFLB
type CardFallback1Code string

// May be one of NPIN, FCPN, FEPN, FDSG, FBIO, FBIG, PKIS, PCOD
type CardholderVerificationCapability3Code string

// CertificateIssuer1
//
// Certificate issuer name (see X.509).
type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RltvDstngshdNm"`
}

// Commission18
//
// Amount of money due to a party as compensation for a service.
type Commission18 struct {
	Rate     float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rate"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlInf,omitempty"`
}

// Commission19
//
// Amount of money due to a party as compensation for a service.
type Commission19 struct {
	Amt      float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Amt"`
	AddtlInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlInf,omitempty"`
}

// ContentInformationType10
//
// General cryptographic message syntax (CMS) containing encrypted data.
type ContentInformationType10 struct {
	CnttTp     ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CnttTp"`
	EnvlpdData EnvelopedData4   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 EnvlpdData"`
}

// ContentInformationType15
//
// General cryptographic message syntax (CMS) containing authenticated data.
type ContentInformationType15 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CnttTp"`
	AuthntcdData AuthenticatedData4 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthntcdData"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// CurrencyAndAmount
//
// Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217.  The decimal separator is a dot.
// Note: A zero amount is considered a positive amount.
type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

// CurrencyConversion4
//
// Currency conversion accepted by the customer, either to convert the amount to dispense in the base currency of the ATM, or to convert the total requested amount in the currency of the customer (so called dynamic currency conversion).
type CurrencyConversion4 struct {
	CcyConvsId    Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CcyConvsId,omitempty"`
	TrgtCcy       CurrencyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TrgtCcy"`
	RsltgAmt      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RsltgAmt"`
	XchgRate      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 XchgRate"`
	XchgRateDcml  float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 XchgRateDcml,omitempty"`
	NvrtdXchgRate float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NvrtdXchgRate,omitempty"`
	QtnDt         ISODateTime      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 QtnDt,omitempty"`
	VldUntil      ISODateTime      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 VldUntil,omitempty"`
	SrcCcy        CurrencyDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SrcCcy"`
	OrgnlAmt      float64          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 OrgnlAmt"`
	ComssnDtls    []Commission19   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ComssnDtls,omitempty"`
	MrkUpDtls     []Commission18   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MrkUpDtls,omitempty"`
	DclrtnDtls    Max2048Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DclrtnDtls,omitempty"`
}

// CurrencyDetails2
//
// Details of a currency.
type CurrencyDetails2 struct {
	AlphaCd ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AlphaCd,omitempty"`
	NmrcCd  Exact3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NmrcCd,omitempty"`
	Dcml    float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Dcml,omitempty"`
	Nm      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Nm,omitempty"`
}

// May be one of ATMC, ATMP, APPR, CRAP, CPRC, OEXR, AMNT, LOCC, MNOC
type DataSetCategory7Code string

// DetailedAmount12
//
// Amounts of the withdrawal transaction.
type DetailedAmount12 struct {
	AmtToDspns float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AmtToDspns"`
	Ccy        ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	Fees       []DetailedAmount13 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Fees,omitempty"`
	Dontn      []DetailedAmount13 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Dontn,omitempty"`
}

// DetailedAmount13
//
// Withdrawal fees, accepted by the customer.
type DetailedAmount13 struct {
	Amt  float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Amt"`
	Ccy  ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ccy,omitempty"`
	Labl Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Labl,omitempty"`
}

// DetailedAmount4
//
// Detailed amounts associated with the total amount of transaction.
type DetailedAmount4 struct {
	Amt  float64    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Amt"`
	Labl Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Labl,omitempty"`
}

type Document struct {
	ATMWdrwlCmpltnAdvc ATMWithdrawalCompletionAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ATMWdrwlCmpltnAdvc"`
}

// EncapsulatedContent3
//
// Data to authenticate.
type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cntt,omitempty"`
}

// EncryptedContent3
//
// Encrypted data with an encryption key.
type EncryptedContent3 struct {
	CnttTp         ContentType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CnttNcrptnAlgo"`
	NcrptdData     Max100KBinary             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptdData"`
}

// May be one of TR31, TR34
type EncryptionFormat1Code string

// EnvelopedData4
//
// Encrypted data with encryption key.
type EnvelopedData4 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Vrsn,omitempty"`
	Rcpt       []Recipient4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rcpt"`
	NcrptdCntt EncryptedContent3  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptdCntt,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{3}
type Exact3AlphaNumericText string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// May be one of CDCP, CDCL, CDER, CUCL, CUDC, CDFG, FILL, MALF, NDCL, SECU, SFRD, TIMO, LATE, UCPT, UCMP, USND, CSRV
type FailureReason4Code string

// GenericIdentification1
//
// Information related to an identification, eg, party identification or account identification.
type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Issr,omitempty"`
}

// GenericIdentification77
//
// Identification of an entity.
type GenericIdentification77 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Id"`
	Tp     PartyType12Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tp"`
	Issr   PartyType12Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ShrtNm,omitempty"`
}

// GeographicCoordinates1
//
// Location on the Earth specified by two numbers representing vertical and horizontal position.
type GeographicCoordinates1 struct {
	Lat  Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Lat"`
	Long Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Long"`
}

// GeographicLocation1Choice
//
// Geographic location of the ATM specified by geographic coordinates or UTM coordinates.
type GeographicLocation1Choice struct {
	GeogcCordints GeographicCoordinates1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 GeogcCordints"`
	UTMCordints   UTMCoordinates1        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UTMCordints"`
}

// Header21
//
// Information related to the protocol management on a segment of the path from the ATM to the acquirer.
type Header21 struct {
	MsgFctn        ATMMessageFunction1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MsgFctn"`
	PrtcolVrsn     Max6Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrtcolVrsn"`
	XchgId         Max3NumericText     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 XchgId"`
	ReTrnsmssnCntr float64             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ReTrnsmssnCntr,omitempty"`
	CreDtTm        ISODateTime         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CreDtTm"`
	InitgPty       Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 InitgPty"`
	RcptPty        Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RcptPty,omitempty"`
	PrcStat        Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrcStat,omitempty"`
	Tracblt        []Traceability4     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Tracblt,omitempty"`
}

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// ISODateTime
//
// A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
// Note on the time format:
// 1) beginning / end of calendar day
// 00:00:00 = the beginning of a calendar day
// 24:00:00 = the end of a calendar day
// 2) fractions of second in time format
// Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// IssuerAndSerialNumber1
//
// Certificate issuer name and serial number  (see X.509).
type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SrlNb"`
}

// KEK4
//
// Key encryption key (KEK), using previously distributed symmetric key.
type KEK4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptdKey"`
}

// KEKIdentifier2
//
// Identification of a key encryption key (KEK), using previously distributed symmetric key.
type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DerivtnId,omitempty"`
}

// KeyTransport4
//
// Key encryption key (KEK), encrypted with a previously distributed asymmetric public key.
type KeyTransport4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Vrsn,omitempty"`
	RcptId        Recipient5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification11 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptdKey"`
}

// Max10000Binary
//
// Specifies a binary string with a maximum length of 10000 binary bytes.
type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Max100KBinary
//
// Binary data of 100K maximum.
type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max10Text string

// Max140Binary
//
// Specifies a binary string with a maximum length of 140 binary bytes.
type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max20000Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max350Text string

// Max35Binary
//
// Specifies a binary string with a maximum length of 35 binary bytes.
type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

// Must be at least 1 items long
type Max3Text string

// Max5000Binary
//
// Specifies a binary string with a maximum length of 5000 binary bytes.
type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Max500Binary
//
// Specifies a binary string with a maximum length of 500 binary bytes.
type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// May be one of BALN, CMPA, CMPD, ACMD, DVCC, DIAQ, DIAP, GSTS, INQQ, INQP, KYAQ, KYAP, PINQ, PINP, RJAQ, RJAP, WITV, WITK, WITQ, WITP, INQC, H2AP, H2AQ, TMOP, CSEC, DSEC, SKSC, SSTS
type MessageFunction7Code string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

// Min5Max16Binary
//
// Specifies a binary string with a minimum length of 5 bytes, and a maximum length of 16 bytes.
type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 6 items long
type Min6Max8Text string

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

// May be one of MREF, SREF, TEXT, HTML
type OutputFormat2Code string

// Parameter4
//
// Parameters of the asymmetric encryption algorithm.
type Parameter4 struct {
	NcrptnFrmt   EncryptionFormat1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm11Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MskGnrtrAlgo,omitempty"`
}

// Parameter5
//
// Parameters associated to a mask generator cryptographic function.
type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 DgstAlgo,omitempty"`
}

// Parameter6
//
// Parameters associated to a cryptographic encryption algorithm.
type Parameter6 struct {
	NcrptnFrmt   EncryptionFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BPddg,omitempty"`
}

// Parameter7
//
// Parameters associated to the MAC algorithm.
type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BPddg,omitempty"`
}

// PartyIdentification72Choice
//
// Choice of identification of a party. The party can be identified by giving a BIC or a proprietary code.
type PartyIdentification72Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrtryId"`
}

// May be one of ACQR, ATMG, CISP, DLIS, HSTG, ITAG, OATM
type PartyType12Code string

// May be one of ACQR, CISS, DLIS, ITAG, OTRM
type PartyType13Code string

// PaymentCard17
//
// Card performing the withdrawal transaction.
type PaymentCard17 struct {
	CardDataNtryMd CardDataReading1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardDataNtryMd"`
	FllbckInd      CardFallback1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 FllbckInd,omitempty"`
	PrtctdCardData ContentInformationType10 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PrtctdCardData,omitempty"`
	PlainCardData  PlainCardData14          `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PlainCardData,omitempty"`
	CardCtryCd     Max3Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardCtryCd,omitempty"`
	CardCcyCd      Exact3AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardCcyCd,omitempty"`
	RtndCardBal    CurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RtndCardBal,omitempty"`
}

// PlainCardData14
//
// Sensible data associated with the payment card performing the transaction.
type PlainCardData14 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PAN,omitempty"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardSeqNb,omitempty"`
	FctvDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 FctvDt,omitempty"`
	XpryDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 XpryDt,omitempty"`
	Trck1     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Trck1,omitempty"`
	Trck2     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Trck2,omitempty"`
	Trck3     Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Trck3,omitempty"`
}

// PointOfInteractionCapabilities5
//
// Capabilities of the ATM terminal.
type PointOfInteractionCapabilities5 struct {
	CardRdData       []CardDataReading4Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardRdData,omitempty"`
	CardWrtData      []CardDataReading4Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardWrtData,omitempty"`
	Authntcn         []CardholderVerificationCapability3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Authntcn,omitempty"`
	PINLngthCpblties float64                                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PINLngthCpblties,omitempty"`
	ApprvlCdLngth    float64                                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 ApprvlCdLngth,omitempty"`
	MxScrptLngth     float64                                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 MxScrptLngth,omitempty"`
	CardCaptrCpbl    bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CardCaptrCpbl,omitempty"`
}

// PostalAddress17
//
// Information that locates and identifies a specific address, as defined by postal services or in free format text.
type PostalAddress17 struct {
	AdrLine     []Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 BldgNb,omitempty"`
	PstCd       Max16Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 PstCd,omitempty"`
	TwnNm       Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TwnNm"`
	CtrySubDvsn []Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ctry"`
	GLctn       GeographicLocation1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 GLctn,omitempty"`
}

// Recipient4Choice
//
// Transport key or key encryption key (KEK) for the recipient.
type Recipient4Choice struct {
	KeyTrnsprt KeyTransport4  `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyTrnsprt"`
	KEK        KEK4           `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KEK"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyIdr"`
}

// Recipient5Choice
//
// Identification of a cryptographic asymmetric key.
type Recipient5Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 IssrAndSrlNb"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 KeyIdr"`
}

// RelativeDistinguishedName1
//
// Relative distinguished name defined by X.500 and X.509.
type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AttrVal"`
}

// May be one of APPR, DECL, PART
type Response4Code string

// ResponseType3
//
// Response of a requested service.
type ResponseType3 struct {
	Rspn         Response4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rspn"`
	RspnRsn      ResultDetail2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RspnRsn,omitempty"`
	AddtlRspnInf Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlRspnInf,omitempty"`
}

// ResponseType4
//
// Trace of response by the entities in the path from the issuer to the ATM.
type ResponseType4 struct {
	RspndrId     Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RspndrId"`
	Cdfctn       Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Cdfctn,omitempty"`
	Rspn         Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rspn"`
	RspnRsn      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RspnRsn,omitempty"`
	AddtlRspnInf Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlRspnInf,omitempty"`
}

// May be one of ACTF, ACQS, AMLV, AMTA, AUTH, BANK, CRDR, CRDF, ACTC, CTVG, DBER, FEES, TXNL, AMTD, NMBD, CRDX, FDCL, FMTR, TXNG, FNDI, ACPI, AMTI, ADDI, BRHI, CHDI, CRDI, CTFV, AMTO, PINV, TKKO, SGNI, TKID, TXNV, DATI, ISSP, ISSF, ISSO, ISST, ISSU, KEYS, LBLA, CRDL, MACR, MACK, ICCM, PINN, CRDA, LBLU, PINA, NPRA, OFFL, ONLP, NPRC, TXNM, OTHR, BALO, SEQO, PINC, PIND, PINS, PINX, PINE, QMAX, RECD, CRDT, SECV, SRVU, SFWE, SPCC, CRDS, SRCH, CNTC, FRDS, SYSP, SYSM, TRMI, ACTT, TTLV, TXNU, TXND, ORGF, UNBO, UNBP, UNBC, CMKY, CRDU, SVSU, VNDR, VNDF, AMTW, NMBW, CRDW
type ResultDetail2Code string

// SimpleIdentificationInformation4
//
// Information related to an identification, eg, party identification or account identification.
type SimpleIdentificationInformation4 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Id"`
}

// TerminalHosting1
//
// Entity hosting the ATM terminal.
type TerminalHosting1 struct {
	Ctgy TransactionEnvironment3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Ctgy,omitempty"`
	Id   Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Id,omitempty"`
}

// Traceability4
//
// Identification of partners involved in exchange from the ATM to the issuer, with the relative timestamp of their exchanges.
type Traceability4 struct {
	RlayId      GenericIdentification77 `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 RlayId"`
	SeqNb       Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 SeqNb,omitempty"`
	TracDtTmIn  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TracDtTmIn"`
	TracDtTmOut ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TracDtTmOut"`
}

// May be one of PRIV, PUBL
type TransactionEnvironment2Code string

// May be one of BRCH, MERC, OTHR
type TransactionEnvironment3Code string

// TransactionIdentifier1
//
// Identification of the transaction in an unambiguous way.
type TransactionIdentifier1 struct {
	TxDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TxDtTm"`
	TxRef  Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 TxRef"`
}

// TransactionVerificationResult5
//
// Result of performed verifications for the transaction.
type TransactionVerificationResult5 struct {
	Mtd         AuthenticationMethod7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Mtd"`
	VrfctnNtty  AuthenticationEntity2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 VrfctnNtty,omitempty"`
	Rslt        Verification1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 Rslt,omitempty"`
	AddtlRslt   Max500Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AddtlRslt,omitempty"`
	AuthntcnTkn Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 AuthntcnTkn,omitempty"`
}

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

// UTMCoordinates1
//
// Location on the Earth specified by the Universal Transverse Mercator coordinate system, using the WGS84 geodesic system.
type UTMCoordinates1 struct {
	UTMZone    Max16Text `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UTMZone"`
	UTMEstwrd  float64   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UTMEstwrd"`
	UTMNrthwrd float64   `xml:"urn:iso:std:iso:20022:tech:xsd:catp.003.001.01 UTMNrthwrd"`
}

// May be one of FAIL, MISS, NOVF, PART, SUCC, ERRR
type Verification1Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
