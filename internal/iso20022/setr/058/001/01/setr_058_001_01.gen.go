// Code generated by main. DO NOT EDIT.

package setr_058_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Prtry"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	ReqForOrdrConfStsRptV01 RequestForOrderConfirmationStatusReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 ReqForOrdrConfStsRptV01"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Txt"`
}

type FinancialInstrument10 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 SplmtryId,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PdctGrp,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InvestmentAccount13 struct {
	AcctId    AccountIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AcctId"`
	AcctNm    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AcctNm,omitempty"`
	AcctDsgnt Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AcctDsgnt,omitempty"`
	OwnrId    []PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 OwnrId,omitempty"`
	AcctSvcr  PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AcctSvcr,omitempty"`
}

type InvestmentFundOrder3 struct {
	MstrRef         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 MstrRef,omitempty"`
	OrdrRef         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 OrdrRef"`
	ClntRef         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 ClntRef,omitempty"`
	DealRef         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 DealRef,omitempty"`
	InvstmtAcctDtls InvestmentAccount13   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 FinInstrmDtls,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageAndBusinessReference5 struct {
	OthrRef AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 OthrRef,omitempty"`
	PrvsRef AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PrvsRef,omitempty"`
	RltdRef AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 RltdRef,omitempty"`
	OrdrRef []InvestmentFundOrder3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 OrdrRef,omitempty"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Adr,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

type RequestForOrderConfirmationStatusReportV01 struct {
	MsgId   MessageIdentification1         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 MsgId"`
	ReqDtls []MessageAndBusinessReference5 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 ReqDtls"`
	Xtnsn   []Extension1                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Xtnsn,omitempty"`
}

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 OthrPrtryId"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.058.001.01 Id"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
