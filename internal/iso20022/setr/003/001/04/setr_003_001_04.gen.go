// Code generated by main. DO NOT EDIT.

package setr_003_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account22 struct {
	Id       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	AcctSvcr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctSvcr,omitempty"`
}

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IBAN"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Othr"`
}

type AccountIdentificationAndName5 struct {
	Id AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Nm Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 MsgNm,omitempty"`
}

type AdditionalReference9 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICFIIdentifier string

// May be one of BTEX
type BestExecution1Code string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

type CancellationRight1Choice struct {
	Cd    CancellationRight1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of VALI, NOXO, NOWA, NOIN
type CancellationRight1Code string

type ChargeBasis2Choice struct {
	Cd    TaxationBasis5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type ChargeOrCommissionDiscount1 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Bsis,omitempty"`
}

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type Cheque9 struct {
	Nb      Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nb,omitempty"`
	PyeeId  PartyIdentification113               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PyeeId"`
	DrweeId FinancialInstitutionIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DrweeId,omitempty"`
	DrwrId  PartyIdentification113               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DrwrId,omitempty"`
}

type ClearingSystemMemberIdentificationChoice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AUBSBs"`
}

// May be one of NSTA, RCLT, STAN
type ConductClassification1Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type CopyInformation4 struct {
	CpyInd    bool             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CpyInd"`
	OrgnlRcvr AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrgnlRcvr,omitempty"`
}

type CountryAndResidentialStatusType2 struct {
	Ctry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry"`
	ResdtlSts ResidentialStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ResdtlSts"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CreditTransfer8 struct {
	Ref            Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ref,omitempty"`
	Dbtr           PartyIdentification113               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Dbtr,omitempty"`
	DbtrAcct       AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DbtrAcct,omitempty"`
	DbtrAgt        FinancialInstitutionIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DbtrAgt,omitempty"`
	DbtrAgtAcct    AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DbtrAgtAcct,omitempty"`
	IntrmyAgt1     FinancialInstitutionIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IntrmyAgt1,omitempty"`
	IntrmyAgt1Acct AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IntrmyAgt1Acct,omitempty"`
	IntrmyAgt2     FinancialInstitutionIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IntrmyAgt2,omitempty"`
	IntrmyAgt2Acct AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IntrmyAgt2Acct,omitempty"`
	CdtrAgt        FinancialInstitutionIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CdtrAgt"`
	CdtrAgtAcct    AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CdtrAgtAcct,omitempty"`
	Cdtr           PartyIdentification113               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cdtr,omitempty"`
	CdtrAcct       AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CdtrAcct"`
}

type CustomerConductClassification1Choice struct {
	Cd    ConductClassification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DtTm"`
}

type DateFormat42Choice struct {
	YrMnth    ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 YrMnth"`
	YrMnthDay ISODate      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 YrMnthDay"`
}

type DeliveringPartiesAndAccount16 struct {
	DlvrrsCtdnDtls    PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DlvrrsCtdnDtls,omitempty"`
	DlvrrsIntrmy1Dtls PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DlvrrsIntrmy1Dtls,omitempty"`
	DlvrrsIntrmy2Dtls PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DlvrrsIntrmy2Dtls,omitempty"`
	DlvrgAgtDtls      PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DlvrgAgtDtls"`
}

type DeliveryParameters3 struct {
	Adr        NameAndAddress4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Adr"`
	IssdCertNb Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IssdCertNb,omitempty"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	RedBlkOrdrConf RedemptionBulkOrderConfirmationV04 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RedBlkOrdrConf"`
}

// May be one of EUSI, EUSO, UKWN
type EUCapitalGain2Code string

type EUCapitalGain3Choice struct {
	Cd    EUCapitalGain2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of DIVI, DIVO, UKWN
type EUDividendStatus1Code string

type EUDividendStatusType2Choice struct {
	Cd    EUDividendStatus1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type Equalisation1 struct {
	Amt  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Amt,omitempty"`
	Rate float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Rate,omitempty"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type ExemptionReason1Choice struct {
	Cd    TaxExemptReason1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type Fee2 struct {
	Tp           ChargeType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	Bsis         ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Bsis,omitempty"`
	StdAmt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 StdAmt,omitempty"`
	StdRate      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 StdRate,omitempty"`
	DscntDtls    ChargeOrCommissionDiscount1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DscntDtls,omitempty"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ApldAmt,omitempty"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ApldRate,omitempty"`
	NonStdSLARef Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NonStdSLARef,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcptId,omitempty"`
	InftvInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InftvInd"`
}

// May be one of RECE, NREC, UKWN
type FinancialAdvice1Code string

type FinancialInstitutionIdentification10 struct {
	Pty FinancialInstitutionIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Pty"`
	LEI LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 LEI,omitempty"`
}

type FinancialInstitutionIdentification8Choice struct {
	NmAndAdr    NameAndAddress5                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NmAndAdr"`
	BICFI       BICFIIdentifier                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentificationChoice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ClrSysMmbId"`
	PrtryId     Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtryId"`
}

type FinancialInstrument57 struct {
	Id          SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Nm          Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm,omitempty"`
	ShrtNm      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ShrtNm,omitempty"`
	SplmtryId   Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SplmtryId,omitempty"`
	ClssTp      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PdctGrp,omitempty"`
	SrsId       Series1                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SrsId,omitempty"`
}

type ForeignExchangeTerms33 struct {
	ToAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ToAmt,omitempty"`
	FrAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FrAmt,omitempty"`
	UnitCcy  ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 UnitCcy"`
	QtdCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 QtdCcy"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 XchgRate"`
	QtnDt    ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 QtnDt,omitempty"`
	QtgInstn PartyIdentification113  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 QtgInstn,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

// May be one of CASH, CPFO, CPFS, SRSA
type FundCashAccount2Code string

type FundOrderType4Choice struct {
	Cd    FundOrderType8Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of NSPN, NCPN, SWSP, CWSP
type FundOrderType5Code string

// May be one of BEDB, INVP, PREA, RGSV, RGSU, RDIV, STAF, WIDP
type FundOrderType8Code string

type FundSettlementParameters11 struct {
	SttlmDt          ISODate                                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmDt,omitempty"`
	SttlmPlc         PartyIdentification113                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmPlc"`
	SfkpgPlc         SafekeepingPlaceFormat8Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SfkpgPlc,omitempty"`
	SctiesSttlmSysId Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SctiesSttlmSysId,omitempty"`
	TradTxCond       []TradeTransactionCondition8Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TradTxCond,omitempty"`
	SttlmTxCond      []SettlementTransactionCondition30Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmTxCond,omitempty"`
	RcvgSdDtls       ReceivingPartiesAndAccount16             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvgSdDtls"`
	DlvrgSdDtls      DeliveringPartiesAndAccount16            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DlvrgSdDtls,omitempty"`
}

// May be one of GATE, HOLD
type GateHoldBack1Code string

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Issr,omitempty"`
}

type GenericIdentification164 struct {
	Id   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	IdTp OtherIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IdTp"`
	Issr Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

type HoldBackInformation2 struct {
	Tp          GateHoldBack1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	Amt         ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Amt,omitempty"`
	XpctdRlsDt  ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 XpctdRlsDt,omitempty"`
	FinInstrmId SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FinInstrmId,omitempty"`
	FinInstrmNm Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FinInstrmNm,omitempty"`
	RedCmpltn   RedemptionCompletion1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RedCmpltn,omitempty"`
	FnlConf     bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FnlConf,omitempty"`
}

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type IndividualPerson32 struct {
	Nm               Max350Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm,omitempty"`
	BirthDt          ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BirthDt,omitempty"`
	CtryAndResdtlSts CountryAndResidentialStatusType2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CtryAndResdtlSts,omitempty"`
	OthrId           []GenericIdentification164       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OthrId,omitempty"`
}

type InformativeTax1 struct {
	TaxblIncmPerDvdd ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxblIncmPerDvdd,omitempty"`
	EUCptlGn         EUCapitalGain3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 EUCptlGn,omitempty"`
	EUDvddSts        EUDividendStatusType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 EUDvddSts,omitempty"`
	PctgOfDebtClm    float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PctgOfDebtClm,omitempty"`
	IndvTax          []Tax32                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IndvTax,omitempty"`
}

type Intermediary39 struct {
	Id               PartyIdentification113          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Acct             Account22                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Acct,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrOrgtrElgblty,omitempty"`
	TradgPtyCpcty    TradingCapacity8Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TradgPtyCpcty,omitempty"`
	Role             InvestmentFundRole2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Role,omitempty"`
}

type InvestmentAccount58 struct {
	AcctId           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctId"`
	AcctNm           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctNm,omitempty"`
	AcctDsgnt        Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctDsgnt,omitempty"`
	OwnrId           []PartyIdentification113        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OwnrId,omitempty"`
	AcctSvcr         PartyIdentification113          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctSvcr,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrOrgtrElgblty,omitempty"`
	SubAcctDtls      SubAccount6                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SubAcctDtls,omitempty"`
}

type InvestmentAccount60 struct {
	AcctId Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctId,omitempty"`
	Tp     InvestmentAccountType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp,omitempty"`
}

type InvestmentAccountType1Choice struct {
	Cd    FundCashAccount2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

type InvestmentFundRole2Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

type InvestmentFundsOrderBreakdown2 struct {
	OrdrBrkdwnTp OrderBreakdownType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrBrkdwnTp"`
	Amt          ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Amt"`
}

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be one of LAT1, LAT2
type LateReport1Code string

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CreDtTm"`
}

type NameAndAddress4 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm,omitempty"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Adr"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Adr,omitempty"`
}

// May be one of NEGO, NNGO, UNKW
type NegotiatedTrade1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type OrderBreakdownType1Choice struct {
	Cd    FundOrderType5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type OrderWaiver1 struct {
	OrdrWvrRsn []OrderWaiverReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrWvrRsn,omitempty"`
	InfVal     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InfVal,omitempty"`
}

// May be one of LATE, FEND, BMIN, CUTO, COMW
type OrderWaiverReason1Code string

type OrderWaiverReason3Choice struct {
	Cd    OrderWaiverReason1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type OtherIdentification3Choice struct {
	Cd    PartyIdentificationType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 LEI,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NmAndAdr"`
}

type PartyIdentificationAndAccount147 struct {
	PtyId  PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PtyId"`
	AcctId Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctId,omitempty"`
}

// May be one of ATIN, IDCD, NRIN, OTHR, PASS, POCD, SOCS, SRSA, GUNL, GTIN, ITIN, CPFA, AREG, DRLC, EMID, NINV, INCL, GIIN
type PartyIdentificationType7Code string

type PaymentInstrument21Choice struct {
	CdtTrfDtls   CreditTransfer8     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CdtTrfDtls"`
	ChqDtls      Cheque9             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ChqDtls"`
	BkrsDrftDtls Cheque9             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BkrsDrftDtls"`
	CshAcctDtls  InvestmentAccount60 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CshAcctDtls"`
}

type PaymentTransaction72 struct {
	PmtInstrm PaymentInstrument21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PmtInstrm"`
}

type PlaceOfTradeIdentification1Choice struct {
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry"`
	Xchg        MICIdentifier    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Xchg"`
	Pty         AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Pty"`
	OverTheCntr Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OverTheCntr"`
}

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Amt"`
}

type ProfitAndLoss2Choice struct {
	Prft ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prft"`
	Loss ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Loss"`
}

// Must be at least 1 items long
type RICIdentifier string

type ReceivingPartiesAndAccount16 struct {
	RcvrsCtdnDtls    PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvrsCtdnDtls,omitempty"`
	RcvrsIntrmy1Dtls PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvrsIntrmy1Dtls,omitempty"`
	RcvrsIntrmy2Dtls PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvrsIntrmy2Dtls,omitempty"`
	RcvgAgtDtls      PartyIdentificationAndAccount147 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvgAgtDtls"`
}

type RedemptionBulkExecution5 struct {
	AmdmntInd       bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AmdmntInd,omitempty"`
	MstrRef         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 MstrRef,omitempty"`
	PlcOfTrad       PlaceOfTradeIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PlcOfTrad,omitempty"`
	OrdrDtTm        ISODateTime                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrDtTm,omitempty"`
	RcvdDtTm        ISODateTime                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcvdDtTm,omitempty"`
	ReqdFutrTradDt  ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ReqdFutrTradDt,omitempty"`
	CxlRght         CancellationRight1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CxlRght,omitempty"`
	FinInstrmDtls   FinancialInstrument57             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FinInstrmDtls"`
	IndvExctnDtls   []RedemptionExecution16           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IndvExctnDtls"`
	ReqdSttlmCcy    ActiveCurrencyCode                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ReqdSttlmCcy,omitempty"`
	ReqdNAVCcy      ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ReqdNAVCcy,omitempty"`
	TtlSttlmAmt     ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TtlSttlmAmt,omitempty"`
	BlkCshSttlmDtls PaymentTransaction72              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BlkCshSttlmDtls,omitempty"`
}

type RedemptionBulkOrderConfirmationV04 struct {
	MsgId        MessageIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 MsgId"`
	PoolRef      AdditionalReference9     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PoolRef,omitempty"`
	PrvsRef      []AdditionalReference8   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrvsRef,omitempty"`
	RltdRef      AdditionalReference8     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RltdRef,omitempty"`
	BlkExctnDtls RedemptionBulkExecution5 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BlkExctnDtls"`
	CpyDtls      CopyInformation4         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CpyDtls,omitempty"`
	Xtnsn        []Extension1             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Xtnsn,omitempty"`
}

// May be one of RED0, RED1
type RedemptionCompletion1Code string

type RedemptionExecution16 struct {
	OrdrRef            Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrRef"`
	ClntRef            Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ClntRef,omitempty"`
	DealRef            Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DealRef"`
	OrdrTp             []FundOrderType4Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrTp,omitempty"`
	BnfcryDtls         []IndividualPerson32                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BnfcryDtls,omitempty"`
	UnitsNb            float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 UnitsNb"`
	Rndg               RoundingDirection2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Rndg,omitempty"`
	NetAmt             ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NetAmt,omitempty"`
	InvstmtAcctDtls    InvestmentAccount58                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InvstmtAcctDtls"`
	HldgsRedRate       float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 HldgsRedRate,omitempty"`
	GrssAmt            ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 GrssAmt,omitempty"`
	TradDtTm           DateAndDateTimeChoice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TradDtTm"`
	SttlmAmt           ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmAmt"`
	CshSttlmDt         ISODate                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CshSttlmDt,omitempty"`
	SttlmMtd           DeliveryReceiptType2Code             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmMtd,omitempty"`
	DealgPricDtls      UnitPrice22                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 DealgPricDtls"`
	InftvPricDtls      []UnitPrice22                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InftvPricDtls,omitempty"`
	PrtlyExctdInd      bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtlyExctdInd"`
	BestExctn          BestExecution1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 BestExctn,omitempty"`
	CumDvddInd         bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CumDvddInd"`
	IntrmPrftAmt       ProfitAndLoss2Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IntrmPrftAmt,omitempty"`
	FXDtls             []ForeignExchangeTerms33             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FXDtls,omitempty"`
	IncmPref           IncomePreference1Code                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IncmPref,omitempty"`
	Grp1Or2Units       UKTaxGroupUnit1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Grp1Or2Units,omitempty"`
	TxOvrhd            TotalFeesAndTaxes40                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TxOvrhd,omitempty"`
	InftvTaxDtls       InformativeTax1                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InftvTaxDtls,omitempty"`
	StffClntBrkdwn     []InvestmentFundsOrderBreakdown2     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 StffClntBrkdwn,omitempty"`
	SttlmAndCtdyDtls   FundSettlementParameters11           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SttlmAndCtdyDtls,omitempty"`
	PhysDlvryInd       bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PhysDlvryInd"`
	PhysDlvryDtls      DeliveryParameters3                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PhysDlvryDtls,omitempty"`
	CshSttlmDtls       PaymentTransaction72                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CshSttlmDtls,omitempty"`
	NonStdSttlmInf     Max350Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NonStdSttlmInf,omitempty"`
	PrtlSttlmOfUnits   float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtlSttlmOfUnits,omitempty"`
	PrtlSttlmOfCsh     float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtlSttlmOfCsh,omitempty"`
	PrtlRedWhldgAmt    ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PrtlRedWhldgAmt,omitempty"`
	FinAdvc            FinancialAdvice1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 FinAdvc,omitempty"`
	NgtdTrad           NegotiatedTrade1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NgtdTrad,omitempty"`
	LateRpt            LateReport1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 LateRpt,omitempty"`
	RltdPtyDtls        []Intermediary39                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RltdPtyDtls,omitempty"`
	Equlstn            Equalisation1                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Equlstn,omitempty"`
	CstmrCndctClssfctn CustomerConductClassification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CstmrCndctClssfctn,omitempty"`
	TxChanlTp          TransactionChannelType1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TxChanlTp,omitempty"`
	SgntrTp            SignatureType1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SgntrTp,omitempty"`
	OrdrWvrDtls        OrderWaiver1                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OrdrWvrDtls,omitempty"`
	GtgOrHldBckDtls    HoldBackInformation2                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 GtgOrHldBckDtls,omitempty"`
}

// May be one of RESI, PRES, NRES
type ResidentialStatus1Code string

// May be one of RDUP, RDWN
type RoundingDirection2Code string

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat8Choice struct {
	Id      SafekeepingPlaceTypeAndText6             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TpAndId"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id,omitempty"`
}

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 OthrPrtryId"`
}

type Series1 struct {
	SrsDt DateFormat42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SrsDt,omitempty"`
	SrsNm Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 SrsNm,omitempty"`
}

// May be one of NOMC
type SettlementTransactionCondition11Code string

type SettlementTransactionCondition30Choice struct {
	Cd    SettlementTransactionCondition11Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification30              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type SignatureType1Choice struct {
	Cd    SignatureType2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of DIGI, ELEC, NONE, ORIG
type SignatureType2Code string

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount6 struct {
	Id        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Id"`
	Nm        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Nm,omitempty"`
	Chrtc     Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Chrtc,omitempty"`
	AcctDsgnt Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 AcctDsgnt,omitempty"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

type Tax31 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ApldAmt"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ApldRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxClctnDtls,omitempty"`
}

type Tax32 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	InftvAmt     ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InftvAmt,omitempty"`
	InftvRate    float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 InftvRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Ctry,omitempty"`
	XmptnInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 XmptnInd"`
	XmptnRsn     ExemptionReason1Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 XmptnRsn,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxClctnDtls,omitempty"`
}

type TaxBasis1Choice struct {
	Cd    TaxationBasis2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type TaxCalculationInformation10 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxblAmt"`
}

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

// May be one of PROV, NATI, STAT, WITH, KAPA, NKAP, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType17Code string

type TaxType3Choice struct {
	Cd    TaxType17Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type TaxableIncomePerShareCalculated2Choice struct {
	Cd    TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, GRAM, NEAM, NAVP, PERU
type TaxationBasis5Code string

// Must be at least 1 items long
type TickerIdentifier string

type TotalFeesAndTaxes40 struct {
	TtlOvrhdApld   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TtlOvrhdApld,omitempty"`
	TtlFees        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TtlFees,omitempty"`
	TtlTaxs        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TtlTaxs,omitempty"`
	ComrclAgrmtRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee2                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IndvFee,omitempty"`
	IndvTax        []Tax31                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 IndvTax,omitempty"`
}

// May be one of XCPN, CCPN
type TradeTransactionCondition5Code string

type TradeTransactionCondition8Choice struct {
	Cd    TradeTransactionCondition5Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of AGEN, PRIN
type TradingCapacity8Code string

// May be one of FIAD, HOBA, BRAN
type TransactionChannel2Code string

type TransactionChannelType1Choice struct {
	Cd    TransactionChannel2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type TypeOfPrice46Choice struct {
	Cd    TypeOfPrice10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type UnitPrice22 struct {
	Tp                   TypeOfPrice46Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Tp"`
	Val                  PriceValue1                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Val"`
	PricMtd              PriceMethod1Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PricMtd,omitempty"`
	NbOfDaysAcrd         float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr      ActiveCurrencyAnd13DecimalAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd TaxableIncomePerShareCalculated2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 TaxblIncmPerShrClctd,omitempty"`
	PricDiffRsn          Max350Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 PricDiffRsn,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type WaivingInstruction2Choice struct {
	Cd    WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.003.001.04 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
