// Code generated by main. DO NOT EDIT.

package setr_056_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account7 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctSvcr,omitempty"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Prtry"`
}

type AccountIdentificationAndName3 struct {
	Id CashAccountIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	Nm Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm,omitempty"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

type BICIdentification1 struct {
	BIC BICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BIC"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

// May be one of BTEX
type BestExecution1Code string

// Must be at least 1 items long
type BloombergIdentifier string

type BranchData struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id,omitempty"`
	Nm      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm,omitempty"`
	PstlAdr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PstlAdr,omitempty"`
}

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

// May be one of CRDT, DBIT
type CardType1Code string

type CashAccountIdentification1Choice struct {
	IBAN     IBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IBAN"`
	BBAN     BBANIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BBAN"`
	UPIC     UPICIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 UPIC"`
	DmstAcct SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DmstAcct"`
}

type CashInOrOut6Choice struct {
	CshInPmtInstrm  PaymentInstrument12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshInPmtInstrm"`
	CshOutPmtInstrm PaymentInstrument11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshOutPmtInstrm"`
}

type Charge18 struct {
	Tp             ChargeType11Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp"`
	XtndedTp       Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTp"`
	ChrgBsis       TaxationBasis2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChrgBsis,omitempty"`
	XtndedChrgBsis Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedChrgBsis,omitempty"`
	Amt            ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Amt"`
	Rate           float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Rate,omitempty"`
	RcptId         PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcptId,omitempty"`
}

// May be one of BEND, FEND, SWIT, DLEV, DISC, PENA, POST, REGF, SHIP, CHAR, CDSC, CBCH, PREM, INIT, BRKF, UCIC
type ChargeType11Code string

type Cheque3 struct {
	Nb      Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nb,omitempty"`
	PyeeId  PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PyeeId"`
	DrweeId FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DrweeId,omitempty"`
	DrwrId  PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DrwrId,omitempty"`
}

type ClearingSystemMemberIdentificationChoice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AUBSBs"`
}

type Commission10 struct {
	Tp             CommissionType6Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp,omitempty"`
	XtndedTp       Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTp,omitempty"`
	Bsis           TaxationBasis4Code               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Bsis,omitempty"`
	XtndedBsis     Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedBsis,omitempty"`
	Amt            ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Amt,omitempty"`
	Rate           float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Rate,omitempty"`
	RcptId         PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcptId,omitempty"`
	ComrclAgrmtRef Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ComrclAgrmtRef,omitempty"`
	WvgDtls        CommissionWaiver3                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 WvgDtls,omitempty"`
}

// May be one of FEND, BEND, CDPL
type CommissionType6Code string

type CommissionWaiver3 struct {
	InstrBsis       WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 InstrBsis"`
	XtndedInstrBsis Extended350Code         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedInstrBsis"`
	WvdRate         float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 WvdRate"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type CopyInformation2 struct {
	CpyInd    bool               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CpyInd"`
	OrgnlRcvr BICIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OrgnlRcvr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CreditTransfer6 struct {
	Ref            Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Ref,omitempty"`
	Dbtr           PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Dbtr,omitempty"`
	DbtrAcct       AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAcct,omitempty"`
	DbtrAgt        FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAgt,omitempty"`
	DbtrAgtAcct    AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAgtAcct,omitempty"`
	IntrmyAgt1     FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmyAgt1,omitempty"`
	IntrmyAgt1Acct AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmyAgt1Acct,omitempty"`
	IntrmyAgt2     FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmyAgt2,omitempty"`
	IntrmyAgt2Acct AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmyAgt2Acct,omitempty"`
	CdtrAgt        FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtrAgt"`
	CdtrAgtAcct    AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtrAgtAcct,omitempty"`
	Cdtr           PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Cdtr,omitempty"`
	CdtrAcct       AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtrAcct"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DtTm"`
}

type DeliveringPartiesAndAccount3 struct {
	DlvrrsCtdnDtls   PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DlvrrsCtdnDtls,omitempty"`
	DlvrrsIntrmyDtls PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DlvrrsIntrmyDtls,omitempty"`
	DlvrgAgtDtls     PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DlvrgAgtDtls"`
}

type DeliveryParameters3 struct {
	Adr        NameAndAddress4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Adr"`
	IssdCertNb Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IssdCertNb,omitempty"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type DirectDebitMandate4 struct {
	DbtrAcct      AccountIdentificationAndName3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAcct"`
	Dbtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Dbtr,omitempty"`
	DbtrTaxIdNb   Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrTaxIdNb,omitempty"`
	DbtrNtlRegnNb Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrNtlRegnNb,omitempty"`
	Cdtr          PartyIdentification2Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Cdtr,omitempty"`
	DbtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAgt"`
	DbtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DbtrAgtBrnch,omitempty"`
	CdtrAgt       FinancialInstitutionIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtrAgt,omitempty"`
	CdtrAgtBrnch  BranchData                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtrAgtBrnch,omitempty"`
	RegnId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RegnId,omitempty"`
	MndtId        Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 MndtId,omitempty"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	SwtchOrdrConfAmdmntV01 SwitchOrderConfirmationAmendmentV01 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SwtchOrdrConfAmdmntV01"`
}

// May be one of EUSI, EUSO, UKWN
type EUCapitalGain2Code string

// May be one of DIVI, DIVO, UKWN
type EUDividendStatus1Code string

type Equalisation1 struct {
	Amt  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Amt,omitempty"`
	Rate float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Rate,omitempty"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

// May be one of RECE, NREC, UKWN
type FinancialAdvice1Code string

type FinancialInstitutionIdentification3Choice struct {
	NmAndAdr    NameAndAddress5                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NmAndAdr"`
	BIC         BICIdentifier                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BIC"`
	ClrSysMmbId ClearingSystemMemberIdentificationChoice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ClrSysMmbId"`
	PrtryId     SimpleIdentificationInformation          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PrtryId"`
}

type FinancialInstrument10 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SplmtryId,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PdctGrp,omitempty"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Unit"`
}

type ForeignExchangeTerms7 struct {
	ToAmt    ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ToAmt,omitempty"`
	FrAmt    ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 FrAmt,omitempty"`
	UnitCcy  ActiveOrHistoricCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 UnitCcy"`
	QtdCcy   ActiveOrHistoricCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 QtdCcy"`
	XchgRate float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XchgRate"`
	QtnDt    ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 QtnDt,omitempty"`
	QtgInstn PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 QtgInstn,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

// May be one of CASH, CPFO, CPFS, SRSA
type FundCashAccount2Code string

type FundSettlementParameters3 struct {
	SttlmDt          ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmDt,omitempty"`
	SttlmPlc         PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmPlc"`
	SfkpgPlc         PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SfkpgPlc,omitempty"`
	SctiesSttlmSysId Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SctiesSttlmSysId,omitempty"`
	RcvgSdDtls       ReceivingPartiesAndAccount3  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcvgSdDtls,omitempty"`
	DlvrgSdDtls      DeliveringPartiesAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DlvrgSdDtls"`
}

type FundSettlementParameters4 struct {
	SttlmDt          ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmDt,omitempty"`
	SttlmPlc         PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmPlc"`
	SfkpgPlc         PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SfkpgPlc,omitempty"`
	SctiesSttlmSysId Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SctiesSttlmSysId,omitempty"`
	RcvgSdDtls       ReceivingPartiesAndAccount3  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcvgSdDtls"`
	DlvrgSdDtls      DeliveringPartiesAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DlvrgSdDtls,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Issr,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type Intermediary9 struct {
	Id               PartyIdentification2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	Acct             Account7                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Acct,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OrdrOrgtrElgblty,omitempty"`
	TradgPtyCpcty    TradingCapacity2Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TradgPtyCpcty,omitempty"`
	Role             InvestmentFundRole2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Role,omitempty"`
	XtndedRole       Extended350Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedRole,omitempty"`
}

type InvestmentAccount20 struct {
	AcctId   AccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctId,omitempty"`
	Tp       FundCashAccount2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp,omitempty"`
	XtndedTp Extended350Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTp,omitempty"`
}

type InvestmentAccount21 struct {
	AcctId           AccountIdentification1          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctId"`
	AcctNm           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctNm,omitempty"`
	AcctDsgnt        Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctDsgnt,omitempty"`
	OwnrId           []PartyIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OwnrId,omitempty"`
	AcctSvcr         PartyIdentification2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctSvcr,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OrdrOrgtrElgblty,omitempty"`
	SubAcctDtls      SubAccount1                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SubAcctDtls,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// May be one of LAT1, LAT2
type LateReport1Code string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max3Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CreDtTm"`
}

type NameAndAddress4 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm,omitempty"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Adr"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Adr,omitempty"`
}

// May be one of NEGO, NNGO, UNKW
type NegotiatedTrade1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NmAndAdr"`
}

type PartyIdentificationAndAccount3 struct {
	PtyId  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PtyId"`
	AcctId AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AcctId,omitempty"`
}

type PaymentCard2 struct {
	Tp         CardType1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp"`
	Nb         Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nb"`
	HldrNm     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 HldrNm"`
	StartDt    ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 StartDt,omitempty"`
	XpryDt     ISOYearMonth               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XpryDt"`
	CardIssrNm Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CardIssrNm,omitempty"`
	CardIssrId PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CardIssrId,omitempty"`
	SctyCd     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SctyCd,omitempty"`
	SeqNb      Max3Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SeqNb,omitempty"`
}

type PaymentInstrument11Choice struct {
	CdtTrfDtls   CreditTransfer6     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtTrfDtls"`
	ChqDtls      Cheque3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChqDtls"`
	BkrsDrftDtls Cheque3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BkrsDrftDtls"`
	CshAcctDtls  InvestmentAccount20 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshAcctDtls"`
}

type PaymentInstrument12Choice struct {
	PmtCardDtls  PaymentCard2        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PmtCardDtls"`
	CdtTrfDtls   CreditTransfer6     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CdtTrfDtls"`
	DrctDbtDtls  DirectDebitMandate4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DrctDbtDtls"`
	ChqDtls      Cheque3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChqDtls"`
	BkrsDrftDtls Cheque3             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BkrsDrftDtls"`
	CshAcctDtls  InvestmentAccount20 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshAcctDtls"`
}

type PaymentTransaction26 struct {
	CshInOrOut CashInOrOut6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshInOrOut,omitempty"`
}

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Amt"`
}

type ProfitAndLoss1Choice struct {
	Prft ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Prft"`
	Loss ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Loss"`
}

// Must be at least 1 items long
type RICIdentifier string

type ReceivingPartiesAndAccount3 struct {
	RcvrsCtdnDtls   PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcvrsCtdnDtls,omitempty"`
	RcvrsIntrmyDtls PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcvrsIntrmyDtls,omitempty"`
	RcvgAgtDtls     PartyIdentificationAndAccount3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcvgAgtDtls"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OthrPrtryId"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount1 struct {
	Id    AccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Id"`
	Nm    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Nm,omitempty"`
	Chrtc Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Chrtc,omitempty"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

type SwitchExecution4 struct {
	MstrRef         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 MstrRef,omitempty"`
	OrdrDtTm        ISODateTime                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OrdrDtTm,omitempty"`
	InvstmtAcctDtls InvestmentAccount21               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 InvstmtAcctDtls,omitempty"`
	DealRef         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 DealRef"`
	OrdrRef         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 OrdrRef"`
	ClntRef         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ClntRef,omitempty"`
	TtlRedAmt       ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TtlRedAmt,omitempty"`
	TtlSbcptAmt     ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TtlSbcptAmt,omitempty"`
	RltdPtyDtls     []Intermediary9                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RltdPtyDtls,omitempty"`
	ReqdFutrTradDt  ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ReqdFutrTradDt,omitempty"`
	AddtlCshIn      ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 AddtlCshIn,omitempty"`
	RsltgCshOut     ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RsltgCshOut,omitempty"`
	SttlmAmt        ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmAmt,omitempty"`
	CshSttlmDt      ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshSttlmDt,omitempty"`
	SttlmMtd        DeliveryReceiptType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmMtd,omitempty"`
	BestExctn       BestExecution1Code                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 BestExctn,omitempty"`
	RedLegDtls      []SwitchRedemptionLegExecution3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RedLegDtls"`
	SbcptLegDtls    []SwitchSubscriptionLegExecution3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SbcptLegDtls"`
	CshSttlmDtls    PaymentTransaction26              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CshSttlmDtls,omitempty"`
	FXDtls          []ForeignExchangeTerms7           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 FXDtls,omitempty"`
	FinAdvc         FinancialAdvice1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 FinAdvc,omitempty"`
	NgtdTrad        NegotiatedTrade1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NgtdTrad,omitempty"`
	LateRpt         LateReport1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 LateRpt,omitempty"`
}

type SwitchOrderConfirmationAmendmentV01 struct {
	MsgId          MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 MsgId"`
	PoolRef        AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PoolRef,omitempty"`
	PrvsRef        []AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PrvsRef,omitempty"`
	RltdRef        AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RltdRef,omitempty"`
	SwtchExctnDtls []SwitchExecution4     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SwtchExctnDtls"`
	CpyDtls        CopyInformation2       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CpyDtls,omitempty"`
	Xtnsn          []Extension1           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Xtnsn,omitempty"`
}

type SwitchRedemptionLegExecution3 struct {
	LegId            Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 LegId,omitempty"`
	LegExctnId       Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 LegExctnId,omitempty"`
	FinInstrmDtls    FinancialInstrument10        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 FinInstrmDtls"`
	UnitsNb          FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 UnitsNb"`
	InvstmtAcctDtls  InvestmentAccount21          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 InvstmtAcctDtls,omitempty"`
	HldgsRedRate     float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 HldgsRedRate,omitempty"`
	NetAmt           ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NetAmt,omitempty"`
	GrssAmt          ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 GrssAmt,omitempty"`
	TradDtTm         DateAndDateTimeChoice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TradDtTm"`
	PricDtls         UnitPrice10                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PricDtls"`
	CumDvddInd       bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CumDvddInd"`
	IntrmPrftAmt     ProfitAndLoss1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmPrftAmt,omitempty"`
	IncmPref         IncomePreference1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IncmPref,omitempty"`
	Grp1Or2Units     UKTaxGroupUnitCode           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Grp1Or2Units,omitempty"`
	ReqdSttlmCcy     ActiveCurrencyCode           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ReqdSttlmCcy,omitempty"`
	ReqdNAVCcy       ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ReqdNAVCcy,omitempty"`
	ChrgGnlDtls      TotalCharges3                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChrgGnlDtls,omitempty"`
	ComssnGnlDtls    TotalCommissions3            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ComssnGnlDtls,omitempty"`
	TaxGnlDtls       TotalTaxes3                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxGnlDtls,omitempty"`
	SttlmAndCtdyDtls FundSettlementParameters4    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmAndCtdyDtls,omitempty"`
	PhysDlvryInd     bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PhysDlvryInd"`
	PhysDlvryDtls    DeliveryParameters3          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PhysDlvryDtls,omitempty"`
	NonStdSttlmInf   Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NonStdSttlmInf,omitempty"`
	Equlstn          Equalisation1                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Equlstn,omitempty"`
}

type SwitchSubscriptionLegExecution3 struct {
	LegId            Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 LegId,omitempty"`
	LegExctnId       Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 LegExctnId,omitempty"`
	FinInstrmDtls    FinancialInstrument10        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 FinInstrmDtls"`
	UnitsNb          FinancialInstrumentQuantity1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 UnitsNb"`
	InvstmtAcctDtls  InvestmentAccount21          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 InvstmtAcctDtls,omitempty"`
	NetAmt           ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NetAmt,omitempty"`
	GrssAmt          ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 GrssAmt,omitempty"`
	TradDtTm         DateAndDateTimeChoice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TradDtTm"`
	PricDtls         UnitPrice10                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PricDtls"`
	CumDvddInd       bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 CumDvddInd"`
	IntrmPrftAmt     ProfitAndLoss1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IntrmPrftAmt,omitempty"`
	IncmPref         IncomePreference1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 IncmPref,omitempty"`
	ReqdSttlmCcy     ActiveCurrencyCode           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ReqdSttlmCcy,omitempty"`
	ReqdNAVCcy       ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ReqdNAVCcy,omitempty"`
	ChrgGnlDtls      TotalCharges3                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChrgGnlDtls,omitempty"`
	ComssnGnlDtls    TotalCommissions3            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ComssnGnlDtls,omitempty"`
	TaxGnlDtls       TotalTaxes3                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxGnlDtls,omitempty"`
	SttlmAndCtdyDtls FundSettlementParameters3    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 SttlmAndCtdyDtls,omitempty"`
	PhysDlvryInd     bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PhysDlvryInd"`
	PhysDlvryDtls    DeliveryParameters3          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PhysDlvryDtls,omitempty"`
	NonStdSttlmInf   Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NonStdSttlmInf,omitempty"`
	Equlstn          Equalisation1                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Equlstn,omitempty"`
}

type Tax14 struct {
	Tp             TaxType11Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp"`
	XtndedTp       Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTp"`
	Amt            ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Amt"`
	Rate           float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Rate,omitempty"`
	Ctry           CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Ctry,omitempty"`
	RcptId         PartyIdentification2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 RcptId,omitempty"`
	XmptnInd       bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XmptnInd"`
	XmptnRsn       TaxExemptReason1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XmptnRsn,omitempty"`
	XtndedXmptnRsn Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedXmptnRsn,omitempty"`
	TaxClctnDtls   TaxCalculationInformation6       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxClctnDtls,omitempty"`
}

type TaxCalculationInformation6 struct {
	Bsis       TaxationBasis2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Bsis,omitempty"`
	XtndedBsis Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedBsis,omitempty"`
	TaxblAmt   ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxblAmt,omitempty"`
}

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

// May be one of PROV, NATI, STAT, WITH, KAPA, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType11Code string

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, PERU, GRAM, NEAM
type TaxationBasis4Code string

// Must be at least 1 items long
type TickerIdentifier string

type TotalCharges3 struct {
	TtlAmtOfChrgs ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TtlAmtOfChrgs,omitempty"`
	ChrgDtls      []Charge18                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ChrgDtls"`
}

type TotalCommissions3 struct {
	TtlAmtOfComssns ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TtlAmtOfComssns,omitempty"`
	ComssnDtls      []Commission10                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 ComssnDtls"`
}

type TotalTaxes3 struct {
	TtlAmtOfTaxs     ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TtlAmtOfTaxs,omitempty"`
	TaxblIncmPerDvdd ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxblIncmPerDvdd,omitempty"`
	EUCptlGn         EUCapitalGain2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 EUCptlGn,omitempty"`
	XtndedEUCptlGn   Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedEUCptlGn,omitempty"`
	EUDvddSts        EUDividendStatus1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 EUDvddSts,omitempty"`
	XtndedEUDvddSts  Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedEUDvddSts,omitempty"`
	PctgOfDebtClm    float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PctgOfDebtClm,omitempty"`
	TaxDtls          []Tax14                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxDtls,omitempty"`
}

// May be one of PRIN, TAGN
type TradingCapacity2Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnitCode string

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

type UnitPrice10 struct {
	Tp                         TypeOfPrice10Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Tp"`
	XtndedTp                   Extended350Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTp"`
	Val                        PriceValue1                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 Val"`
	PricMtd                    PriceMethod1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PricMtd,omitempty"`
	NbOfDaysAcrd               float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr            ActiveCurrencyAnd13DecimalAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd       TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 TaxblIncmPerShrClctd,omitempty"`
	XtndedTaxblIncmPerShrClctd Extended350Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 XtndedTaxblIncmPerShrClctd,omitempty"`
	PricDiffRsn                Max350Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.056.001.01 PricDiffRsn,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
