// Code generated by main. DO NOT EDIT.

package setr_057_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

type ConfirmationRejectedReason1Choice struct {
	Cd    RejectedConfirmationStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Cd"`
	Prtry GenericIdentification1                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Prtry"`
}

type ConfirmationRejectedStatus2 struct {
	Rsn      ConfirmationRejectedReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Rsn,omitempty"`
	AddtlInf Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AddtlInf,omitempty"`
}

type ConfirmationStatus1Choice struct {
	ConfRjctd   []ConfirmationRejectedStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 ConfRjctd"`
	AmdmntRjctd []ConfirmationRejectedStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AmdmntRjctd"`
	Sts         OrderConfirmationStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Sts"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateFormat42Choice struct {
	YrMnth    ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 YrMnth"`
	YrMnthDay ISODate      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 YrMnthDay"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	OrdrConfStsRpt OrderConfirmationStatusReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OrdrConfStsRpt"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Txt"`
}

type FinancialInstrument57 struct {
	Id          SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Id"`
	Nm          Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Nm,omitempty"`
	ShrtNm      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 ShrtNm,omitempty"`
	SplmtryId   Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SplmtryId,omitempty"`
	ClssTp      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 PdctGrp,omitempty"`
	SrsId       Series1                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SrsId,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Prtry"`
}

type IndividualOrderConfirmationStatusAndReason2 struct {
	MstrRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 MstrRef,omitempty"`
	OrdrRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OrdrRef"`
	Conf            ConfirmationStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Conf"`
	ClntRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 ClntRef,omitempty"`
	DealRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 DealRef,omitempty"`
	StsInitr        PartyIdentification113    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 StsInitr,omitempty"`
	InvstmtAcctDtls InvestmentAccount58       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument57     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 FinInstrmDtls,omitempty"`
}

type InvestmentAccount58 struct {
	AcctId           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AcctId"`
	AcctNm           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AcctNm,omitempty"`
	AcctDsgnt        Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AcctDsgnt,omitempty"`
	OwnrId           []PartyIdentification113        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OwnrId,omitempty"`
	AcctSvcr         PartyIdentification113          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AcctSvcr,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OrdrOrgtrElgblty,omitempty"`
	SubAcctDtls      SubAccount6                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SubAcctDtls,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Adr,omitempty"`
}

// May be one of STNP, CPNP, COAC, CREC
type OrderConfirmationStatus1Code string

type OrderConfirmationStatusReportV02 struct {
	MsgId               MessageIdentification1                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 MsgId"`
	Ref                 References61Choice                            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Ref,omitempty"`
	IndvOrdrConfDtlsRpt []IndividualOrderConfirmationStatusAndReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 IndvOrdrConfDtlsRpt"`
	Xtnsn               []Extension1                                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Xtnsn,omitempty"`
}

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 LEI,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

type References61Choice struct {
	RltdRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 RltdRef"`
	OthrRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OthrRef"`
}

// May be one of DSAF, DFIN, DBEN, DPTD, DORD, DCXR, DUNB, DORT, DROU, DNAM, DGAM, DHRR, DGRP, DINP, DLIR, DARR, DPDI, DRSC, DNAV, DFXD, DCHD, DXOD, DTAD, DPDD, DSCA, DPID, DSAM, DSDT, DEXD, DIMD, DTRA, DTSA, DACI, DACO, DPSA, DPRA, DLID, DORF, ULNK, DREF, IVAG, IRCU, IRIN, ICAG, IDCU, IDIN, ICTR, DMON, DDAT, NSLA, MEUT, MCOM, MCHA, MTAX, NATA, ALAT
type RejectedConfirmationStatusReason1Code string

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 OthrPrtryId"`
}

type Series1 struct {
	SrsDt DateFormat42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SrsDt,omitempty"`
	SrsNm Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 SrsNm,omitempty"`
}

type SubAccount6 struct {
	Id        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Id"`
	Nm        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Nm,omitempty"`
	Chrtc     Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 Chrtc,omitempty"`
	AcctDsgnt Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.057.001.02 AcctDsgnt,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
