// Code generated by main. DO NOT EDIT.

package setr_016_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Prtry"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

type CancelledStatus2 struct {
	Rsn          CancelledStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NoSpcfdRsn"`
}

// May be one of CANH, CANP, CXLR, CANO
type CancelledStatusReason2Code string

type Charge19 struct {
	Tp       ChargeType11Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Tp"`
	XtndedTp Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedTp"`
	Amt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Amt"`
	Rate     float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rate"`
}

// May be one of BEND, FEND, SWIT, DLEV, DISC, PENA, POST, REGF, SHIP, CHAR, CDSC, CBCH, PREM, INIT, BRKF, UCIC
type ChargeType11Code string

type Commission11 struct {
	Amt                  ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Amt,omitempty"`
	Rate                 float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rate,omitempty"`
	Tp                   CommissionType6Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Tp,omitempty"`
	XtndedTp             Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedTp,omitempty"`
	ComrclAgrmtRef       Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 ComrclAgrmtRef,omitempty"`
	NewComrclAgrmtRefInd bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NewComrclAgrmtRefInd,omitempty"`
}

// May be one of FEND, BEND, CDPL
type CommissionType6Code string

type ConditionallyAcceptedStatus2 struct {
	NoSpcfdRsn NoReasonCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NoSpcfdRsn"`
	RsnDtls    []ConditionallyAcceptedStatusReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RsnDtls"`
}

type ConditionallyAcceptedStatusReason2 struct {
	Rsn          ConditionallyAcceptedStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	AddtlInf     Max350Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlInf,omitempty"`
}

// May be one of DOCC, AWRM, AWSM, DUPL, CRED
type ConditionallyAcceptedStatusReason2Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DtTm"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	OrdrInstrStsRptV03 OrderInstructionStatusReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrInstrStsRptV03"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

type ExpectedExecutionDetails2 struct {
	XpctdTradDtTm   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XpctdTradDtTm,omitempty"`
	XpctdCshSttlmDt ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XpctdCshSttlmDt,omitempty"`
}

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Txt"`
}

type FinancialInstrument10 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SplmtryId,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PdctGrp,omitempty"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Unit"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type FundOrderData1 struct {
	InvstmtAcctDtls InvestmentAccount13               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument10             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 FinInstrmDtls,omitempty"`
	UnitsNb         FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 UnitsNb,omitempty"`
	NetAmt          ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NetAmt,omitempty"`
	GrssAmt         ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 GrssAmt,omitempty"`
	HldgsRedRate    float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 HldgsRedRate,omitempty"`
	SttlmAmt        ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SttlmAmt,omitempty"`
	UnitCcy         ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 UnitCcy,omitempty"`
	QtdCcy          ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 QtdCcy,omitempty"`
}

type FundOrderData2 struct {
	TtlRedAmt   ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 TtlRedAmt,omitempty"`
	TtlSbcptAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 TtlSbcptAmt,omitempty"`
	SttlmAmt    ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SttlmAmt,omitempty"`
	SttlmMtd    DeliveryReceiptType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SttlmMtd,omitempty"`
	AddtlCshIn  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlCshIn,omitempty"`
	RsltgCshOut ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RsltgCshOut,omitempty"`
	UnitCcy     ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 UnitCcy,omitempty"`
	QtdCcy      ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 QtdCcy,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InRepairStatus2 struct {
	RsnDtls    InRepairStatusReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RsnDtls"`
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NoSpcfdRsn"`
}

// May be one of COMA
type InRepairStatusReason1Code string

type InRepairStatusReason3 struct {
	Rsn          InRepairStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	AddtlInf     Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlInf,omitempty"`
}

type IndividualOrderStatusAndReason2 struct {
	MstrRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 MstrRef,omitempty"`
	OrdrRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrRef"`
	ClntRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 ClntRef,omitempty"`
	DealRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DealRef,omitempty"`
	CxlRef       Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CxlRef,omitempty"`
	Sts          OrderStatus4Code             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sts"`
	Canc         CancelledStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CondlyAccptd"`
	Rjctd        []RejectedStatus6            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rjctd"`
	Sspd         SuspendedStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sspd"`
	InRpr        InRepairStatus2              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 InRpr"`
	PrtlySttld   PartiallySettledStatus1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PrtlySttld"`
	RprdConds    RepairedConditions3          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RprdConds,omitempty"`
	StsInitr     PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 StsInitr,omitempty"`
	OrdrData     FundOrderData1               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrData,omitempty"`
	NewDtls      ExpectedExecutionDetails2    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NewDtls,omitempty"`
}

type InvestmentAccount13 struct {
	AcctId    AccountIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AcctId"`
	AcctNm    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AcctNm,omitempty"`
	AcctDsgnt Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AcctDsgnt,omitempty"`
	OwnrId    []PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OwnrId,omitempty"`
	AcctSvcr  PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AcctSvcr,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OrderInstructionStatusReportV03 struct {
	MsgId            MessageIdentification1            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 MsgId"`
	OthrRef          []AdditionalReference3            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OthrRef,omitempty"`
	RltdRef          []AdditionalReference3            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RltdRef,omitempty"`
	OrdrDtlsRpt      OrderStatusAndReason7             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrDtlsRpt"`
	IndvOrdrDtlsRpt  []IndividualOrderStatusAndReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 IndvOrdrDtlsRpt"`
	SwtchOrdrDtlsRpt []SwitchOrderStatusAndReason1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SwtchOrdrDtlsRpt"`
	Xtnsn            []Extension1                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Xtnsn,omitempty"`
}

// May be one of PACK, COSE, STNP, RECE, SETT, CPNP, CNFC, DONE, DONF, OPOD, IACO
type OrderStatus4Code string

type OrderStatusAndReason7 struct {
	MstrRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 MstrRef,omitempty"`
	Sts          OrderStatus4Code             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sts"`
	Canc         CancelledStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CondlyAccptd"`
	Rjctd        []RejectedStatus6            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rjctd"`
	Sspd         SuspendedStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sspd"`
	PrtlySttld   PartiallySettledStatus1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PrtlySttld"`
	StsInitr     PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 StsInitr,omitempty"`
}

type PartiallySettledStatus1 struct {
	Rsn          SettledStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	AddtlInf     Max350Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlInf,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

type RejectedStatus6 struct {
	Rsn          RejectedStatusReason7Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	AddtlInf     Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlInf,omitempty"`
}

// May be one of POIN, ICAG, IDDB, INTE, SAFE, IPAY, ICTR, DEPT, IVAG, ISAF, DFOR, DSEC, BLCA, BLTR, DOCC, MONY, SECU, IDNA, UWAI, UDCY, UNAV, UPAY, URSC, SHIG, SLOW, ULNK, DLVY, ORRF, IPAC, IOTP, NSLA, CUTO, LATE, ADEA, CASH, DDAT, DQUA, DTRD, FEEE, IEXE, NCRR, PHYS, PLCE, SETR, RTGS, NRGM, DMON
type RejectedStatusReason7Code string

type RepairedConditions3 struct {
	RprdChrg   []Charge19     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RprdChrg,omitempty"`
	RprdComssn []Commission11 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RprdComssn,omitempty"`
}

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OthrPrtryId"`
}

// May be one of UPST, CPST, UCPS
type SettledStatusReason1Code string

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Id"`
}

type SuspendedStatus2 struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NoSpcfdRsn"`
	RsnDtls    []SuspendedStatusReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RsnDtls"`
}

type SuspendedStatusReason2 struct {
	Rsn          SuspendedStatusReason3Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rsn"`
	XtndedRsn    Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DataSrcSchme"`
	AddtlInf     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 AddtlInf,omitempty"`
}

// May be one of PRIC, FLOW
type SuspendedStatusReason3Code string

type SwitchLegReferences1 struct {
	RedLegId        Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RedLegId"`
	SbcptLegId      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 SbcptLegId"`
	LegRjctnRsn     Max350Text            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 LegRjctnRsn,omitempty"`
	RprdConds       RepairedConditions3   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 RprdConds,omitempty"`
	InvstmtAcctDtls InvestmentAccount13   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument10 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 FinInstrmDtls,omitempty"`
}

type SwitchOrderStatusAndReason1 struct {
	MstrRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 MstrRef,omitempty"`
	OrdrRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrRef"`
	ClntRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 ClntRef,omitempty"`
	DealRef      Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 DealRef,omitempty"`
	CxlRef       Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CxlRef,omitempty"`
	Sts          OrderStatus4Code             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sts"`
	Canc         CancelledStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 CondlyAccptd"`
	Rjctd        []RejectedStatus6            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Rjctd"`
	Sspd         SuspendedStatus2             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 Sspd"`
	InRpr        InRepairStatus2              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 InRpr"`
	PrtlySttld   PartiallySettledStatus1      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 PrtlySttld"`
	LegInf       []SwitchLegReferences1       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 LegInf,omitempty"`
	StsInitr     PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 StsInitr,omitempty"`
	OrdrData     FundOrderData2               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 OrdrData,omitempty"`
	NewDtls      ExpectedExecutionDetails2    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.03 NewDtls,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
