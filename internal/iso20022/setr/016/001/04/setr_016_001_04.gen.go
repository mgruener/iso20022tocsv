// Code generated by main. DO NOT EDIT.

package setr_016_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalAmount1Choice struct {
	AddtlCshIn  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlCshIn"`
	RsltgCshOut ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RsltgCshOut"`
}

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

type CancelledReason12Choice struct {
	Cd         CancelledStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry      GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NoSpcfdRsn"`
}

type CancelledStatusReason16 struct {
	Rsn      CancelledReason12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn,omitempty"`
	AddtlInf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

// May be one of CANH, CANP, CXLR, CANO
type CancelledStatusReason2Code string

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

type ConditionallyAcceptedStatus3Choice struct {
	NoSpcfdRsn NoReasonCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NoSpcfdRsn"`
	RsnDtls    []ConditionallyAcceptedStatusReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RsnDtls"`
}

// May be one of DOCC, AWRM, AWSM, DUPL, CRED
type ConditionallyAcceptedStatusReason2Code string

type ConditionallyAcceptedStatusReason3 struct {
	Rsn      ConditionallyAcceptedStatusReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn"`
	AddtlInf Max350Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

type ConditionallyAcceptedStatusReason3Choice struct {
	Cd    ConditionallyAcceptedStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 DtTm"`
}

type DateFormat42Choice struct {
	YrMnth    ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 YrMnth"`
	YrMnthDay ISODate      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 YrMnthDay"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	OrdrInstrStsRpt OrderInstructionStatusReportV04 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrInstrStsRpt"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type ExpectedExecutionDetails2 struct {
	XpctdTradDtTm   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 XpctdTradDtTm,omitempty"`
	XpctdCshSttlmDt ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 XpctdCshSttlmDt,omitempty"`
}

type ExpectedExecutionDetails4 struct {
	XpctdTradDtTm   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 XpctdTradDtTm,omitempty"`
	XpctdCshSttlmDt ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 XpctdCshSttlmDt,omitempty"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Txt"`
}

type Fee3 struct {
	Tp                   ChargeType5Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Tp,omitempty"`
	RprdStdAmt           ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdStdAmt,omitempty"`
	RprdStdRate          float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdStdRate,omitempty"`
	RprdDscntAmt         ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdDscntAmt,omitempty"`
	RprdDscntRate        float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdDscntRate,omitempty"`
	RprdReqdAmt          ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdReqdAmt,omitempty"`
	RprdReqdRate         float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdReqdRate,omitempty"`
	ComrclAgrmtRef       Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ComrclAgrmtRef,omitempty"`
	NewComrclAgrmtRefInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NewComrclAgrmtRefInd,omitempty"`
}

type FinancialInstrument57 struct {
	Id          SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	Nm          Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Nm,omitempty"`
	ShrtNm      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ShrtNm,omitempty"`
	SplmtryId   Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SplmtryId,omitempty"`
	ClssTp      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PdctGrp,omitempty"`
	SrsId       Series1                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SrsId,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type FundOrderData5 struct {
	InvstmtAcctDtls InvestmentAccount58               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument57             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 FinInstrmDtls,omitempty"`
	UnitsNb         float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 UnitsNb,omitempty"`
	NetAmt          ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NetAmt,omitempty"`
	GrssAmt         ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 GrssAmt,omitempty"`
	HldgsRedRate    float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 HldgsRedRate,omitempty"`
	SttlmAmt        ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SttlmAmt,omitempty"`
	UnitCcy         ActiveCurrencyCode                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 UnitCcy,omitempty"`
	QtdCcy          ActiveCurrencyCode                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 QtdCcy,omitempty"`
}

type FundOrderData6 struct {
	SttlmAmt ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SttlmAmt,omitempty"`
	SttlmMtd DeliveryReceiptType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SttlmMtd,omitempty"`
	AddtlAmt AdditionalAmount1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlAmt,omitempty"`
	UnitCcy  ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 UnitCcy,omitempty"`
	QtdCcy   ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 QtdCcy,omitempty"`
}

// May be one of GATE, HOLD
type GateHoldBack1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Issr,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SchmeNm,omitempty"`
}

type HoldBackInformation3 struct {
	Tp          GateHoldBack1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Tp"`
	Amt         ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Amt,omitempty"`
	XpctdRlsDt  ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 XpctdRlsDt,omitempty"`
	FinInstrmId SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 FinInstrmId,omitempty"`
	FinInstrmNm Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 FinInstrmNm,omitempty"`
	RedCmpltn   RedemptionCompletion1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RedCmpltn,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

// May be one of COMA
type InRepairStatusReason1Code string

type InRepairStatusReason4 struct {
	Rsn      InRepairStatusReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn"`
	AddtlInf Max350Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

type InRepairStatusReason4Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NoSpcfdRsn"`
	RsnDtls    []InRepairStatusReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RsnDtls"`
}

type InRepairStatusReason5Choice struct {
	Cd    InRepairStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

type IndividualOrderStatusAndReason7 struct {
	MstrRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 MstrRef,omitempty"`
	OrdrRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrRef"`
	ClntRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ClntRef,omitempty"`
	DealRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 DealRef,omitempty"`
	CxlRef          Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CxlRef,omitempty"`
	OrdrSts         OrderStatus5Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrSts"`
	RprdFee         []Fee3                    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdFee,omitempty"`
	StsInitr        PartyIdentification113    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 StsInitr,omitempty"`
	OrdrData        FundOrderData5            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrData,omitempty"`
	NewDtls         ExpectedExecutionDetails4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NewDtls,omitempty"`
	GtgOrHldBckDtls HoldBackInformation3      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 GtgOrHldBckDtls,omitempty"`
}

type InvestmentAccount58 struct {
	AcctId           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AcctId"`
	AcctNm           Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AcctNm,omitempty"`
	AcctDsgnt        Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AcctDsgnt,omitempty"`
	OwnrId           []PartyIdentification113        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OwnrId,omitempty"`
	AcctSvcr         PartyIdentification113          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AcctSvcr,omitempty"`
	OrdrOrgtrElgblty OrderOriginatorEligibility1Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrOrgtrElgblty,omitempty"`
	SubAcctDtls      SubAccount6                     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SubAcctDtls,omitempty"`
}

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LegIdentification1Choice struct {
	RedLegId   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RedLegId"`
	SbcptLegId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SbcptLegId"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OrderInstructionStatusReportV04 struct {
	MsgId  MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 MsgId"`
	Ref    References61Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Ref,omitempty"`
	StsRpt Status24Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 StsRpt"`
	Xtnsn  []Extension1           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Xtnsn,omitempty"`
}

// May be one of ELIG, RETL, PROF
type OrderOriginatorEligibility1Code string

type OrderStatus3Choice struct {
	Sts          OrderStatus4Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sts"`
	Canc         CancelledStatusReason16            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CondlyAccptd"`
	Rjctd        []RejectedStatus9                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rjctd"`
	Sspd         SuspendedStatusReason4Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sspd"`
	PrtlySttld   PartiallySettledStatus10           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PrtlySttld"`
}

type OrderStatus4Choice struct {
	Sts          OrderStatus4Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sts"`
	Canc         CancelledStatusReason16            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CondlyAccptd"`
	Rjctd        []RejectedStatus9                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rjctd"`
	Sspd         SuspendedStatusReason4Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sspd"`
	InRpr        InRepairStatusReason4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 InRpr"`
	PrtlySttld   PartiallySettledStatus10           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PrtlySttld"`
}

// May be one of PACK, COSE, STNP, RECE, SETT, CPNP, CNFC, DONE, DONF, OPOD, IACO
type OrderStatus4Code string

type OrderStatus5Choice struct {
	Sts          OrderStatus4Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sts"`
	Canc         CancelledStatusReason16            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Canc"`
	CondlyAccptd ConditionallyAcceptedStatus3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CondlyAccptd"`
	Rjctd        []RejectedStatus9                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rjctd"`
	Sspd         SuspendedStatusReason4Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Sspd"`
	InRpr        InRepairStatusReason4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 InRpr"`
	PrtlySttld   PartiallySettledStatus10           `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PrtlySttld"`
}

type OrderStatusAndReason10 struct {
	MstrRef  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 MstrRef,omitempty"`
	OrdrSts  OrderStatus3Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrSts"`
	StsInitr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 StsInitr,omitempty"`
}

type PartiallySettled21Choice struct {
	Cd    SettledStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

type PartiallySettledStatus10 struct {
	Rsn      PartiallySettled21Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn"`
	AddtlInf Max350Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 LEI,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

// May be one of RED0, RED1
type RedemptionCompletion1Code string

type References61Choice struct {
	RltdRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RltdRef"`
	OthrRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OthrRef"`
}

type RejectedReason20Choice struct {
	Cd    RejectedStatusReason11Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

type RejectedStatus9 struct {
	Rsn      RejectedReason20Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn,omitempty"`
	AddtlInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

// May be one of BLCA, BLTR, DOCC, ADEA, ILLI, BMIN, BMRA, BMRV, CUTO, ICAG, IDDB, ORRF, FEEE, DSEC, IDNA, DQUA, CLOS, IPAC, INSU, INTE, CASH, ICTR, IOTP, DFOR, DMON, SAFE, LOCK, NRGM, NSLA, MONY, SECU, IPAY, PRCT, DLVY, PHYS, PLCE, IVAG, RTGS, ISAF, NCRR, DDAT, DEPT, SETR, IEXE, SHIG, LATE, SLOW, DTRD, UWAI, UDCY, UNAV, UPAY, URSC, ULNK, UNSC, POIN
type RejectedStatusReason11Code string

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OthrPrtryId"`
}

type Series1 struct {
	SrsDt DateFormat42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SrsDt,omitempty"`
	SrsNm Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SrsNm,omitempty"`
}

// May be one of CPST, GATM, GAT1, UCPS, UPST
type SettledStatusReason2Code string

type Status24Choice struct {
	OrdrDtlsRpt      OrderStatusAndReason10            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrDtlsRpt"`
	IndvOrdrDtlsRpt  []IndividualOrderStatusAndReason7 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 IndvOrdrDtlsRpt"`
	SwtchOrdrDtlsRpt []SwitchOrderStatusAndReason2     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 SwtchOrdrDtlsRpt"`
}

type SubAccount6 struct {
	Id        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Id"`
	Nm        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Nm,omitempty"`
	Chrtc     Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Chrtc,omitempty"`
	AcctDsgnt Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AcctDsgnt,omitempty"`
}

// May be one of PRIC, FLOW
type SuspendedStatusReason3Code string

type SuspendedStatusReason4 struct {
	Rsn      SuspendedStatusReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Rsn"`
	AddtlInf Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 AddtlInf,omitempty"`
}

type SuspendedStatusReason4Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NoSpcfdRsn"`
	RsnDtls    []SuspendedStatusReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RsnDtls"`
}

type SuspendedStatusReason5Choice struct {
	Cd    SuspendedStatusReason3Code `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Cd"`
	Prtry GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 Prtry"`
}

type SwitchLegReferences2 struct {
	LegId           LegIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 LegId"`
	LegRjctnRsn     Max350Text               `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 LegRjctnRsn,omitempty"`
	RprdFee         []Fee3                   `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 RprdFee,omitempty"`
	InvstmtAcctDtls InvestmentAccount58      `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 InvstmtAcctDtls,omitempty"`
	FinInstrmDtls   FinancialInstrument57    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 FinInstrmDtls,omitempty"`
}

type SwitchOrderStatusAndReason2 struct {
	MstrRef  Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 MstrRef,omitempty"`
	OrdrRef  Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrRef"`
	ClntRef  Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 ClntRef,omitempty"`
	DealRef  Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 DealRef,omitempty"`
	CxlRef   Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 CxlRef,omitempty"`
	OrdrSts  OrderStatus4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrSts"`
	LegInf   []SwitchLegReferences2    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 LegInf,omitempty"`
	StsInitr PartyIdentification113    `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 StsInitr,omitempty"`
	OrdrData FundOrderData6            `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 OrdrData,omitempty"`
	NewDtls  ExpectedExecutionDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:setr.016.001.04 NewDtls,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
