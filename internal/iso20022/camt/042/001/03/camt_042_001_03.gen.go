// Code generated by main. DO NOT EDIT.

package camt_042_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalParameters1 struct {
	Ctry    CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ctry,omitempty"`
	Ccy     ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ccy,omitempty"`
	GeoArea Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 GeoArea,omitempty"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

type BreakdownByCountry1 struct {
	Ctry       CountryCode        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ctry"`
	CshInFcst  []CashInForecast3  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshInFcst,omitempty"`
	CshOutFcst []CashOutForecast3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshOutFcst,omitempty"`
	NetCshFcst []NetCashForecast2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetCshFcst,omitempty"`
}

type BreakdownByCurrency1 struct {
	Ccy        ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ccy"`
	CshOutFcst []CashOutForecast3           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshOutFcst,omitempty"`
	CshInFcst  []CashInForecast3            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshInFcst,omitempty"`
	NetCshFcst []NetCashForecast2           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetCshFcst,omitempty"`
}

type BreakdownByParty1 struct {
	Pty         PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Pty"`
	AddtlParams AdditionalParameters1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 AddtlParams,omitempty"`
	CshInFcst   []CashInForecast3          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshInFcst,omitempty"`
	CshOutFcst  []CashOutForecast3         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshOutFcst,omitempty"`
	NetCshFcst  []NetCashForecast2         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetCshFcst,omitempty"`
}

type BreakdownByUserDefinedParameter1 struct {
	Pty        PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Pty,omitempty"`
	Ctry       CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ctry,omitempty"`
	Ccy        ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ccy,omitempty"`
	UsrDfnd    DataFormat2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 UsrDfnd,omitempty"`
	CshInFcst  []CashInForecast3            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshInFcst,omitempty"`
	CshOutFcst []CashOutForecast3           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshOutFcst,omitempty"`
	NetCshFcst []NetCashForecast2           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetCshFcst,omitempty"`
}

type CashInForecast3 struct {
	CshSttlmDt       ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshSttlmDt"`
	SubTtlAmt        ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SubTtlAmt,omitempty"`
	SubTtlUnitsNb    FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SubTtlUnitsNb,omitempty"`
	XcptnlCshFlowInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XcptnlCshFlowInd,omitempty"`
	CshInBrkdwnDtls  []FundCashInBreakdown2            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshInBrkdwnDtls,omitempty"`
}

type CashOutForecast3 struct {
	CshSttlmDt       ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshSttlmDt"`
	SubTtlAmt        ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SubTtlAmt,omitempty"`
	SubTtlUnitsNb    FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SubTtlUnitsNb,omitempty"`
	XcptnlCshFlowInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XcptnlCshFlowInd,omitempty"`
	CshOutBrkdwnDtls []FundCashOutBreakdown2           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshOutBrkdwnDtls,omitempty"`
}

type Charge16 struct {
	Tp       ChargeType10Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Tp"`
	XtndedTp Extended350Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedTp"`
	Amt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Amt"`
	Rate     float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Rate"`
}

// May be one of BEND, FEND, PENA
type ChargeType10Code string

type Commission9 struct {
	Tp       CommissionType6Code                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Tp"`
	XtndedTp Extended350Code                            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedTp"`
	Amt      ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Amt"`
	Rate     float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Rate"`
}

// May be one of FEND, BEND, CDPL
type CommissionType6Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DataFormat2Choice struct {
	Strd  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Strd"`
	Ustrd Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ustrd"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 DtTm"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	FndDtldEstmtdCshFcstRptV03 FundDetailedEstimatedCashForecastReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 FndDtldEstmtdCshFcstRptV03"`
}

type EstimatedFundCashForecast4 struct {
	Id                   Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Id"`
	TradDtTm             DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 TradDtTm"`
	PrvsTradDtTm         DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrvsTradDtTm"`
	FinInstrmDtls        FinancialInstrument9               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 FinInstrmDtls"`
	EstmtdTtlNAV         ActiveOrHistoricCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 EstmtdTtlNAV,omitempty"`
	PrvsTtlNAV           ActiveOrHistoricCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrvsTtlNAV,omitempty"`
	EstmtdTtlUnitsNb     FinancialInstrumentQuantity1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 EstmtdTtlUnitsNb,omitempty"`
	PrvsTtlUnitsNb       FinancialInstrumentQuantity1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrvsTtlUnitsNb,omitempty"`
	BrkdwnByPty          []BreakdownByParty1                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BrkdwnByPty,omitempty"`
	BrkdwnByCtry         []BreakdownByCountry1              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BrkdwnByCtry,omitempty"`
	BrkdwnByCcy          []BreakdownByCurrency1             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BrkdwnByCcy,omitempty"`
	BrkdwnByUsrDfndParam []BreakdownByUserDefinedParameter1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BrkdwnByUsrDfndParam,omitempty"`
	EstmtdTtlNAVChngRate float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 EstmtdTtlNAVChngRate,omitempty"`
	InvstmtCcy           []ActiveOrHistoricCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 InvstmtCcy,omitempty"`
	XcptnlNetCshFlowInd  bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XcptnlNetCshFlowInd"`
	EstmtdNetCshFcstDtls []NetCashForecast2                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 EstmtdNetCshFcstDtls,omitempty"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Txt"`
}

type FinancialInstrument9 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SplmtryId,omitempty"`
	ReqdNAVCcy  ActiveOrHistoricCurrencyCode  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ReqdNAVCcy,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 DstrbtnPlcy,omitempty"`
	DualFndInd  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 DualFndInd"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Unit"`
}

// May be one of INCG, OUTG
type FlowDirectionType1Code string

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type FundCashInBreakdown2 struct {
	Amt                    ActiveOrHistoricCurrencyAndAmount    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Amt,omitempty"`
	UnitsNb                FinancialInstrumentQuantity1         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 UnitsNb,omitempty"`
	NewAmtInd              bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NewAmtInd,omitempty"`
	InvstmtFndTxInTp       InvestmentFundTransactionInType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 InvstmtFndTxInTp"`
	XtndedInvstmtFndTxInTp Extended350Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedInvstmtFndTxInTp"`
	OrgnlOrdrQtyTp         OrderQuantityType2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 OrgnlOrdrQtyTp"`
	XtndedOrgnlOrdrQtyTp   Extended350Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedOrgnlOrdrQtyTp"`
	ChrgDtls               []Charge16                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ChrgDtls,omitempty"`
	ComssnDtls             []Commission9                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ComssnDtls,omitempty"`
}

type FundCashOutBreakdown2 struct {
	Amt                     ActiveOrHistoricCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Amt,omitempty"`
	UnitsNb                 FinancialInstrumentQuantity1          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 UnitsNb,omitempty"`
	NewAmtInd               bool                                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NewAmtInd,omitempty"`
	InvstmtFndTxOutTp       InvestmentFundTransactionOutType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 InvstmtFndTxOutTp"`
	XtndedInvstmtFndTxOutTp Extended350Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedInvstmtFndTxOutTp"`
	OrgnlOrdrQtyTp          OrderQuantityType2Code                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 OrgnlOrdrQtyTp"`
	XtndedOrgnlOrdrQtyTp    Extended350Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 XtndedOrgnlOrdrQtyTp"`
	ChrgDtls                []Charge16                            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ChrgDtls,omitempty"`
	ComssnDtls              []Commission9                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ComssnDtls,omitempty"`
}

type FundDetailedEstimatedCashForecastReportV03 struct {
	MsgId                MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 MsgId"`
	PoolRef              AdditionalReference3         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PoolRef,omitempty"`
	PrvsRef              []AdditionalReference3       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrvsRef,omitempty"`
	RltdRef              []AdditionalReference3       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 RltdRef,omitempty"`
	MsgPgntn             Pagination                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 MsgPgntn"`
	EstmtdFndCshFcstDtls []EstimatedFundCashForecast4 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 EstmtdFndCshFcstDtls"`
	CnsltdNetCshFcst     NetCashForecast3             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CnsltdNetCshFcst,omitempty"`
	Xtnsn                []Extension1                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Xtnsn,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be one of SUBS, SWII, INSP, CROI, RDIV
type InvestmentFundTransactionInType1Code string

// May be one of REDM, SWIO, INSP, CROO
type InvestmentFundTransactionOutType1Code string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Adr,omitempty"`
}

type NetCashForecast2 struct {
	CshSttlmDt ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CshSttlmDt"`
	NetAmt     ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetAmt,omitempty"`
	NetUnitsNb FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetUnitsNb,omitempty"`
	FlowDrctn  FlowDirectionType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 FlowDrctn"`
}

type NetCashForecast3 struct {
	NetAmt     ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetAmt,omitempty"`
	NetUnitsNb FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NetUnitsNb,omitempty"`
	FlowDrctn  FlowDirectionType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 FlowDrctn"`
}

// May be one of UNIT, CASH
type OrderQuantityType2Code string

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 LastPgInd"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.042.001.03 OthrPrtryId"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
