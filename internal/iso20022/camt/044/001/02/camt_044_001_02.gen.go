// Code generated by main. DO NOT EDIT.

package camt_044_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

type CashInForecast4 struct {
	CshSttlmDt       ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshSttlmDt"`
	SubTtlAmt        ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SubTtlAmt,omitempty"`
	SubTtlUnitsNb    FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SubTtlUnitsNb,omitempty"`
	XcptnlCshFlowInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 XcptnlCshFlowInd,omitempty"`
}

type CashOutForecast4 struct {
	CshSttlmDt       ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshSttlmDt"`
	SubTtlAmt        ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SubTtlAmt,omitempty"`
	SubTtlUnitsNb    FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SubTtlUnitsNb,omitempty"`
	XcptnlCshFlowInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 XcptnlCshFlowInd,omitempty"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 DtTm"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	FndConfdCshFcstRptCxlV02 FundConfirmedCashForecastReportCancellationV02 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 FndConfdCshFcstRptCxlV02"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Txt"`
}

type FinancialInstrument9 struct {
	Id          SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Id"`
	Nm          Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Nm,omitempty"`
	SplmtryId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SplmtryId,omitempty"`
	ReqdNAVCcy  ActiveOrHistoricCurrencyCode  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 ReqdNAVCcy,omitempty"`
	ClssTp      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 DstrbtnPlcy,omitempty"`
	DualFndInd  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 DualFndInd"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Unit"`
}

// May be one of INCG, OUTG
type FlowDirectionType1Code string

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type FundCashForecast3 struct {
	Id                  Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Id"`
	TradDtTm            DateAndDateTimeChoice             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TradDtTm"`
	PrvsTradDtTm        DateAndDateTimeChoice             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrvsTradDtTm,omitempty"`
	FinInstrmDtls       FinancialInstrument9              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 FinInstrmDtls"`
	TtlNAV              ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TtlNAV,omitempty"`
	PrvsTtlNAV          ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrvsTtlNAV,omitempty"`
	TtlUnitsNb          FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TtlUnitsNb,omitempty"`
	PrvsTtlUnitsNb      FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrvsTtlUnitsNb,omitempty"`
	TtlNAVChngRate      float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TtlNAVChngRate,omitempty"`
	InvstmtCcy          []ActiveOrHistoricCurrencyCode    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 InvstmtCcy,omitempty"`
	XcptnlNetCshFlowInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 XcptnlNetCshFlowInd"`
	CshInFcstDtls       []CashInForecast4                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshInFcstDtls,omitempty"`
	CshOutFcstDtls      []CashOutForecast4                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshOutFcstDtls,omitempty"`
	NetCshFcstDtls      []NetCashForecast2                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NetCshFcstDtls,omitempty"`
}

type FundConfirmedCashForecastReport2 struct {
	FndCshFcstDtls   []FundCashForecast3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 FndCshFcstDtls"`
	CnsltdNetCshFcst NetCashForecast3    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CnsltdNetCshFcst,omitempty"`
	Xtnsn            []Extension1        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Xtnsn,omitempty"`
}

type FundConfirmedCashForecastReportCancellationV02 struct {
	MsgId              MessageIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 MsgId"`
	PoolRef            AdditionalReference3             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PoolRef,omitempty"`
	PrvsRef            AdditionalReference3             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrvsRef,omitempty"`
	RltdRef            []AdditionalReference3           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 RltdRef,omitempty"`
	MsgPgntn           Pagination                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 MsgPgntn"`
	CshFcstRptToBeCanc FundConfirmedCashForecastReport2 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshFcstRptToBeCanc,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Adr,omitempty"`
}

type NetCashForecast2 struct {
	CshSttlmDt ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CshSttlmDt"`
	NetAmt     ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NetAmt,omitempty"`
	NetUnitsNb FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NetUnitsNb,omitempty"`
	FlowDrctn  FlowDirectionType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 FlowDrctn"`
}

type NetCashForecast3 struct {
	NetAmt     ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NetAmt,omitempty"`
	NetUnitsNb FinancialInstrumentQuantity1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NetUnitsNb,omitempty"`
	FlowDrctn  FlowDirectionType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 FlowDrctn"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 LastPgInd"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Ctry"`
}

// Must be at least 1 items long
type RICIdentifier string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.044.001.02 OthrPrtryId"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
