// Code generated by main. DO NOT EDIT.

package colr_016_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type Agreement4 struct {
	AgrmtDtls  Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AgrmtDtls"`
	AgrmtId    Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AgrmtId,omitempty"`
	AgrmtDt    ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AgrmtDt"`
	BaseCcy    ActiveCurrencyCode        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 BaseCcy"`
	AgrmtFrmwk AgreementFramework1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AgrmtFrmwk,omitempty"`
}

type AgreementFramework1Choice struct {
	AgrmtFrmwk AgreementFramework1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AgrmtFrmwk"`
	PrtryId    GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PrtryId"`
}

// May be one of FBAA, BBAA, DERV, ISDA, NONR
type AgreementFramework1Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CashCollateral4 struct {
	AsstNb   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AsstNb,omitempty"`
	DpstAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 DpstAmt,omitempty"`
	DpstTp   DepositType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 DpstTp,omitempty"`
	BlckdAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 BlckdAmt,omitempty"`
	MtrtyDt  ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MtrtyDt,omitempty"`
	ValDt    ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValDt,omitempty"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XchgRate,omitempty"`
	CollVal  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollVal"`
	Hrcut    float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Hrcut,omitempty"`
}

type Collateral13 struct {
	AcctId    CollateralAccount2     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AcctId"`
	RptSummry Summary1               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptSummry"`
	CollValtn []CollateralValuation5 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollValtn,omitempty"`
}

type CollateralAccount2 struct {
	Id Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Tp CollateralAccountIdentificationType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp,omitempty"`
	Nm Max70Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Nm,omitempty"`
}

type CollateralAccountIdentificationType2Choice struct {
	Tp    CollateralAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp,omitempty"`
	Prtry GenericIdentification36    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Prtry"`
}

// May be one of HOUS, CLIE, LIPR, MGIN, DFLT
type CollateralAccountType1Code string

type CollateralAmount1 struct {
	CollAmt        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollAmt"`
	RptdCcyAndAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptdCcyAndAmt"`
	MktValAmt      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MktValAmt"`
	AcrdIntrstAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AcrdIntrstAmt,omitempty"`
	FeesAndComssns ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 FeesAndComssns,omitempty"`
}

type CollateralAndExposureReportV03 struct {
	RptParams   ReportParameters5    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptParams"`
	Pgntn       Pagination           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Pgntn,omitempty"`
	Oblgtn      Obligation4          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Oblgtn"`
	Agrmt       Agreement4           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Agrmt,omitempty"`
	CollRpt     []Collateral13       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollRpt"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SplmtryData,omitempty"`
}

type CollateralOwnership2 struct {
	Prtry  bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Prtry"`
	ClntNm PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ClntNm,omitempty"`
}

// May be one of CASH, SECU, LCRE, OTHR
type CollateralType1Code string

type CollateralValuation5 struct {
	CollId       Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollId,omitempty"`
	CollTp       CollateralType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollTp"`
	SttlmSts     SettlementStatus2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SttlmSts"`
	NbOfDaysAcrd float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 NbOfDaysAcrd"`
	ValtnAmts    CollateralAmount1              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValtnAmts"`
	DayCntBsis   InterestComputationMethod2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 DayCntBsis"`
	XchgRate     float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XchgRate,omitempty"`
	CcyHrcut     float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CcyHrcut,omitempty"`
	AdjstdRate   float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AdjstdRate,omitempty"`
	SctiesColl   SecuritiesCollateral6          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SctiesColl,omitempty"`
	CshColl      CashCollateral4                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CshColl,omitempty"`
	OthrColl     OtherCollateral6               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 OthrColl,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 DtTm"`
}

type DateCode9Choice struct {
	Cd    DateType2Code           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Prtry"`
}

type DateFormat14Choice struct {
	Dt   ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Dt"`
	DtCd DateCode9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 DtCd"`
}

// May be one of OPEN
type DateType2Code string

// May be one of FITE, CALL
type DepositType1Code string

type Document struct {
	CollAndXpsrRpt CollateralAndExposureReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollAndXpsrRpt"`
}

// May be one of DAIL, INDA, ONDE
type EventFrequency6Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of CCIR, COMM, CRDS, CRPR, CRSP, CRTL, EQPT, EQUS, EXPT, EXTD, FIXI, FORW, FORX, FUTR, LIQU, OPTN, OTCD, PAYM, REPO, SBSC, SCIE, SCIR, SCRP, SLEB, SLOA, SWPT, TRCP, BFWD, RVPO, TBAS
type ExposureType1Code string

// May be one of BFWD, PAYM, CCPC, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQUI, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, REPO, RVPO, SLOA, SBSC, SCRP, SLEB, SHSL, SCIR, SCIE, SWPT, TBAS, TRBD, TRCP
type ExposureType5Code string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AmtsdVal"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Prtry"`
}

// May be one of A001, A002, A003, A004, A005, A006, A007, A008, A009, A010, A011, A012, A013, A014, NARR
type InterestComputationMethod2Code string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress6 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Nm"`
	Adr PostalAddress2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Adr"`
}

type Obligation4 struct {
	PtyA       PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PtyA"`
	SvcgPtyA   PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SvcgPtyA,omitempty"`
	PtyB       PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PtyB"`
	SvcgPtyB   PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SvcgPtyB,omitempty"`
	CollAcctId CollateralAccount2           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollAcctId,omitempty"`
	XpsrTp     ExposureType5Code            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XpsrTp,omitempty"`
	ValtnDt    DateAndDateTimeChoice        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValtnDt"`
}

type OtherCollateral6 struct {
	AsstNb       Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AsstNb,omitempty"`
	LttrOfCdtId  Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 LttrOfCdtId,omitempty"`
	LttrOfCdtAmt ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 LttrOfCdtAmt,omitempty"`
	GrntAmt      ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 GrntAmt,omitempty"`
	OthrTpOfColl OtherTypeOfCollateral2             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 OthrTpOfColl,omitempty"`
	CollOwnrsh   CollateralOwnership2               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollOwnrsh,omitempty"`
	IsseDt       DateFormat14Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 IsseDt,omitempty"`
	XpryDt       DateFormat14Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XpryDt,omitempty"`
	LtdCvrgInd   bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 LtdCvrgInd,omitempty"`
	Issr         PartyIdentification100Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Issr,omitempty"`
	BlckdQty     FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 BlckdQty,omitempty"`
	ValDt        ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValDt,omitempty"`
	XchgRate     float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XchgRate,omitempty"`
	MktVal       ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MktVal,omitempty"`
	Hrcut        float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Hrcut,omitempty"`
	CollVal      ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollVal"`
	SfkpgPlc     SafekeepingPlaceFormat10Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgPlc,omitempty"`
	SfkpgAcct    SecuritiesAccount19                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgAcct,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp"`
}

type OtherTypeOfCollateral2 struct {
	Desc Max140Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Desc"`
	Qty  FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Qty,omitempty"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 LastPgInd"`
}

type PartyIdentification100Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PrtryId"`
	NmAndAdr NameAndAddress6         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 NmAndAdr"`
}

type PostalAddress2 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PstCdId"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Ctry"`
}

type Price2 struct {
	Tp  YieldedOrValueType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp"`
	Val PriceRateOrAmountChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Val"`
}

type PriceRateOrAmountChoice struct {
	Rate float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Rate"`
	Amt  ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Amt"`
}

// May be one of DISC, PREM, PARV
type PriceValueType1Code string

type ReportParameters5 struct {
	RptId      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptId"`
	RptDtAndTm DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptDtAndTm"`
	Frqcy      EventFrequency6Code   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Frqcy"`
	RptCcy     ActiveCurrencyCode    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RptCcy"`
	ClctnDt    ISODateTime           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ClctnDt,omitempty"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat10Choice struct {
	Id      SafekeepingPlaceTypeAndText8             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TpAndId"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
}

type SafekeepingPlaceTypeAndText8 struct {
	SfkpgPlcTp SafekeepingPlace3Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Nm,omitempty"`
}

type SecuritiesCollateral6 struct {
	AsstNb     Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AsstNb,omitempty"`
	SctyId     SecurityIdentification19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SctyId"`
	MtrtyDt    DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MtrtyDt,omitempty"`
	CollOwnrsh CollateralOwnership2               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollOwnrsh,omitempty"`
	LtdCvrgInd bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 LtdCvrgInd,omitempty"`
	Qty        FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Qty"`
	BlckdQty   FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 BlckdQty,omitempty"`
	Pric       Price2                             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Pric,omitempty"`
	MktVal     ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MktVal,omitempty"`
	Hrcut      float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Hrcut,omitempty"`
	CollVal    ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollVal,omitempty"`
	ValDt      ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValDt,omitempty"`
	SfkpgAcct  SecuritiesAccount19                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgAcct,omitempty"`
	SfkpgPlc   SafekeepingPlaceFormat10Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SfkpgPlc"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Desc,omitempty"`
}

// May be one of AAUT, ASTL, STCR, STLD, ACCF, ARCF
type SettlementStatus2Code string

// May be one of SHOR, LONG
type ShortLong1Code string

type Summary1 struct {
	XpsdAmtPtyA     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XpsdAmtPtyA,omitempty"`
	XpsdAmtPtyB     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XpsdAmtPtyB,omitempty"`
	XpsrTp          ExposureType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 XpsrTp"`
	TtlValOfColl    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TtlValOfColl"`
	NetXcssDfcit    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 NetXcssDfcit,omitempty"`
	NetXcssDfcitInd ShortLong1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 NetXcssDfcitInd,omitempty"`
	ValtnDtTm       ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValtnDtTm"`
	ReqdSttlmDt     ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ReqdSttlmDt,omitempty"`
	SummryDtls      SummaryAmounts1         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 SummryDtls,omitempty"`
}

type SummaryAmounts1 struct {
	ThrshldAmt       ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ThrshldAmt,omitempty"`
	ThrshldTp        ThresholdType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ThrshldTp,omitempty"`
	PreHrcutCollVal  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PreHrcutCollVal,omitempty"`
	AdjstdXpsr       ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 AdjstdXpsr,omitempty"`
	CollReqrd        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 CollReqrd,omitempty"`
	MinTrfAmt        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 MinTrfAmt,omitempty"`
	RndgAmt          ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 RndgAmt,omitempty"`
	PrvsXpsrVal      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PrvsXpsrVal,omitempty"`
	PrvsCollVal      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PrvsCollVal,omitempty"`
	TtlPdgIncmgColl  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TtlPdgIncmgColl,omitempty"`
	TtlPdgOutgngColl ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TtlPdgOutgngColl,omitempty"`
	TtlAcrdIntrstAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TtlAcrdIntrstAmt,omitempty"`
	TtlFees          ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 TtlFees,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of SECU, UNSE
type ThresholdType1Code string

type YieldedOrValueType1Choice struct {
	Yldd  bool                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 Yldd"`
	ValTp PriceValueType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.016.001.03 ValTp"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
