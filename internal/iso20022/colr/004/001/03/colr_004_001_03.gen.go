// Code generated by main. DO NOT EDIT.

package colr_004_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AggregatedIndependentAmount1 struct {
	Trad      IndependentAmount1   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Trad,omitempty"`
	ValAtRsk  IndependentAmount1   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 ValAtRsk,omitempty"`
	NetOpnPos IndependentAmount1   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 NetOpnPos,omitempty"`
	OthrAmt   []IndependentAmount2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 OthrAmt,omitempty"`
}

type AgreedAmount1 struct {
	VartnMrgnAmt    Amount1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 VartnMrgnAmt"`
	SgrtdIndpdntAmt Amount1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmt,omitempty"`
}

type AgreedAmount1Choice struct {
	AgrdAmtDtls     AgreedAmount1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrdAmtDtls"`
	SgrtdIndpdntAmt Amount1       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmt"`
}

type Agreement2 struct {
	AgrmtDtls  Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrmtDtls"`
	AgrmtId    Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrmtId,omitempty"`
	AgrmtDt    ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrmtDt"`
	BaseCcy    CurrencyCode              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 BaseCcy"`
	AgrmtFrmwk AgreementFramework1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrmtFrmwk,omitempty"`
}

type AgreementFramework1Choice struct {
	AgrmtFrmwk AgreementFramework1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrmtFrmwk"`
	PrtryId    GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PrtryId"`
}

// May be one of FBAA, BBAA, DERV, ISDA, NONR
type AgreementFramework1Code string

type Amount1 struct {
	AgrdAmt       ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrdAmt"`
	MrgnCallReqId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnCallReqId"`
	AddtlInf      Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AddtlInf,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type Collateral1 struct {
	VartnMrgn       MarginCollateral1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 VartnMrgn"`
	SgrtdIndpdntAmt MarginCollateral1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmt,omitempty"`
}

type CollateralAccount1 struct {
	Id Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Id"`
	Tp CollateralAccountIdentificationType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Tp,omitempty"`
	Nm Max70Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Nm,omitempty"`
}

type CollateralAccountIdentificationType1Choice struct {
	Tp    CollateralAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Tp,omitempty"`
	Prtry GenericIdentification29    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Prtry"`
}

// May be one of HOUS, CLIE, LIPR, MGIN, DFLT
type CollateralAccountType1Code string

type CollateralBalance1Choice struct {
	TtlColl         ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 TtlColl"`
	CollDtls        Collateral1             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 CollDtls"`
	SgrtdIndpdntAmt MarginCollateral1       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmt"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 DtTm"`
}

type Document struct {
	MrgnCallRspn MarginCallResponseV03 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnCallRspn"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of GROS, NET1
type ExposureConventionType1Code string

// May be one of BFWD, PAYM, CCPC, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQUI, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, REPO, RVPO, SLOA, SBSC, SCRP, SLEB, SHSL, SCIR, SCIE, SWPT, TBAS, TRBD, TRCP
type ExposureType5Code string

type GenericIdentification29 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SchmeNm,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IndependentAmount1 struct {
	Amt    ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Amt"`
	Cnvntn IndependentAmountConventionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Cnvntn"`
}

type IndependentAmount2 struct {
	Desc   Max140Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Desc,omitempty"`
	Amt    ActiveCurrencyAndAmount              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Amt"`
	Cnvntn IndependentAmountConventionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Cnvntn"`
}

// May be one of NBTR, NATR, SEGR
type IndependentAmountConventionType1Code string

type Margin1 struct {
	VartnMrgn           VariationMargin1                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 VartnMrgn"`
	SgrtdIndpdntAmtMrgn SegregatedIndependentAmountMargin1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmtMrgn,omitempty"`
}

type MarginCall1 struct {
	XpsdAmtPtyA    ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 XpsdAmtPtyA,omitempty"`
	XpsdAmtPtyB    ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 XpsdAmtPtyB,omitempty"`
	XpsrCnvntn     ExposureConventionType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 XpsrCnvntn,omitempty"`
	IndpdntAmtPtyA AggregatedIndependentAmount1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 IndpdntAmtPtyA,omitempty"`
	IndpdntAmtPtyB AggregatedIndependentAmount1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 IndpdntAmtPtyB,omitempty"`
	MrgnTerms      MarginTerms1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnTerms,omitempty"`
	CollBal        CollateralBalance1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 CollBal,omitempty"`
}

// May be one of NVDA, RANT
type MarginCallResponse1Code string

type MarginCallResponseV03 struct {
	TxId           Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 TxId"`
	Oblgtn         Obligation3          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Oblgtn"`
	Agrmt          Agreement2           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Agrmt,omitempty"`
	MrgnDtlsDueToA MarginCall1          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnDtlsDueToA,omitempty"`
	MrgnDtlsDueToB MarginCall1          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnDtlsDueToB,omitempty"`
	AgrdAmtDueToA  AgreedAmount1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrdAmtDueToA,omitempty"`
	AgrdAmtDueToB  AgreedAmount1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AgrdAmtDueToB,omitempty"`
	RspnDtls       Response1            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RspnDtls,omitempty"`
	SplmtryData    []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SplmtryData,omitempty"`
}

type MarginCollateral1 struct {
	HeldByPtyA    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 HeldByPtyA,omitempty"`
	HeldByPtyB    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 HeldByPtyB,omitempty"`
	PrrAgrdToPtyA ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PrrAgrdToPtyA,omitempty"`
	PrrAgrdToPtyB ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PrrAgrdToPtyB,omitempty"`
	InTrnstToPtyA ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 InTrnstToPtyA,omitempty"`
	InTrnstToPtyB ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 InTrnstToPtyB,omitempty"`
}

type MarginTerms1Choice struct {
	MrgnDtls            Margin1                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MrgnDtls"`
	SgrtdIndpdntAmtMrgn SegregatedIndependentAmountMargin1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SgrtdIndpdntAmtMrgn"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress6 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Nm"`
	Adr PostalAddress2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Adr"`
}

type Obligation3 struct {
	PtyA       PartyIdentification33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PtyA"`
	SvcgPtyA   PartyIdentification33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SvcgPtyA,omitempty"`
	PtyB       PartyIdentification33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PtyB"`
	SvcgPtyB   PartyIdentification33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 SvcgPtyB,omitempty"`
	CollAcctId CollateralAccount1          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 CollAcctId,omitempty"`
	XpsrTp     ExposureType5Code           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 XpsrTp,omitempty"`
	ValtnDt    DateAndDateTimeChoice       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 ValtnDt"`
}

type PartyIdentification33Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 AnyBIC"`
	PrtryId  GenericIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PrtryId"`
	NmAndAdr NameAndAddress6         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 NmAndAdr"`
}

type PostalAddress2 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PstCdId"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Ctry"`
}

type Response1 struct {
	RspnTpDtls []ResponseType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RspnTpDtls"`
	Desc       Max140Text            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Desc,omitempty"`
}

type ResponseType1Choice struct {
	Cd    MarginCallResponse1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Cd"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Prtry"`
}

// May be one of DRDW, DRUP, NONE, CLSR
type RoundingMethod1Code string

type SegregatedIndependentAmountMargin1 struct {
	MinTrfAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MinTrfAmt"`
	RndgAmt   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RndgAmt,omitempty"`
	RndgMtd   RoundingMethod1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RndgMtd,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of SECU, UNSE
type ThresholdType1Code string

type VariationMargin1 struct {
	ThrshldAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 ThrshldAmt"`
	ThrshldTp  ThresholdType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 ThrshldTp,omitempty"`
	MinTrfAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 MinTrfAmt"`
	RndgAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RndgAmt"`
	RndgMtd    RoundingMethod1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.004.001.03 RndgMtd"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
