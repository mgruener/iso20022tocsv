// Code generated by main. DO NOT EDIT.

package cain_002_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AccountIdentification30Choice struct {
	Card   Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Card"`
	MSISDN Max16Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MSISDN"`
	EMail  Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 EMail"`
	IBAN   IBANIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 IBAN"`
	BBAN   BBANIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BBAN"`
	UPIC   UPICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 UPIC"`
	Dmst   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Dmst"`
	Othr   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Othr"`
}

type AcquirerAuthorisationResponse struct {
	Hdr         Header17                       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Hdr"`
	AuthstnRspn AcquirerAuthorisationResponse1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AuthstnRspn"`
	SctyTrlr    ContentInformationType15       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SctyTrlr,omitempty"`
}

type AcquirerAuthorisationResponse1 struct {
	Envt  CardTransactionEnvironment2 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Envt"`
	Cntxt CardTransactionContext3     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Cntxt,omitempty"`
	Tx    CardTransaction4            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tx,omitempty"`
}

type Action4 struct {
	ActnTp    ActionType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ActnTp"`
	MsgToPres ActionMessage2  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MsgToPres,omitempty"`
}

type ActionMessage2 struct {
	MsgDstn      UserInterface4Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MsgDstn"`
	Frmt         OutputFormat1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Frmt,omitempty"`
	MsgCntt      Max20000Text       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MsgCntt"`
	MsgCnttSgntr Max140Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MsgCnttSgntr,omitempty"`
}

type ActionMessage3 struct {
	Dstn UserInterface3Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Dstn"`
	Frmt OutputFormat1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Frmt,omitempty"`
	Cntt Max20000Text       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Cntt"`
}

// May be one of BUSY, CPTR, DISP, NOVR, RQID, PINL, PINR, PRNT, RFRL, RQDT, TRCK
type ActionType5Code string

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5
type Algorithm12Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1, EA9C, EA5C
type Algorithm13Code string

// May be one of EA2C, E3DC, EA9C, EA5C
type Algorithm15Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

type AlgorithmIdentification11 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Algo"`
	Param Parameter4     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Param,omitempty"`
}

type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Param,omitempty"`
}

type AlgorithmIdentification13 struct {
	Algo  Algorithm13Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Param,omitempty"`
}

type AlgorithmIdentification14 struct {
	Algo  Algorithm15Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Algo"`
	Param Parameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Param,omitempty"`
}

type AlgorithmIdentification15 struct {
	Algo  Algorithm12Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Param,omitempty"`
}

type AmountAndDirection41 struct {
	Amt CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Amt"`
	Sgn bool              `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Sgn,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData4 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Vrsn,omitempty"`
	Rcpt        []Recipient4Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Rcpt"`
	MACAlgo     AlgorithmIdentification15 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MAC"`
}

// May be one of ICCD, AGNT, MERC, ACQR, ISSR, TRML
type AuthenticationEntity2Code string

// May be one of NPIN, PPSG, PSWD, SCRT, SCNL, SNCT, CPSG, ADDB, BIOM, CDHI, CRYP, CSCV, PSVE, CSEC, ADDS, MANU, FPIN, TOKP
type AuthenticationMethod6Code string

type AuthorisationResult8 struct {
	AuthstnNtty GenericIdentification75 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AuthstnNtty,omitempty"`
	TxRspn      ResponseType2           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxRspn"`
	Actn        []Action4               `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Actn,omitempty"`
	AuthstnCd   Min6Max8Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AuthstnCd,omitempty"`
	AddtlInf    []ActionMessage3        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlInf,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

type CardAccount2 struct {
	SelctdAcctTp CardAccountType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SelctdAcctTp,omitempty"`
	AcctNm       Max70Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcctNm,omitempty"`
	AcctOwnr     NameAndAddress3               `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcctOwnr,omitempty"`
	Ccy          ActiveCurrencyCode            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ccy,omitempty"`
	AcctIdr      AccountIdentification30Choice `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcctIdr,omitempty"`
	Svcr         PartyIdentification72Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Svcr,omitempty"`
	Bal          AmountAndDirection41          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Bal,omitempty"`
	BalDt        ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BalDt,omitempty"`
}

// May be one of CTDP, CHCK, CRDT, CURR, CDBT, DFLT, EPRS, HEQL, ISTL, INVS, LCDT, MBNW, MNMK, MNMC, MTGL, RTRM, RVLV, SVNG, STBD, UVRL
type CardAccountType2Code string

// May be one of BALC, CACT, CRDP, CAFT, CAFL, CAFH, CAVR, CSHW, CSHD, CHWD, DEFR, LOAD, ORCR, PINC, PINU, QUCH, RFND, RESA, UNLD, VALC, DADJ, CADJ
type CardPaymentServiceType7Code string

type CardPaymentToken2 struct {
	TknChrtc     []Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TknChrtc,omitempty"`
	TknAssrncLvl float64     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TknAssrncLvl,omitempty"`
}

// May be one of COMM, CONS
type CardProductType1Code string

type CardTransaction4 struct {
	TxTp              CardPaymentServiceType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxTp"`
	Rcncltn           TransactionIdentifier2      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Rcncltn,omitempty"`
	AccptrTxDtTm      ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AccptrTxDtTm"`
	InitrTxId         Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 InitrTxId"`
	TxLifeCyclId      Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxLifeCyclId,omitempty"`
	TxLifeCyclSeqNb   float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxLifeCyclSeqNb,omitempty"`
	TxLifeCyclSeqCntr float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxLifeCyclSeqCntr,omitempty"`
	CardIssrRefData   Max140Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CardIssrRefData,omitempty"`
	TxDtls            CardTransactionDetail2      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxDtls"`
	AuthstnRslt       AuthorisationResult8        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AuthstnRslt,omitempty"`
}

type CardTransactionAmount2 struct {
	TtlAmt           CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TtlAmt"`
	CrdhldrBllgTxAmt DetailedAmount8   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CrdhldrBllgTxAmt,omitempty"`
	DtldAmt          []DetailedAmount9 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 DtldAmt,omitempty"`
}

type CardTransactionCondition1 struct {
	Prgm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Prgm"`
	Val  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Val,omitempty"`
}

type CardTransactionContext3 struct {
	TxCntxt CardTransactionContext4 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxCntxt"`
}

type CardTransactionContext4 struct {
	SpclConds []CardTransactionCondition1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SpclConds,omitempty"`
}

type CardTransactionDetail2 struct {
	TxAmts       CardTransactionAmount2           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxAmts"`
	AddtlAmts    []DetailedAmount10               `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlAmts,omitempty"`
	AcctAndBal   []CardAccount2                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcctAndBal,omitempty"`
	TxVrfctnRslt []TransactionVerificationResult4 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TxVrfctnRslt,omitempty"`
	VldtyDt      ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 VldtyDt,omitempty"`
	ICCRltdData  Max10000Binary                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ICCRltdData,omitempty"`
}

type CardTransactionEnvironment2 struct {
	AcqrrId     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcqrrId"`
	CardSchmeId Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CardSchmeId,omitempty"`
	AccptrId    Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AccptrId,omitempty"`
	TermnlId    Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TermnlId,omitempty"`
	Card        PaymentCard13     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Card"`
	PmtTkn      CardPaymentToken2 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PmtTkn,omitempty"`
	ShppgAdr    PostalAddress18   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ShppgAdr,omitempty"`
}

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RltvDstngshdNm"`
}

type ContentInformationType10 struct {
	CnttTp     ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CnttTp"`
	EnvlpdData EnvelopedData4   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 EnvlpdData"`
}

type ContentInformationType15 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CnttTp"`
	AuthntcdData AuthenticatedData4 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AuthntcdData"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrencyAndAmount struct {
	Value float64      `xml:",chardata"`
	Ccy   CurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type DetailedAmount10 struct {
	Tp      TypeOfAmount6Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tp"`
	AddtlTp Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlTp,omitempty"`
	Amt     CurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Amt"`
	Labl    Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Labl,omitempty"`
}

type DetailedAmount8 struct {
	Amt      float64     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Amt"`
	XchgRate float64     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 XchgRate"`
	QtnDt    ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 QtnDt,omitempty"`
	Labl     Max140Text  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Labl,omitempty"`
}

type DetailedAmount9 struct {
	Tp      TypeOfAmount5Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tp"`
	AddtlTp Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlTp,omitempty"`
	Amt     float64           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Amt"`
	Labl    Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Labl,omitempty"`
}

type Document struct {
	AcqrrAuthstnRspn AcquirerAuthorisationResponse `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AcqrrAuthstnRspn"`
}

type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Cntt,omitempty"`
}

type EncryptedContent3 struct {
	CnttTp         ContentType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CnttNcrptnAlgo"`
	NcrptdData     Max100KBinary             `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptdData"`
}

// May be one of TR31, TR34
type EncryptionFormat1Code string

type EnvelopedData4 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Vrsn,omitempty"`
	Rcpt       []Recipient4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Rcpt"`
	NcrptdCntt EncryptedContent3  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptdCntt,omitempty"`
}

// Must match the pattern [0-9]
type Exact1NumericText string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Issr,omitempty"`
}

type GenericIdentification73 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Id"`
	Tp     PartyType9Code    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tp,omitempty"`
	Issr   PartyType9Code    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ShrtNm,omitempty"`
}

type GenericIdentification74 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Id"`
	Tp     PartyType10Code   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tp"`
	Issr   PartyType10Code   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ShrtNm,omitempty"`
}

type GenericIdentification75 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Id,omitempty"`
	Tp     PartyType11Code   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tp"`
	Issr   PartyType9Code    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ShrtNm,omitempty"`
}

type Header17 struct {
	MsgFctn        MessageFunction6Code    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MsgFctn"`
	PrtcolVrsn     Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PrtcolVrsn"`
	XchgId         Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 XchgId"`
	ReTrnsmssnCntr Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 ReTrnsmssnCntr,omitempty"`
	CreDtTm        ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CreDtTm"`
	InitgPty       GenericIdentification73 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 InitgPty"`
	RcptPty        GenericIdentification73 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RcptPty,omitempty"`
	Tracblt        []Traceability3         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Tracblt,omitempty"`
}

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SrlNb"`
}

type KEK4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptdKey"`
}

type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 DerivtnId,omitempty"`
}

type KeyTransport4 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Vrsn,omitempty"`
	RcptId        Recipient5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification11 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptdKey"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max10Text string

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max20000Text string

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// May be one of RCAV, RCAN, RCAQ, REJA, REVV, REVN, REVQ, RCPV, RCPN, RCPQ, REJP, AUTV, AUTN, AUTQ, AUTP, FNCV, FNCN, FNCQ, RCIV, RCIN, RCIQ, REJI, KEYV, KEYQ, MGTV, MGTQ
type MessageFunction6Code string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

// Must match the pattern [0-9]{2,3}
type Min2Max3NumericText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 6 items long
type Min6Max8Text string

// Must match the pattern [0-9]{8,28}
type Min8Max28NumericText string

type NameAndAddress3 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Adr"`
}

// May be one of MREF, TEXT, HTML
type OutputFormat1Code string

type Parameter4 struct {
	NcrptnFrmt   EncryptionFormat1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm11Code           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MskGnrtrAlgo,omitempty"`
}

type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 DgstAlgo,omitempty"`
}

type Parameter6 struct {
	NcrptnFrmt   EncryptionFormat1Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BPddg,omitempty"`
}

type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BPddg,omitempty"`
}

type PartyIdentification72Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PrtryId"`
}

// May be one of ACCP, ACQR, ATMG, CISS, DLIS, HSTG, ITAG, MERC, OATM, OPOI
type PartyType10Code string

// May be one of ACCP, ACQR, CISS, DLIS, ITAG, OTRM, ICCA
type PartyType11Code string

// May be one of ACQR, ACQP, CISS, CISP, CSCH, SCHP
type PartyType9Code string

type PaymentCard13 struct {
	PrtctdCardData ContentInformationType10 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PrtctdCardData,omitempty"`
	PlainCardData  PlainCardData9           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PlainCardData,omitempty"`
	MskdPAN        string                   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 MskdPAN,omitempty"`
	CardPdctTp     CardProductType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CardPdctTp,omitempty"`
	CardPdctNm     Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CardPdctNm,omitempty"`
}

type PlainCardData9 struct {
	PAN       Min8Max28NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PAN"`
	CardSeqNb Min2Max3NumericText  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CardSeqNb,omitempty"`
	FctvDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 FctvDt,omitempty"`
	XpryDt    Max10Text            `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 XpryDt"`
	SvcCd     Exact3NumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 SvcCd,omitempty"`
	TrckData  []TrackData1         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TrckData,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ctry"`
}

type PostalAddress18 struct {
	AdrLine     []Max70Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 BldgNb,omitempty"`
	PstCd       Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 PstCd,omitempty"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TwnNm"`
	CtrySubDvsn []Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Ctry"`
}

type Recipient4Choice struct {
	KeyTrnsprt KeyTransport4  `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyTrnsprt"`
	KEK        KEK4           `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KEK"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyIdr"`
}

type Recipient5Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 IssrAndSrlNb"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 KeyIdr"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AttrVal"`
}

// May be one of APPR, DECL, FRTH, PART, PRCS, UNPR
type Response3Code string

type ResponseType2 struct {
	Rslt         Response3Code     `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Rslt"`
	RsltDtls     ResultDetail1Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RsltDtls,omitempty"`
	AddtlRsltInf Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlRsltInf,omitempty"`
}

// May be one of ACTF, ACQS, AMLV, AMTA, BANK, CRDR, CRDF, CSHI, CSHE, ACTC, CTVG, DBER, FEES, TXNL, CRDX, FMTR, ACEF, TXNG, FNDI, ACPI, AMTI, CHDI, CRDI, CTFV, NPRA, PINA, LBLU, CRDA, PINN, MACK, MACR, CRDL, LBLA, ISSU, ISST, ISSO, ISSF, ISSP, DATI, TXNV, TKID, TKKO, CSCV, PINV, AMTO, NPRC, OFFL, ONLP, TXNM, OTHR, BALO, SEQO, AMTL, NMBL, PINC, PIND, PINE, PINS, PINX, QMAX, RECD, CRDT, SECV, SFWE, SPCC, CRDW, NMBW, AMTW, VNDF, VNDR, SVSU, CRDU, CMKY, UNBC, UNBP, UNBO, ORGF, TXND, TXNU, TTLV, ACTT, SYSM, SYSP, FRDS, CNTC, SRCH, CRDS, ACKO
type ResultDetail1Code string

type Traceability3 struct {
	RlayId      GenericIdentification74 `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RlayId"`
	TracDtTmIn  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TracDtTmIn"`
	TracDtTmOut ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TracDtTmOut"`
}

type TrackData1 struct {
	TrckNb  Exact1NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TrckNb,omitempty"`
	TrckVal Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 TrckVal"`
}

type TransactionIdentifier2 struct {
	RcncltnDt ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RcncltnDt"`
	RcncltnId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 RcncltnId,omitempty"`
}

type TransactionVerificationResult4 struct {
	Mtd        AuthenticationMethod6Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Mtd"`
	VrfctnNtty AuthenticationEntity2Code `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 VrfctnNtty,omitempty"`
	Rslt       Verification1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 Rslt,omitempty"`
	AddtlRslt  Max500Text                `xml:"urn:iso:std:iso:20022:tech:xsd:cain.002.001.01 AddtlRslt,omitempty"`
}

// May be one of CSHB, DCNT, FEES, GRTY, SRCH, VATX, COMM, DONN, TAXT
type TypeOfAmount5Code string

// May be one of ATMF, AMTH, CRDB, DCNT, FEES, AMTX, AMTN, AMTQ, SRCH, VATX, COMI, FEEI
type TypeOfAmount6Code string

// Must match the pattern [0-9]{8,17}
type UPICIdentifier string

// May be one of ACQU, AGNT, ISSR
type UserInterface3Code string

// May be one of CDSP, CRCP, MDSP, MRCP, CRDO
type UserInterface4Code string

// May be one of FAIL, MISS, NOVF, PART, SUCC, ERRR
type Verification1Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
