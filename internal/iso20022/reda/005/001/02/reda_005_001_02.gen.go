// Code generated by main. DO NOT EDIT.

package reda_005_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification3 struct {
	Id         Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	InvstmtFndRptReq InvestmentFundReportRequestV02 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 InvstmtFndRptReq"`
}

type FinancialInstrument17 struct {
	Id          SecurityIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Id"`
	Nm          Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Nm,omitempty"`
	SplmtryId   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 SplmtryId,omitempty"`
	ClssTp      Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 DstrbtnPlcy,omitempty"`
	PdctGrp     Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 PdctGrp,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type FundParameters3Choice struct {
	NoCrit NoCriteria1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 NoCrit"`
	Params FundParameters4 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Params"`
}

type FundParameters4 struct {
	FinInstrmDtls   []FinancialInstrument17      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 FinInstrmDtls,omitempty"`
	FndMgmtCpny     []PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 FndMgmtCpny,omitempty"`
	DtFr            ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 DtFr,omitempty"`
	CtryOfDmcl      CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 CtryOfDmcl,omitempty"`
	RegdDstrbtnCtry CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 RegdDstrbtnCtry,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InvestmentFundReportRequestV02 struct {
	MsgId   MessageIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 MsgId"`
	PrvsRef AdditionalReference3    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 PrvsRef,omitempty"`
	RltdRef AdditionalReference3    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 RltdRef,omitempty"`
	FPPRpt  []FundParameters3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 FPPRpt"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Adr,omitempty"`
}

// May be one of NOCR
type NoCriteria1Code string

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Ctry"`
}

type SecurityIdentification7 struct {
	ISIN   ISINIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 ISIN"`
	OthrId AlternateSecurityIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 OthrId"`
	Desc   Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.005.001.02 Desc,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
