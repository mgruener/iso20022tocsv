// Code generated by main. DO NOT EDIT.

package reda_004_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification5Choice struct {
	IBAN       IBANIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 IBAN"`
	BBAN       BBANIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 BBAN"`
	DmstAcct   Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DmstAcct"`
	DpstryAcct Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DpstryAcct"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification3 struct {
	Id         Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PrtryIdSrc"`
}

// Must match the pattern [a-zA-Z0-9]{1,30}
type BBANIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICIdentifier string

// May be one of FWNG, PREC
type BusinessDayConvention1Code string

type CashAccount21 struct {
	Svcr BICIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Svcr,omitempty"`
	Id   AccountIdentification5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id"`
}

type CashAccount22 struct {
	Ccy        CurrencyCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Ccy,omitempty"`
	Svcr       BICIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Svcr"`
	Id         AccountIdentification5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id"`
	ScndryAcct CashAccount21                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ScndryAcct,omitempty"`
	AcctTpDesc Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 AcctTpDesc"`
}

type ContactAttributes1 struct {
	Nm       Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Nm"`
	PstlAdr  PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PstlAdr"`
	PhneNb   PhoneNumber    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PhneNb"`
	FaxNb    PhoneNumber    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FaxNb,omitempty"`
	EmailAdr Max256Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 EmailAdr,omitempty"`
	URLAdr   Max2048Text    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 URLAdr,omitempty"`
	Id       BICIdentifier  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

// May be one of CASH, UNIT, BOTH
type DividendPolicy1Code string

type Document struct {
	FndPrcgPsptRpt FundProcessingPassportReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FndPrcgPsptRpt"`
}

// May be one of EUSI, EUSO, VARI
type EUSavingsDirective1Code string

// May be one of YEAR, SEMI, QUTR, MNTH, WEEK, DAIL, CLOS, TOMN, TOWK, TWMN
type EventFrequency5Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Txt"`
}

type FinancialInstrument20 struct {
	PhysBrScties      bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PhysBrScties"`
	DmtrlsdBrScties   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DmtrlsdBrScties"`
	PhysRegdScties    bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PhysRegdScties"`
	DmtrlsdRegdScties bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DmtrlsdRegdScties"`
	DstrbtnPlcy       DistributionPolicy1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DstrbtnPlcy"`
	DvddPlcy          DividendPolicy1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DvddPlcy,omitempty"`
	DvddFrqcy         EventFrequency5Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DvddFrqcy,omitempty"`
	RinvstmtFrqcy     EventFrequency5Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RinvstmtFrqcy,omitempty"`
	FrntEndLd         bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FrntEndLd"`
	BckEndLd          bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 BckEndLd"`
	SwtchFee          bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SwtchFee"`
	EUSvgsDrctv       EUSavingsDirective1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 EUSvgsDrctv"`
}

type Forms struct {
	ApplForm bool               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ApplForm"`
	SgntrTp  SignatureType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SgntrTp"`
}

type FundProcessingPassport1 struct {
	UpdtdDt          UpdatedDate                                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 UpdtdDt"`
	SctyId           SecurityIdentification1                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SctyId"`
	MainFndOrdrDsk   ContactAttributes1                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MainFndOrdrDsk"`
	FndMgmtCpny      ContactAttributes1                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FndMgmtCpny"`
	FndDtls          FinancialInstrument20                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FndDtls"`
	ValtnDealgChrtcs ValuationDealingProcessingCharacteristics2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ValtnDealgChrtcs"`
	InvstmtRstrctns  InvestmentRestrictions2                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 InvstmtRstrctns"`
	SbcptPrcgChrtcs  ProcessingCharacteristics2                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SbcptPrcgChrtcs"`
	RedPrcgChrtcs    ProcessingCharacteristics3                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RedPrcgChrtcs"`
	SttlmDtls        []CashAccount22                            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SttlmDtls"`
	LclMktAnx        []LocalMarketAnnex2                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 LclMktAnx,omitempty"`
	Xtnsn            []Extension1                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Xtnsn,omitempty"`
}

type FundProcessingPassportReportV02 struct {
	MsgId MessageIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MsgId"`
	FPP   []FundProcessingPassport1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 FPP"`
}

// May be one of TRAL, TRNA, RFOD
type HoldingTransferable1Code string

// Must match the pattern [a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBANIdentifier string

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type InvestmentRestrictions2 struct {
	MinInitlSbcptAmt    ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinInitlSbcptAmt,omitempty"`
	MinInitlSbcptUnits  float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinInitlSbcptUnits,omitempty"`
	MinSbsqntSbcptAmt   ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinSbsqntSbcptAmt,omitempty"`
	MinSbsqntSbcptUnits float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinSbsqntSbcptUnits,omitempty"`
	MaxRedAmt           ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MaxRedAmt,omitempty"`
	MaxRedUnits         float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MaxRedUnits,omitempty"`
	OthrRedRstrctns     Max350Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 OthrRedRstrctns,omitempty"`
	MinHldgAmt          ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinHldgAmt,omitempty"`
	MinHldgUnits        float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinHldgUnits,omitempty"`
	MinHldgPrd          Max70Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MinHldgPrd,omitempty"`
	HldgTrfbl           HoldingTransferable1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 HldgTrfbl"`
}

type LocalMarketAnnex2 struct {
	Ctry            []CountryCode              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Ctry"`
	LclOrdrDsk      ContactAttributes1         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 LclOrdrDsk"`
	SbcptPrcgChrtcs ProcessingCharacteristics2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SbcptPrcgChrtcs"`
	RedPrcgChrtcs   ProcessingCharacteristics3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RedPrcgChrtcs"`
	SttlmDtls       []CashAccount22            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SttlmDtls"`
}

type MainFundOrderDeskLocation1 struct {
	Ctry         CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Ctry"`
	TmZoneOffSet UTCOffset1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 TmZoneOffSet"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 CreDtTm"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type ProcessingCharacteristics2 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCcyAccptd"`
	InitlInvstmt       Forms                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 InitlInvstmt"`
	SbsqntInvstmt      Forms                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SbsqntInvstmt"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 AmtInd"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 UnitsInd"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MainFndOrdrDskLctn"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCutOffTm"`
	DealgCutOffTmFrame TimeFrame3                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCutOffTmFrame"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgFrqcy"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgFrqcyDesc"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SttlmCycl"`
}

type ProcessingCharacteristics3 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCcyAccptd"`
	RedAuthstn         Forms                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RedAuthstn"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 AmtInd"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 UnitsInd"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 MainFndOrdrDskLctn"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCutOffTm"`
	DealgCutOffTmFrame TimeFrame3                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgCutOffTmFrame"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgFrqcy"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DealgFrqcyDesc"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame4Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 SttlmCycl"`
}

// May be one of RFOD
type ReferToFundOrderDesk1Code string

type SecurityIdentification1 struct {
	Id              SecurityIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Id"`
	Nm              Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Nm"`
	ClssTp          Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ClssTp,omitempty"`
	UmbrllNm        Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 UmbrllNm,omitempty"`
	BaseCcy         ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 BaseCcy"`
	CtryOfDmcl      CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 CtryOfDmcl"`
	RegdDstrbtnCtry []CountryCode           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RegdDstrbtnCtry"`
}

type SecurityIdentification7 struct {
	ISIN   ISINIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ISIN"`
	OthrId AlternateSecurityIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 OthrId"`
	Desc   Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Desc,omitempty"`
}

// May be one of ORIG, DIGI, ELEC, NONE
type SignatureType1Code string

type TimeFrame3 struct {
	OthrTmFrameDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 OthrTmFrameDesc,omitempty"`
	TMns                float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 TMns,omitempty"`
	NonWorkgDayAdjstmnt BusinessDayConvention1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 NonWorkgDayAdjstmnt,omitempty"`
	RefrToOrdrDsk       ReferToFundOrderDesk1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RefrToOrdrDsk,omitempty"`
}

type TimeFrame4Choice struct {
	TPlus float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 TPlus"`
	RPlus float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 RPlus"`
}

type TimeFrame5Choice struct {
	TPlus  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 TPlus"`
	Prepmt bool    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Prepmt"`
}

type UTCOffset1 struct {
	Sgn     bool    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Sgn"`
	NbOfHrs ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 NbOfHrs"`
}

type UpdatedDate struct {
	Dt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 Dt"`
}

type ValuationDealingProcessingCharacteristics2 struct {
	ValtnFrqcy     EventFrequency5Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ValtnFrqcy"`
	ValtnFrqcyDesc Max350Text           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 ValtnFrqcyDesc"`
	DcmlstnUnits   float64              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DcmlstnUnits"`
	DcmlstnPric    float64              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DcmlstnPric"`
	DualFndInd     bool                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 DualFndInd"`
	PricMtd        PriceMethod1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PricMtd"`
	PricCcy        []ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.02 PricCcy"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
