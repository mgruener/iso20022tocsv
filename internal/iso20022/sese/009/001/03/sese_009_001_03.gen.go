// Code generated by main. DO NOT EDIT.

package sese_009_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account7 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Id"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AcctSvcr,omitempty"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Prtry"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of NCER, ELEC, PHYS
type BeneficiaryCertificationCompletion1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	ReqForTrfStsRpt RequestForTransferStatusReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 ReqForTrfStsRpt"`
}

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Txt"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type Intermediary11 struct {
	Id         PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Id"`
	Acct       Account7                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Acct,omitempty"`
	Role       InvestmentFundRole2Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Role,omitempty"`
	XtndedRole Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 XtndedRole,omitempty"`
}

type InvestmentAccount22 struct {
	OwnrId               []PartyIdentification2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 OwnrId,omitempty"`
	AcctId               AccountIdentification1                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AcctId"`
	AcctNm               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AcctNm,omitempty"`
	AcctDsgnt            Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AcctDsgnt,omitempty"`
	IntrmyInf            []Intermediary11                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 IntrmyInf,omitempty"`
	SctiesForm           FormOfSecurity1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 SctiesForm,omitempty"`
	DmtrlsdInd           bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 DmtrlsdInd,omitempty"`
	IncmPref             IncomePreference1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 IncmPref,omitempty"`
	BnfcryCertfctnCmpltn BeneficiaryCertificationCompletion1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 BnfcryCertfctnCmpltn,omitempty"`
	SfkpgPlc             PartyIdentification2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 SfkpgPlc,omitempty"`
	AcctSvcr             PartyIdentification2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AcctSvcr,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageAndBusinessReference6 struct {
	PrvsRef         AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 PrvsRef,omitempty"`
	OthrRef         AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 OthrRef,omitempty"`
	MstrRef         Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 MstrRef,omitempty"`
	TrfRef          Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 TrfRef"`
	ClntRef         Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 ClntRef,omitempty"`
	CxlRef          Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 CxlRef,omitempty"`
	InvstmtAcctDtls InvestmentAccount22  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 InvstmtAcctDtls,omitempty"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Adr,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Ctry"`
}

type RequestForTransferStatusReportV03 struct {
	MsgId   MessageIdentification1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 MsgId"`
	ReqDtls []MessageAndBusinessReference6 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 ReqDtls"`
	Xtnsn   []Extension1                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Xtnsn,omitempty"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.03 Id"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
