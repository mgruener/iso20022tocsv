// Code generated by main. DO NOT EDIT.

package sese_009_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account14 struct {
	Id       AccountIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	AcctSvcr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AcctSvcr,omitempty"`
}

type AccountIdentification1 struct {
	Prtry SimpleIdentificationInformation `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Prtry"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of NCER, ELEC, PHYS
type BeneficiaryCertificationCompletion1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	ReqForTrfStsRpt RequestForTransferStatusReportV04 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 ReqForTrfStsRpt"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Txt"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Issr,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 SchmeNm,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// May be one of CASH, DRIP
type IncomePreference1Code string

type Intermediary25 struct {
	Id   PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	Acct Account14                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Acct,omitempty"`
	Role Role4Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Role,omitempty"`
}

type InvestmentAccount40 struct {
	OwnrId               []PartyIdentification2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 OwnrId,omitempty"`
	AcctId               AccountIdentification1                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AcctId"`
	AcctNm               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AcctNm,omitempty"`
	AcctDsgnt            Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AcctDsgnt,omitempty"`
	IntrmyInf            []Intermediary25                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 IntrmyInf,omitempty"`
	SctiesForm           FormOfSecurity1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 SctiesForm,omitempty"`
	DmtrlsdInd           bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 DmtrlsdInd,omitempty"`
	IncmPref             IncomePreference1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 IncmPref,omitempty"`
	BnfcryCertfctnCmpltn BeneficiaryCertificationCompletion1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 BnfcryCertfctnCmpltn,omitempty"`
	SfkpgPlc             PartyIdentification2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 SfkpgPlc,omitempty"`
	AcctSvcr             PartyIdentification2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AcctSvcr,omitempty"`
	SubAcctDtls          SubAccount1                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 SubAcctDtls,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Nb,omitempty"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageAndBusinessReference7 struct {
	Ref             References39Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Ref,omitempty"`
	MstrRef         Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 MstrRef,omitempty"`
	TrfRef          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 TrfRef"`
	ClntRef         Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 ClntRef,omitempty"`
	CxlRef          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 CxlRef,omitempty"`
	InvstmtAcctDtls InvestmentAccount40 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 InvstmtAcctDtls,omitempty"`
}

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Adr,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 NmAndAdr"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Ctry"`
}

type References39Choice struct {
	PrvsRef AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 PrvsRef"`
	OthrRef AdditionalReference3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 OthrRef"`
}

type RequestForTransferStatusReportV04 struct {
	MsgId        MessageIdentification1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 MsgId"`
	ReqDtls      []MessageAndBusinessReference7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 ReqDtls"`
	MktPrctcVrsn MarketPracticeVersion1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 MktPrctcVrsn,omitempty"`
	Xtnsn        []Extension1                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Xtnsn,omitempty"`
}

type Role4Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Prtry"`
}

type SimpleIdentificationInformation struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
}

type SubAccount1 struct {
	Id    AccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Id"`
	Nm    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Nm,omitempty"`
	Chrtc Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.009.001.04 Chrtc,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
