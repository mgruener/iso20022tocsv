// Code generated by main. DO NOT EDIT.

package sese_002_001_09

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference10 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 MsgNm,omitempty"`
}

type AdditionalReference11 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CopyInformation5 struct {
	CpyInd    bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CpyInd"`
	OrgnlRcvr AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 OrgnlRcvr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	TrfOutCxlReq TransferOutCancellationRequestV09 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 TrfOutCxlReq"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Nb,omitempty"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Adr,omitempty"`
}

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 AnyBIC"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 NmAndAdr"`
}

type PartyIdentification139 struct {
	Pty PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 LEI,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 Ctry"`
}

type TransferOutCancellationRequestV09 struct {
	MsgId        MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 MsgId"`
	PoolRef      AdditionalReference11  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 PoolRef,omitempty"`
	PrvsRef      AdditionalReference10  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 PrvsRef,omitempty"`
	RltdRef      AdditionalReference10  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 RltdRef,omitempty"`
	MstrRef      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 MstrRef,omitempty"`
	TrfRefs      []TransferReference15  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 TrfRefs"`
	MktPrctcVrsn MarketPracticeVersion1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 MktPrctcVrsn,omitempty"`
	CpyDtls      CopyInformation5       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CpyDtls,omitempty"`
}

type TransferReference15 struct {
	TrfRef    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 TrfRef"`
	ClntRef   AdditionalReference10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 ClntRef,omitempty"`
	CtrPtyRef AdditionalReference10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CtrPtyRef,omitempty"`
	CxlRef    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CxlRef,omitempty"`
	CxlRsn    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.002.001.09 CxlRsn,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
