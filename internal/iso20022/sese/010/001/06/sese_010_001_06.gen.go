// Code generated by main. DO NOT EDIT.

package sese_010_001_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference7 struct {
	Ref     Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Ref"`
	RefIssr PartyIdentification97Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 MsgNm,omitempty"`
}

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationCompleteReason1Choice struct {
	Cd    CancelledStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Cd"`
	Prtry GenericIdentification36    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Prtry"`
}

// May be one of CUTO, COSE
type CancellationRejectedReason1Code string

// May be one of STNP, PACK
type CancellationStatus2Code string

type CancellationStatusAndReason4 struct {
	MstrRef  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 MstrRef,omitempty"`
	TrfRef   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 TrfRef"`
	ClntRef  AdditionalReference7   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 ClntRef,omitempty"`
	CxlRef   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 CxlRef,omitempty"`
	Sts      Status21Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Sts"`
	StsInitr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 StsInitr,omitempty"`
}

type CancelledCompleteReason1 struct {
	Rsn         CancellationCompleteReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Rsn"`
	AddtlRsnInf Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AddtlRsnInf,omitempty"`
}

// May be one of CANI, CANS, CSUB
type CancelledStatusReason1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	TrfCxlStsRpt TransferCancellationStatusReportV06 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 TrfCxlStsRpt"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Txt"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Issr,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 SchmeNm,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Nb,omitempty"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Adr,omitempty"`
}

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 LEI,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 NmAndAdr"`
}

type PartyIdentification97Choice struct {
	AnyBIC     AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AnyBIC"`
	LglNttyIdr LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 LglNttyIdr"`
	NmAndAdr   NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 NmAndAdr"`
	PrtryId    GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 PrtryId"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Ctry"`
}

type References61Choice struct {
	RltdRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 RltdRef"`
	OthrRef []AdditionalReference8 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 OthrRef"`
}

type RejectedReason17Choice struct {
	Cd    CancellationRejectedReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Cd"`
	Prtry GenericIdentification36         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Prtry"`
}

type RejectionReason33 struct {
	Rsn         RejectedReason17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Rsn"`
	AddtlRsnInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 AddtlRsnInf,omitempty"`
}

type Status21Choice struct {
	Sts   TransferCancellationStatus2        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Sts"`
	Rjctd RejectionReason33                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Rjctd"`
	Cmplt CancelledCompleteReason1           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Cmplt"`
	Pdg   TransferCancellationPendingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Pdg"`
}

type TransferCancellationPendingStatus1 struct {
	Rsn Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Rsn,omitempty"`
}

type TransferCancellationStatus2 struct {
	Sts CancellationStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Sts"`
	Rsn Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Rsn,omitempty"`
}

type TransferCancellationStatusReportV06 struct {
	MsgId        MessageIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 MsgId"`
	CtrPtyRef    AdditionalReference8         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 CtrPtyRef,omitempty"`
	Ref          References61Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Ref,omitempty"`
	StsRpt       CancellationStatusAndReason4 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 StsRpt"`
	MktPrctcVrsn MarketPracticeVersion1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 MktPrctcVrsn,omitempty"`
	Xtnsn        []Extension1                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.010.001.06 Xtnsn,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
