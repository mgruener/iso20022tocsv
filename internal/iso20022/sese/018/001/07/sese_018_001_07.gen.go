// Code generated by main. DO NOT EDIT.

package sese_018_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account28 struct {
	OwnrId      PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OwnrId,omitempty"`
	AcctId      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcctId,omitempty"`
	Dsgnt       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dsgnt,omitempty"`
	AcctNm      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcctNm,omitempty"`
	Svcr        PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Svcr,omitempty"`
	SubAcctDtls SubAccount5            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SubAcctDtls,omitempty"`
}

type AccountHoldingInformationV07 struct {
	MsgRef           MessageIdentification1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MsgRef"`
	PoolRef          AdditionalReference11          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PoolRef,omitempty"`
	PrvsRef          AdditionalReference10          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrvsRef,omitempty"`
	RltdRef          AdditionalReference10          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RltdRef,omitempty"`
	BizFlowDrctnTp   BusinessFlowDirectionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BizFlowDrctnTp,omitempty"`
	PmryIndvInvstr   IndividualPerson8              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PmryIndvInvstr,omitempty"`
	ScndryIndvInvstr IndividualPerson8              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation36                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation36                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation36               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrCorpInvstr,omitempty"`
	TrfrAcct         InvestmentAccount69            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrfrAcct"`
	NmneeAcct        InvestmentAccount69            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmneeAcct,omitempty"`
	Trfee            PartyIdentification132         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Trfee"`
	PdctTrf          []PortfolioTransfer2           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PdctTrf"`
	MktPrctcVrsn     MarketPracticeVersion1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MktPrctcVrsn,omitempty"`
	Xtnsn            []Extension1                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Xtnsn,omitempty"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalInformation15 struct {
	InfTp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InfTp"`
	InfVal Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InfVal"`
}

type AdditionalReference10 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MsgNm,omitempty"`
}

type AdditionalReference11 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of LIQU, NLIQ
type AllOtherCash1Code string

type AlternatePartyIdentification7 struct {
	IdTp    IdentificationType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AltrnId"`
}

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IdSrc"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

type BonusWithdrawal1 struct {
	TpOfAmt  TypeOfAmount1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TpOfAmt"`
	Amt      ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Amt,omitempty"`
	Rsn      WithdrawalReason1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Rsn,omitempty"`
	UclmdAmt ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 UclmdAmt,omitempty"`
	Outsdng  bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Outsdng,omitempty"`
	AddtlInf []AdditionalInformation15                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

// May be one of ADLV, ARCV
type BusinessFlowDirectionType1Code string

// May be one of SLDP, SLRP, DLPR
type BusinessFlowType1Code string

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

// May be one of LIQU, NLIQ
type CashAll1Code string

type CashAsset1 struct {
	CshAsstTp CashAssetType1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshAsstTp"`
	AddtlInf  AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type CashAssetType1Choice struct {
	Cd    CashAssetType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of CSH2, CSH1
type CashAssetType1Code string

type ChargeBasis2Choice struct {
	Cd    TaxationBasis5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type ChargeOrCommissionDiscount1 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Bsis,omitempty"`
}

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type ClearingSystemMemberIdentification2Choice struct {
	USCHU       CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 USCHU"`
	NZNCC       NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NZNCC"`
	IENSC       IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IENSC"`
	GBSC        UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 GBSC"`
	USCH        CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 USCH"`
	CHBC        SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CHBC"`
	USFW        FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 USFW"`
	PTNCC       PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PTNCC"`
	RUCB        RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RUCB"`
	ITNCC       ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ITNCC"`
	ATBLZ       AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ATBLZ"`
	CACPA       CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CACPA"`
	CHSIC       SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CHSIC"`
	DEBLZ       GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DEBLZ"`
	ESNCC       SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ESNCC"`
	ZANCC       SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ZANCC"`
	HKNCC       HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 HKNCC"`
	AUBSBx      ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AUBSBx"`
	AUBSBs      SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AUBSBs"`
	INIFSC      IndianFinancialSystemCodeIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 INIFSC"`
	GRHEBIC     HellenicBankIdentificationCodeIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 GRHEBIC"`
	PLKNR       PolishNationalClearingCodeIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PLKNR"`
	OthrClrCdId Max35Text                                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrClrCdId"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Crystallisation1 struct {
	TrchId           Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrchId"`
	CrstllsdUnitsNb  float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CrstllsdUnitsNb,omitempty"`
	UcrstllsdUnitsNb float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 UcrstllsdUnitsNb,omitempty"`
	AddtlInf         []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type DateAndAmount2 struct {
	Dt  ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dt,omitempty"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Amt"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DtTm"`
}

type DateQuarter1Choice struct {
	Dt  ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dt"`
	Prd Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prd"`
}

type Document struct {
	AcctHldgInf AccountHoldingInformationV07 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcctHldgInf"`
}

type DrawdownStatus1Choice struct {
	Cd    DrawdownStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of FULL, NONE, PART
type DrawdownStatus1Code string

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type Fee5 struct {
	Tp           ChargeType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	Bsis         ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Bsis,omitempty"`
	StdAmt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 StdAmt,omitempty"`
	StdRate      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 StdRate,omitempty"`
	DscntDtls    ChargeOrCommissionDiscount1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DscntDtls,omitempty"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ApldAmt,omitempty"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ApldRate,omitempty"`
	NonStdSLARef Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NonStdSLARef,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RcptId,omitempty"`
	InftvInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InftvInd"`
}

type FinancialInstrument1Choice struct {
	Scty     FinancialInstrumentIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Scty"`
	CshAsst  CashAsset1                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshAsst"`
	OthrAsst OtherAsset1                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrAsst"`
}

type FinancialInstrument68 struct {
	LineId         Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LineId,omitempty"`
	Instrm         FinancialInstrument1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Instrm"`
	Qty            Quantity44Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Qty"`
	UnitsDtls      []Unit11                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 UnitsDtls,omitempty"`
	ClntRef        AdditionalReference10             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ClntRef,omitempty"`
	CtrPtyRef      AdditionalReference10             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CtrPtyRef,omitempty"`
	BizFlowTp      BusinessFlowType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BizFlowTp,omitempty"`
	AvrgAcqstnPric ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AvrgAcqstnPric,omitempty"`
	TtlBookVal     DateAndAmount2                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TtlBookVal,omitempty"`
	LatstValtn     DateAndAmount2                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LatstValtn,omitempty"`
	TrfeeAcct      Account28                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrfeeAcct,omitempty"`
	Trfr           Account28                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Trfr,omitempty"`
	CrstllstnDtls  []Crystallisation1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CrstllstnDtls,omitempty"`
	TaxValtnPt     Tax36                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxValtnPt,omitempty"`
	SttlmPtiesDtls FundSettlementParameters14        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SttlmPtiesDtls,omitempty"`
	AddtlInf       []AdditionalInformation15         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type FinancialInstrumentIdentification1 struct {
	Id     SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Nm     Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm,omitempty"`
	ShrtNm Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ShrtNm,omitempty"`
}

type FundPortfolio2Choice struct {
	TaxEffcntPdct TaxEfficientProduct2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxEffcntPdct"`
	GnlInvstmt    GeneralInvestment1   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 GnlInvstmt"`
	Pnsn          Pension2             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pnsn"`
}

type FundSettlementParameters14 struct {
	SfkpgPlc         SafekeepingPlaceFormat28Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SfkpgPlc,omitempty"`
	TradTxCond       []TradeTransactionCondition8Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TradTxCond,omitempty"`
	SttlmTxCond      []SettlementTransactionCondition30Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SttlmTxCond,omitempty"`
	SctiesSttlmSysId Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SctiesSttlmSysId,omitempty"`
	RcvgSdDtls       SettlementParties74                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RcvgSdDtls,omitempty"`
	DlvrgSdDtls      SettlementParties74                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DlvrgSdDtls,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GeneralInvestment1 struct {
	Tp            GeneralInvestmentAccountType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp,omitempty"`
	CurInvstmtAmt ActiveCurrencyAnd13DecimalAmount    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CurInvstmtAmt,omitempty"`
	EstmtdVal     DateAndAmount2                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 EstmtdVal,omitempty"`
	AddtlInf      []AdditionalInformation15           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type GeneralInvestmentAccountType1Choice struct {
	Cd    GeneralInvestmentAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of EQUI
type GeneralInvestmentAccountType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern GR[0-9]{7,7}
type HellenicBankIdentificationCodeIdentifier string

// May be one of TFEE, TFOR
type HolderType1Code string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type IdentificationType42Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// Must match the pattern IN[a-zA-Z0-9]{11,11}
type IndianFinancialSystemCodeIdentifier string

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm"`
	GvnNm         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IndvInvstrAdr"`
}

type InnovativeFinance1 struct {
	Tp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	Inf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Inf"`
}

type InvestmentAccount69 struct {
	Id     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id,omitempty"`
	Dsgnt  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dsgnt,omitempty"`
	AcctNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcctNm,omitempty"`
	Svcr   PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Svcr,omitempty"`
}

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LumpSumType1Choice struct {
	Cd    LumpSumType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of DEAB, PCLS, UFPL
type LumpSumType1Code string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CreDtTm"`
}

type MoneyPurchaseAnnualAllowance1 struct {
	Trggrd   bool    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Trggrd"`
	TrggrdDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrggrdDt,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type Organisation36 struct {
	Nm            Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm"`
	Id            PartyIdentification140 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id,omitempty"`
	Purp          Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Purp,omitempty"`
	TaxtnCtry     CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RegnCtry,omitempty"`
	RegnDt        ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RegnDt,omitempty"`
	TaxIdNb       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CorpInvstrAdr"`
}

type OtherAmount1 struct {
	Tp  OtherAmountType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	Amt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Amt"`
}

type OtherAmountType1Choice struct {
	Cd      OtherAmountType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	PrtryCd GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrtryCd"`
}

// May be one of PINT, SINT
type OtherAmountType1Code string

type OtherAsset1 struct {
	OthrAsstTp OtherAsset1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrAsstTp"`
	Id         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Nm         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm,omitempty"`
	OthrId     []Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrId,omitempty"`
	AddtlInf   []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type OtherAsset1Choice struct {
	Cd    OtherAsset1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of MOVE, PROP
type OtherAsset1Code string

type PartyIdentification122Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AnyBIC"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmAndAdr"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ctry"`
}

type PartyIdentification123Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmAndAdr"`
}

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AnyBIC"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmAndAdr"`
}

type PartyIdentification126Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AnyBIC"`
	PrtryId GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrtryId"`
}

type PartyIdentification132 struct {
	AnyBIC      AnyBICDec2014Identifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AnyBIC,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ClrSysMmbId,omitempty"`
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NmAndAdr,omitempty"`
	PrtryId     GenericIdentification1                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrtryId,omitempty"`
	LEI         LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LEI,omitempty"`
}

type PartyIdentification139 struct {
	Pty PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LEI,omitempty"`
}

type PartyIdentification140 struct {
	Pty PartyIdentification126Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LEI,omitempty"`
}

type PartyIdentification141 struct {
	Id       PartyIdentification122Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	LEI      LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LEI,omitempty"`
	AltrnId  AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AltrnId,omitempty"`
	PrcgDt   DateAndDateTime2Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrcgDt,omitempty"`
	PrcgId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrcgId,omitempty"`
	AddtlInf PartyTextInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type PartyIdentificationAndAccount161 struct {
	Id        PartyIdentification123Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	LEI       LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LEI,omitempty"`
	AltrnId   AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AltrnId,omitempty"`
	SfkpgAcct SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SfkpgAcct,omitempty"`
	PrcgDt    DateAndDateTime2Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrcgDt,omitempty"`
	PrcgId    Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrcgId,omitempty"`
	AddtlInf  PartyTextInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type PartyTextInformation1 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RegnDtls,omitempty"`
}

type Pension2 struct {
	Id                         PensionPolicy1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id,omitempty"`
	Tp                         PensionSchemeType1Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	TrfScp                     PensionTransferScope1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrfScp,omitempty"`
	TaxRef                     []TaxReference1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxRef,omitempty"`
	DrwdwnTrchId               Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DrwdwnTrchId,omitempty"`
	DrwdwnSts                  DrawdownStatus1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DrwdwnSts,omitempty"`
	EstmtdVal                  DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 EstmtdVal,omitempty"`
	BlckTrf                    bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BlckTrf,omitempty"`
	TaxFreeCshPrtcn            bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxFreeCshPrtcn,omitempty"`
	TaxFreeCshAmt              DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxFreeCshAmt,omitempty"`
	ValOfPnsnPlcyOrPlanOrSchme DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ValOfPnsnPlcyOrPlanOrSchme,omitempty"`
	RtrmntAgePrtcn             bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RtrmntAgePrtcn,omitempty"`
	RtrmntAge                  float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RtrmntAge,omitempty"`
	Shrg                       bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Shrg,omitempty"`
	LumpSumTp                  []LumpSumType1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LumpSumTp,omitempty"`
	PnsnOrdr                   []PensionOrder1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PnsnOrdr,omitempty"`
	RingFncdDrwdwnAssts        bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RingFncdDrwdwnAssts,omitempty"`
	MnyPurchsAnlAllwnc         MoneyPurchaseAnnualAllowance1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MnyPurchsAnlAllwnc,omitempty"`
	SfgrdBnft                  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SfgrdBnft,omitempty"`
	LftmAllwncPrtcn            bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LftmAllwncPrtcn,omitempty"`
	AddtlInf                   []AdditionalInformation15     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type PensionOrder1 struct {
	Tp       PensionOrderType1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type PensionOrderType1Choice struct {
	Cd    PensionOrderType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of EARM, SHAR
type PensionOrderType1Code string

type PensionPolicy1 struct {
	Idr      Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Idr"`
	SubIdr   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SubIdr,omitempty"`
	AddtlInf AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type PensionSchemeType1Choice struct {
	Cd    PensionSchemeType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of AAVC, DBEN, EXPP, FAVC, SIPG, GPPS, STKG, STKI, OCDC, PPNS, REAN, SC32, S32A, SIPP, SSAS, IPST, EPKA, ITPO, OTPM
type PensionSchemeType1Code string

type PensionTransferScope1Choice struct {
	Cd    PensionTransferScope1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of CRYS, SDDT, FULP, UCRY
type PensionTransferScope1Code string

// May be one of ATIN, GTIN, ITIN
type PersonIdentificationType7Code string

// Must match the pattern PL[0-9]{8,8}
type PolishNationalClearingCodeIdentifier string

type PortfolioTransfer2 struct {
	MstrRef             Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 MstrRef,omitempty"`
	TrfId               Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrfId"`
	TrfConfId           Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TrfConfId,omitempty"`
	Prtfl               FundPortfolio2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtfl,omitempty"`
	AllOthrCsh          AllOtherCash1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AllOthrCsh,omitempty"`
	CshAll              CashAll1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshAll,omitempty"`
	RsdlCsh             ResidualCash1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RsdlCsh,omitempty"`
	TaxDt               ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxDt,omitempty"`
	FinInstrmAsstForTrf []FinancialInstrument68   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 FinInstrmAsstForTrf,omitempty"`
	AddtlInf            []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

// May be one of FTRS
type PortfolioWithdrawalReason1Code string

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ctry"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYear1Choice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SpcfcPrvsYrs"`
}

type PreviousYear4 struct {
	PrvsYrs     PreviousYear1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrvsYrs"`
	CshCmpntInd bool                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshCmpntInd,omitempty"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Amt"`
}

type Quantity44Choice struct {
	Unit     float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Unit"`
	PctgRate float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PctgRate"`
	FaceAmt  float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 FaceAmt"`
	AmtsdVal float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AmtsdVal"`
	CshAmt   ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshAmt"`
	OthrAsst Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrAsst"`
}

// Must be at least 1 items long
type RICIdentifier string

// May be one of NRCT, RCTR
type ResidualCash1Code string

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat28Choice struct {
	Id      SafekeepingPlaceTypeAndText6           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Ctry    CountryCode                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ctry"`
	TpAndId SafekeepingPlaceTypeAndIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TpAndId"`
	Prtry   GenericIdentification78                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type SafekeepingPlaceTypeAndIdentification1 struct {
	SfkpgPlcTp SafekeepingPlace1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SfkpgPlcTp"`
	Id         AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm,omitempty"`
}

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrPrtryId"`
}

type SettlementParties74 struct {
	Dpstry PartyIdentification141           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount161 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount161 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount161 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount161 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount161 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Pty5,omitempty"`
}

// May be one of NOMC
type SettlementTransactionCondition11Code string

type SettlementTransactionCondition30Choice struct {
	Cd    SettlementTransactionCondition11Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification30              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Id"`
	Nm    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Chrtc,omitempty"`
}

type SubscriptionInformation2 struct {
	DtOfFrstSbcpt ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DtOfFrstSbcpt"`
	EqtyCmpnt     ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 EqtyCmpnt,omitempty"`
	CshCmpnt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshCmpnt,omitempty"`
	TtlAmtYrToDt  ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TtlAmtYrToDt"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

type Tax35 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ApldAmt"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ApldRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ctry,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxClctnDtls,omitempty"`
}

type Tax36 struct {
	DtOrPrd  DateQuarter1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DtOrPrd"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type TaxBasis1Choice struct {
	Cd    TaxationBasis2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type TaxCalculationInformation10 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxblAmt"`
}

type TaxEfficientProduct2 struct {
	TaxEffcntPdctTp    TaxEfficientProductType1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxEffcntPdctTp"`
	CshCmpntInd        bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CshCmpntInd,omitempty"`
	PrvsYrs            PreviousYear4                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PrvsYrs,omitempty"`
	DtOfFrstSbcpt      ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 DtOfFrstSbcpt,omitempty"`
	CurYrSbcptDtls     SubscriptionInformation2         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CurYrSbcptDtls,omitempty"`
	BnsOrWdrwl         []BonusWithdrawal1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 BnsOrWdrwl,omitempty"`
	InvstrTaxRef       TaxReference2                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InvstrTaxRef,omitempty"`
	InvstmtsToFllwVal  []DateAndAmount2                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InvstmtsToFllwVal,omitempty"`
	InnvtvFinc         []InnovativeFinance1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 InnvtvFinc,omitempty"`
	LwstInvstdAmtCurYr ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 LwstInvstdAmtCurYr,omitempty"`
	TaxClctnBase       ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxClctnBase,omitempty"`
	UusdTaxDdctn       ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 UusdTaxDdctn,omitempty"`
	CurInvstmtAmt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CurInvstmtAmt,omitempty"`
	EstmtdVal          DateAndAmount2                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 EstmtdVal,omitempty"`
	AddtlInf           []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AddtlInf,omitempty"`
}

type TaxEfficientProductType1Choice struct {
	Cd    TaxEfficientProductType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of CASH, CCTF, FISA, HISA, INNF, JCSH, JISA, LISA, SCTF, EQUI, GISK, GASK
type TaxEfficientProductType1Code string

type TaxReference1 struct {
	TaxTp  TaxReferenceType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxTp,omitempty"`
	Ref    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ref"`
	HldrTp TaxReferenceParty1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 HldrTp,omitempty"`
}

type TaxReference2 struct {
	Tp  TaxReferenceType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp,omitempty"`
	Ref Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ref"`
}

type TaxReferenceParty1Choice struct {
	Cd    HolderType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type TaxReferenceType1Choice struct {
	Cd    PersonIdentificationType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of PROV, NATI, STAT, WITH, KAPA, NKAP, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType17Code string

type TaxType3Choice struct {
	Cd    TaxType17Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of BONU, WTHD
type TaxWrapperAmountType1Code string

type TaxableIncomePerShareCalculated2Choice struct {
	Cd    TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, GRAM, NEAM, NAVP, PERU
type TaxationBasis5Code string

// Must be at least 1 items long
type TickerIdentifier string

type TotalFeesAndTaxes41 struct {
	TtlOvrhdApld   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TtlOvrhdApld,omitempty"`
	TtlFees        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TtlFees,omitempty"`
	TtlTaxs        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TtlTaxs,omitempty"`
	ComrclAgrmtRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee5                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IndvFee,omitempty"`
	IndvTax        []Tax35                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 IndvTax,omitempty"`
}

// May be one of XCPN, CCPN
type TradeTransactionCondition5Code string

type TradeTransactionCondition8Choice struct {
	Cd    TradeTransactionCondition5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type TypeOfAmount1Choice struct {
	Cd    TaxWrapperAmountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type TypeOfPrice46Choice struct {
	Cd    TypeOfPrice10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type Unit11 struct {
	UnitsNb      float64             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 UnitsNb"`
	OrdrDt       ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OrdrDt,omitempty"`
	AcqstnDt     ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcqstnDt,omitempty"`
	CertNb       []Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 CertNb,omitempty"`
	Grp1Or2Units UKTaxGroupUnit1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Grp1Or2Units,omitempty"`
	Ref          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Ref,omitempty"`
	PricDtls     UnitPrice23         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PricDtls,omitempty"`
	TxOvrhd      TotalFeesAndTaxes41 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TxOvrhd,omitempty"`
	OthrAmt      []OtherAmount1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 OthrAmt,omitempty"`
}

type UnitPrice23 struct {
	Tp                   TypeOfPrice46Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Tp"`
	Val                  PriceValue1                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Val"`
	PricMtd              PriceMethod1Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 PricMtd,omitempty"`
	AcrdIntrstNAV        ActiveOrHistoricCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 AcrdIntrstNAV,omitempty"`
	NbOfDaysAcrd         float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr      ActiveCurrencyAnd13DecimalAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd TaxableIncomePerShareCalculated2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 TaxblIncmPerShrClctd,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type WaivingInstruction2Choice struct {
	Cd    WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type WithdrawalReason1Choice struct {
	Cd    PortfolioWithdrawalReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Cd"`
	Prtry GenericIdentification36        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.018.001.07 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
