// Code generated by main. DO NOT EDIT.

package sese_001_001_08

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account24 struct {
	Id    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id,omitempty"`
	Dsgnt Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dsgnt,omitempty"`
	Svcr  PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Svcr,omitempty"`
}

type Account25 struct {
	Id       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id,omitempty"`
	AcctSvcr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctSvcr"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MsgNm,omitempty"`
}

type AdditionalReference9 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of NCER, ELEC, PHYS
type BeneficiaryCertificationCompletion1Code string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

// May be one of SLDP, SLRP, DLPR
type BusinessFlowType1Code string

type ChargeBasis2Choice struct {
	Cd    TaxationBasis5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of OUR, BEN, SHA
type ChargeBearer1Code string

type ChargeOrCommissionDiscount1 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
}

type ChargeOrCommissionDiscount2 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
}

type ChargePaymentMethod1Choice struct {
	Cd    ChargePaymentMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of CASH, UNIT
type ChargePaymentMethod1Code string

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type ChargeType6Choice struct {
	Cd    InvestmentFundFee2Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 EmailAdr,omitempty"`
}

type CopyInformation4 struct {
	CpyInd    bool             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CpyInd"`
	OrgnlRcvr AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OrgnlRcvr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DtTm"`
}

type DateFormat1Choice struct {
	Dt   ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dt"`
	Cd   SettlementDate1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	DtTm ISODateTime         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DtTm"`
}

type DeliveringPartiesAndAccount18 struct {
	DlvrrsCtdnDtls    PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DlvrrsCtdnDtls,omitempty"`
	DlvrrsIntrmy1Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DlvrrsIntrmy1Dtls,omitempty"`
	DlvrrsIntrmy2Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DlvrrsIntrmy2Dtls,omitempty"`
	DlvrgAgtDtls      PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DlvrgAgtDtls"`
	SctiesSttlmSys    Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SctiesSttlmSys,omitempty"`
	PlcOfSttlmDtls    PartyIdentification123           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PlcOfSttlmDtls,omitempty"`
}

type DeliveryParameters4 struct {
	RegdAdrInd bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RegdAdrInd"`
	NmAndAdr   NameAndAddress4        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NmAndAdr,omitempty"`
	CtctPrsn   ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtctPrsn,omitempty"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	TrfOutInstr TransferOutInstructionV08 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfOutInstr"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type ExemptionReason1Choice struct {
	Cd    TaxExemptReason1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Txt"`
}

type Fee2 struct {
	Tp           ChargeType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Bsis         ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
	StdAmt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 StdAmt,omitempty"`
	StdRate      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 StdRate,omitempty"`
	DscntDtls    ChargeOrCommissionDiscount1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DscntDtls,omitempty"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ApldAmt,omitempty"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ApldRate,omitempty"`
	NonStdSLARef Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NonStdSLARef,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcptId,omitempty"`
	InftvInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 InftvInd"`
}

type Fee4 struct {
	Tp        ChargeType6Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Bsis      ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
	Amt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt"`
	DscntDtls ChargeOrCommissionDiscount2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DscntDtls,omitempty"`
	ChrgBr    ChargeBearer1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ChrgBr,omitempty"`
	RcptId    PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcptId,omitempty"`
}

type Fees1 struct {
	ComrclAgrmtRef Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee4    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IndvFee,omitempty"`
}

type FinancialInstrument63 struct {
	Id          SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Nm          Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm,omitempty"`
	ShrtNm      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ShrtNm,omitempty"`
	SplmtryId   Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SplmtryId,omitempty"`
	ClssTp      Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DstrbtnPlcy,omitempty"`
}

type ForeignExchangeTerms33 struct {
	ToAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ToAmt,omitempty"`
	FrAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 FrAmt,omitempty"`
	UnitCcy  ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 UnitCcy"`
	QtdCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 QtdCcy"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 XchgRate"`
	QtnDt    ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 QtnDt,omitempty"`
	QtgInstn PartyIdentification113  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 QtgInstn,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Issr,omitempty"`
}

type GenericIdentification27 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	SchmeNm Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SchmeNm,omitempty"`
	Issr    Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Issr"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id,omitempty"`
}

// May be one of INVP, SWIP, PLAR
type HoldingsPlanType1Code string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of CASH, SECU
type IncomePreference2Code string

type Intermediary41 struct {
	Id       PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Acct     Account25              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Acct,omitempty"`
	Role     Role4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Role,omitempty"`
	CtctPrsn ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtctPrsn,omitempty"`
}

type InvestmentAccount65 struct {
	OwnrId               []PartyIdentification113                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OwnrId,omitempty"`
	AcctId               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctId,omitempty"`
	AcctNm               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctNm,omitempty"`
	AcctDsgnt            Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctDsgnt,omitempty"`
	SctiesForm           FormOfSecurity1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SctiesForm,omitempty"`
	DmtrlsdInd           bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DmtrlsdInd,omitempty"`
	IncmPref             IncomePreference2Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IncmPref,omitempty"`
	BnfcryCertfctnCmpltn BeneficiaryCertificationCompletion1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 BnfcryCertfctnCmpltn,omitempty"`
	AcctSvcr             PartyIdentification113                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctSvcr,omitempty"`
	SubAcctDtls          SubAccount5                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SubAcctDtls,omitempty"`
}

type InvestmentAccount66 struct {
	OwnrId               []PartyIdentification113                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OwnrId,omitempty"`
	AcctId               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctId"`
	AcctNm               Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctNm,omitempty"`
	AcctDsgnt            Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctDsgnt,omitempty"`
	IntrmyInf            []Intermediary41                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IntrmyInf,omitempty"`
	SctiesForm           FormOfSecurity1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SctiesForm,omitempty"`
	DmtrlsdInd           bool                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DmtrlsdInd,omitempty"`
	IncmPref             IncomePreference2Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IncmPref,omitempty"`
	BnfcryCertfctnCmpltn BeneficiaryCertificationCompletion1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 BnfcryCertfctnCmpltn,omitempty"`
	SfkpgPlc             SafekeepingPlaceFormat8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SfkpgPlc,omitempty"`
	AcctSvcr             PartyIdentification113                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctSvcr,omitempty"`
	SubAcctDtls          SubAccount5                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SubAcctDtls,omitempty"`
	SttlmPtiesDtls       DeliveringPartiesAndAccount18           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SttlmPtiesDtls,omitempty"`
}

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

// May be one of BEND, FEND, TRAN, POST, REGF, SHIP, SPCN
type InvestmentFundFee2Code string

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nb,omitempty"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CreDtTm"`
}

type NameAndAddress4 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm,omitempty"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Adr"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type OtherAmount1 struct {
	Tp  OtherAmountType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Amt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt"`
}

type OtherAmountType1Choice struct {
	Cd      OtherAmountType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	PrtryCd GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrtryCd"`
}

// May be one of PINT, SINT
type OtherAmountType1Code string

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 LEI,omitempty"`
}

type PartyIdentification123 struct {
	PtyId    PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PtyId"`
	PrcgRef  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgRef,omitempty"`
	PrcgDt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgDt,omitempty"`
	CtctPrsn ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtctPrsn,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NmAndAdr"`
}

type PartyIdentificationAndAccount156 struct {
	PtyId      PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PtyId,omitempty"`
	AcctId     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctId,omitempty"`
	PlcOfSttlm PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PlcOfSttlm"`
}

type PartyIdentificationAndAccount157 struct {
	PtyId   PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PtyId"`
	AcctId  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctId,omitempty"`
	PrcgRef Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgRef,omitempty"`
	PrcgDt  DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgDt,omitempty"`
}

type PartyIdentificationAndAccount158 struct {
	PtyId       PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PtyId"`
	AcctId      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctId,omitempty"`
	PrcgRef     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgRef,omitempty"`
	PrcgDt      DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrcgDt,omitempty"`
	SubAcctDtls SubAccount5            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SubAcctDtls,omitempty"`
	CtctPrsn    ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtctPrsn,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

// May be one of DEMT, PHYS
type PhysicalTransferType1Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt"`
}

type Quantity42Choice struct {
	TtlUnitsNb float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TtlUnitsNb"`
	TrfRate    float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfRate"`
}

// Must be at least 1 items long
type RICIdentifier string

type ReceiveInformation19 struct {
	Trfee          PartyIdentification113       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Trfee,omitempty"`
	TrfeeRegdAcct  Account24                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfeeRegdAcct,omitempty"`
	IntrmyInf      []Intermediary41             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IntrmyInf,omitempty"`
	ReqdSttlmDt    ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ReqdSttlmDt,omitempty"`
	SttlmAmt       ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SttlmAmt,omitempty"`
	StmpDty        StampDutyType2Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 StmpDty,omitempty"`
	NetAmt         ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NetAmt,omitempty"`
	Fees           []Fees1                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Fees,omitempty"`
	IndvTax        []Tax34                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IndvTax,omitempty"`
	FXDtls         []ForeignExchangeTerms33     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 FXDtls,omitempty"`
	SttlmPtiesDtls ReceivingPartiesAndAccount17 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SttlmPtiesDtls,omitempty"`
	PhysTrf        PhysicalTransferType1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PhysTrf,omitempty"`
	PhysTrfDtls    DeliveryParameters4          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PhysTrfDtls,omitempty"`
	ClntRef        AdditionalReference8         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ClntRef,omitempty"`
}

type ReceivingPartiesAndAccount17 struct {
	RcvrDtls         InvestmentAccount65              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvrDtls,omitempty"`
	RcvrsCtdnDtls    PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvrsCtdnDtls,omitempty"`
	RcvrsIntrmy1Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvrsIntrmy1Dtls,omitempty"`
	RcvrsIntrmy2Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvrsIntrmy2Dtls,omitempty"`
	RcvgAgtDtls      PartyIdentificationAndAccount158 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvgAgtDtls"`
	SctiesSttlmSys   Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SctiesSttlmSys,omitempty"`
	PlcOfSttlmDtls   PartyIdentification123           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PlcOfSttlmDtls,omitempty"`
}

type Role4Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of RDUP, RDWN
type RoundingDirection2Code string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat8Choice struct {
	Id      SafekeepingPlaceTypeAndText6             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TpAndId"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id,omitempty"`
}

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OthrPrtryId"`
}

// May be one of ASAP, ENDC, WHIF
type SettlementDate1Code string

// May be one of ASTD, SDRN
type StampDutyType2Code string

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Id"`
	Nm    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Chrtc,omitempty"`
}

type Tax31 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ApldAmt"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ApldRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ctry,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxClctnDtls,omitempty"`
}

type Tax34 struct {
	Tp           TaxType1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Bsis         TaxBasis1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
	Amt          ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Amt"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ctry,omitempty"`
	XmptnInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 XmptnInd"`
	XmptnRsn     ExemptionReason1Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 XmptnRsn,omitempty"`
	RcptId       PartyIdentification113      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation11 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxClctnDtls,omitempty"`
}

type TaxBasis1Choice struct {
	Cd    TaxationBasis2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type TaxCalculationInformation10 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxblAmt"`
}

type TaxCalculationInformation11 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxblAmt"`
}

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

// May be one of COAX, CTAX, EUTR, LEVY, LOCL, NATI, PROV, STAM, STAT, STEX, TRAN, TRAX, VATA, WITH, NKAP, KAPA
type TaxType16Code string

// May be one of PROV, NATI, STAT, WITH, KAPA, NKAP, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType17Code string

type TaxType1Choice struct {
	Cd    TaxType16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type TaxType3Choice struct {
	Cd    TaxType17Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type TaxableIncomePerShareCalculated2Choice struct {
	Cd    TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, GRAM, NEAM, NAVP, PERU
type TaxationBasis5Code string

// Must be at least 1 items long
type TickerIdentifier string

type TotalFeesAndTaxes40 struct {
	TtlOvrhdApld   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TtlOvrhdApld,omitempty"`
	TtlFees        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TtlFees,omitempty"`
	TtlTaxs        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TtlTaxs,omitempty"`
	ComrclAgrmtRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee2                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IndvFee,omitempty"`
	IndvTax        []Tax31                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 IndvTax,omitempty"`
}

type Transfer34 struct {
	TrfRef         Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfRef"`
	ClntRef        AdditionalReference8                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ClntRef,omitempty"`
	CtrPtyRef      AdditionalReference8                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CtrPtyRef,omitempty"`
	BizFlowTp      BusinessFlowType1Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 BizFlowTp,omitempty"`
	ReqdTrfDt      DateFormat1Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ReqdTrfDt,omitempty"`
	ReqdSttlmDt    ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 ReqdSttlmDt,omitempty"`
	TrfOrdrDtForm  ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfOrdrDtForm,omitempty"`
	TrfRsn         TransferReason1Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfRsn,omitempty"`
	HldgsPlanTp    []HoldingsPlanType1Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 HldgsPlanTp,omitempty"`
	FinInstrmDtls  FinancialInstrument63                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 FinInstrmDtls"`
	Qty            Quantity42Choice                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Qty"`
	UnitsDtls      []Unit8                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 UnitsDtls,omitempty"`
	Rndg           RoundingDirection2Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Rndg,omitempty"`
	AvrgPric       ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AvrgPric,omitempty"`
	TrfCcy         ActiveOrHistoricCurrencyCode               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfCcy,omitempty"`
	OwnAcctTrfInd  bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OwnAcctTrfInd,omitempty"`
	NonStdSttlmInf Max350Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NonStdSttlmInf,omitempty"`
	RcvgAgtDtls    PartyIdentificationAndAccount156           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RcvgAgtDtls,omitempty"`
	DlvrgAgtDtls   PartyIdentificationAndAccount156           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 DlvrgAgtDtls,omitempty"`
	TrfExpnssPmtTp ChargePaymentMethod1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfExpnssPmtTp,omitempty"`
}

type TransferOutInstructionV08 struct {
	MsgId        MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MsgId"`
	PoolRef      AdditionalReference9   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PoolRef,omitempty"`
	PrvsRef      AdditionalReference8   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PrvsRef,omitempty"`
	RltdRef      AdditionalReference8   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 RltdRef,omitempty"`
	MstrRef      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MstrRef,omitempty"`
	TrfDtls      []Transfer34           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TrfDtls"`
	AcctDtls     InvestmentAccount66    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcctDtls"`
	SttlmDtls    ReceiveInformation19   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 SttlmDtls,omitempty"`
	MktPrctcVrsn MarketPracticeVersion1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 MktPrctcVrsn,omitempty"`
	CpyDtls      CopyInformation4       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CpyDtls,omitempty"`
	Xtnsn        []Extension1           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Xtnsn,omitempty"`
}

type TransferReason1Choice struct {
	Cd    TransferReason1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification27 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of TRAU, TRAC, TRAT, TRAO, TRAI, TRAG, TPLD, TTDT, TRPE, TRAF, TRAN
type TransferReason1Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type TypeOfPrice46Choice struct {
	Cd    TypeOfPrice10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type Unit8 struct {
	UnitsNb      float64             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 UnitsNb"`
	OrdrDt       ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OrdrDt,omitempty"`
	AcqstnDt     ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcqstnDt,omitempty"`
	CertNb       []Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 CertNb,omitempty"`
	Grp1Or2Units UKTaxGroupUnit1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Grp1Or2Units,omitempty"`
	Ref          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Ref,omitempty"`
	PricDtls     UnitPrice23         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PricDtls,omitempty"`
	TxOvrhd      TotalFeesAndTaxes40 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TxOvrhd,omitempty"`
	OthrAmt      []OtherAmount1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 OthrAmt,omitempty"`
}

type UnitPrice23 struct {
	Tp                   TypeOfPrice46Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Tp"`
	Val                  PriceValue1                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Val"`
	PricMtd              PriceMethod1Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 PricMtd,omitempty"`
	AcrdIntrstNAV        ActiveOrHistoricCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 AcrdIntrstNAV,omitempty"`
	NbOfDaysAcrd         float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr      ActiveCurrencyAnd13DecimalAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd TaxableIncomePerShareCalculated2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 TaxblIncmPerShrClctd,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type WaivingInstruction2Choice struct {
	Cd    WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.001.001.08 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
