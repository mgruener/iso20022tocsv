// Code generated by main. DO NOT EDIT.

package sese_040_002_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AmountAndDirection67 struct {
	Amt                 RestrictedFINActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Amt"`
	CdtDbtInd           CreditDebitCode                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 CdtDbtInd"`
	OrgnlCcyAndOrdrdAmt RestrictedFINActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 OrgnlCcyAndOrdrdAmt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type ConsentOrRejectionReason5Choice struct {
	Cd    CounterpartyResponseStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	Prtry GenericIdentification47               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Prtry"`
}

type ConsentReason5 struct {
	Cd          ConsentOrRejectionReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	AddtlRsnInf RestrictedFINXMax210Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AddtlRsnInf,omitempty"`
}

type ConsentStatus5Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NoSpcfdRsn"`
	Rsn        []ConsentReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Rsn"`
}

// May be one of CPTR, CPCX, CPMD
type CounterpartyResponseStatusReason1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 DtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of OPEN, UKWN
type DateType4Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	SctiesSttlmTxCtrPtyRspn SecuritiesSettlementTransactionCounterpartyResponse002V02 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SctiesSttlmTxCtrPtyRspn"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity15Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AmtsdVal"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress12 struct {
	Nm RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Nm"`
}

// May be one of NORE
type NoReasonCode string

type NoSpecifiedReason1 struct {
	NoSpcfdRsn NoReasonCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NoSpcfdRsn"`
}

type OriginalAndCurrentQuantities4 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AmtsdVal"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Tp"`
}

type PartyIdentification104Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AnyBIC"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PrtryId"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NmAndAdr"`
}

type PartyIdentification108 struct {
	Id     PartyIdentification58Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	LEI    LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 LEI,omitempty"`
	PrcgId RestrictedFINXMax16Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PrcgId,omitempty"`
}

type PartyIdentification110 struct {
	Id  PartyIdentification115Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 LEI,omitempty"`
}

type PartyIdentification115Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AnyBIC"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PrtryId"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NmAndAdr"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Ctry"`
}

type PartyIdentification58Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AnyBIC"`
	NmAndAdr NameAndAddress12 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Ctry"`
}

type PartyIdentificationAndAccount146 struct {
	Id        PartyIdentification104Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	LEI       LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 LEI,omitempty"`
	SfkpgAcct SecuritiesAccount30          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SfkpgAcct,omitempty"`
	PrcgId    RestrictedFINXMax16Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PrcgId,omitempty"`
}

type PendingStatus20Choice struct {
	Fwdd        NoSpecifiedReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Fwdd"`
	UdrInvstgtn NoSpecifiedReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 UdrInvstgtn"`
}

type Quantity10Choice struct {
	Qty             FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities4       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type RejectionReason40 struct {
	Cd          ConsentOrRejectionReason5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	AddtlRsnInf RestrictedFINXMax210Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AddtlRsnInf,omitempty"`
}

type RejectionStatus27Choice struct {
	NoSpcfdRsn NoReasonCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 NoSpcfdRsn"`
	Rsn        RejectionReason40 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Rsn"`
}

type ResponseStatus8Choice struct {
	Cnsntd ConsentStatus5Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cnsntd"`
	Rjctd  RejectionStatus27Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Rjctd"`
	Pdg    PendingStatus20Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pdg"`
}

type RestrictedFINActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type RestrictedFINActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,210}
type RestrictedFINXMax210Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

type SecuritiesAccount30 struct {
	Id RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Id"`
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Nm,omitempty"`
}

type SecuritiesSettlementTransactionCounterpartyResponse002V02 struct {
	TxId        TransactionIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 TxId"`
	RspnSts     ResponseStatus8Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 RspnSts"`
	TxDtls      TransactionDetails92       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 TxDtls,omitempty"`
	SplmtryData []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SplmtryData,omitempty"`
}

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Desc,omitempty"`
}

type SettlementDate15Choice struct {
	Dt   DateAndDateTimeChoice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Dt"`
	DtCd SettlementDateCode11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 DtCd"`
}

type SettlementDateCode11Choice struct {
	Cd    DateType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Prtry"`
}

type SettlementParties49 struct {
	Dpstry PartyIdentification108           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount146 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pty5,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradeDate6Choice struct {
	Dt   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Dt"`
	DtCd TradeDateCode4Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 DtCd"`
}

type TradeDateCode4Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Prtry"`
}

type TransactionDetails92 struct {
	FinInstrmId     SecurityIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 FinInstrmId"`
	SctiesMvmntTp   ReceiveDelivery1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SctiesMvmntTp"`
	Pmt             DeliveryReceiptType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Pmt"`
	SttlmQty        Quantity10Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SttlmQty"`
	SfkpgAcct       SecuritiesAccount30      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SfkpgAcct"`
	SttlmAmt        AmountAndDirection67     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SttlmAmt,omitempty"`
	SttlmDt         SettlementDate15Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 SttlmDt"`
	TradDt          TradeDate6Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 TradDt,omitempty"`
	DlvrgSttlmPties SettlementParties49      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties  SettlementParties49      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 RcvgSttlmPties,omitempty"`
	Invstr          PartyIdentification110   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 Invstr,omitempty"`
}

type TransactionIdentification7 struct {
	AcctOwnrTxId      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AcctOwnrTxId,omitempty"`
	AcctSvcrTxId      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.040.002.02 PrcrTxId,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
