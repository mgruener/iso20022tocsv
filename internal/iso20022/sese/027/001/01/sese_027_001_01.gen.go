// Code generated by main. DO NOT EDIT.

package sese_027_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus1Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
}

type AcknowledgementReason1 struct {
	Cd          AcknowledgementReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason1Choice struct {
	Cd    AcknowledgementReason3Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

// May be one of ADEA, SMPG, OTHR
type AcknowledgementReason3Code string

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateIdentification1 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 IdSrc"`
}

type AmountAndDirection8 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 CdtDbtInd"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 OrgnlCcyAndOrdrdAmt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationReason2 struct {
	Cd          CancellationReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	AddtlRsnInf Max210Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type CancellationReason3Choice struct {
	Cd    CancelledStatusReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

type CancellationStatus3Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NoSpcfdRsn"`
	Rsn        []CancellationReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
}

// May be one of CANI, OTHR
type CancelledStatusReason5Code string

// May be one of CODU, COPY, DUPL
type CopyDuplicate1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 DtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of OPEN, UKWN
type DateType4Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type DeniedReason2 struct {
	Cd          DeniedReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	AddtlRsnInf Max210Text          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type DeniedReason2Choice struct {
	Cd    DeniedReason4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

// May be one of ADEA, DCAN, DPRG, DREP, DSET, LATE, OTHR, CDRG, CDCY, CDRE
type DeniedReason4Code string

type DeniedStatus2Choice struct {
	NoSpcfdRsn NoReasonCode    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NoSpcfdRsn"`
	Rsn        []DeniedReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
}

type Document struct {
	SctiesTxCxlReqStsAdvc SecuritiesTransactionCancellationRequestStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SctiesTxCxlReqStsAdvc"`
}

type DocumentIdentification11 struct {
	Id       Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	CreDtTm  DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 CreDtTm,omitempty"`
	CpyDplct CopyDuplicate1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 CpyDplct,omitempty"`
}

type DocumentNumber1Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 LngNb"`
	PrtryNb GenericIdentification19           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtryNb"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension2 struct {
	PlcAndNm   Max350Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PlcAndNm,omitempty"`
	XtnsnEnvlp ExtensionEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 XtnsnEnvlp"`
}

type ExtensionEnvelope1 struct {
	Item string `xml:",any"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AmtsdVal"`
}

type GenericDocumentIdentification1 struct {
	MsgNb DocumentNumber1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 MsgNb,omitempty"`
	Id    Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type Identification1 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OriginalAndCurrentQuantities1 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AmtsdVal"`
}

type PartyIdentification10Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NmAndAdr"`
}

type PartyIdentification12Choice struct {
	BICOrBEI AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 BICOrBEI"`
	NmAndAdr NameAndAddress5  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Ctry"`
}

type PartyIdentification13Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtryId"`
}

type PartyIdentification14Choice struct {
	BICOrBEI AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 BICOrBEI"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NmAndAdr"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Ctry"`
}

type PartyIdentification36 struct {
	Id     PartyIdentification12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	PrcgId Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrcgId,omitempty"`
}

type PartyIdentificationAndAccount16 struct {
	Id        PartyIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	SfkpgAcct SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SfkpgAcct,omitempty"`
	PrcgId    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrcgId,omitempty"`
}

type PendingReason2 struct {
	Cd          PendingReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type PendingReason2Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

type PendingStatus4Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NoSpcfdRsn"`
	Rsn        []PendingReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Ctry"`
}

type ProcessingStatus2Choice struct {
	PdgCxl     PendingStatus4Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PdgCxl"`
	Rjctd      RejectionOrRepairStatus6Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rjctd"`
	Rpr        RejectionOrRepairStatus6Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rpr"`
	AckdAccptd AcknowledgedAcceptedStatus1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AckdAccptd"`
	Prtry      ProprietaryStatusAndReason1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
	Dnd        DeniedStatus2Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dnd"`
	Canc       CancellationStatus3Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Canc"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrtryRsn,omitempty"`
}

type Quantity6Choice struct {
	Qty             FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type References4Choice struct {
	OthrTxId        GenericDocumentIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 OthrTxId"`
	SctiesFincgTxId SettlementTypeAndIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SctiesFincgTxId"`
	SctiesSttlmTxId SettlementTypeAndIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SctiesSttlmTxId"`
	IntraPosMvmntId Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 IntraPosMvmntId"`
}

type RejectionAndRepairReason1Choice struct {
	Cd    RejectionReason21Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

type RejectionOrRepairReason1 struct {
	Cd          RejectionAndRepairReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	AddtlRsnInf Max210Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AddtlRsnInf,omitempty"`
}

type RejectionOrRepairStatus6Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 NoSpcfdRsn"`
	Rsn        []RejectionOrRepairReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Rsn,omitempty"`
}

// May be one of ADEA, LATE, SAFE, NRGM, NRGN, OTHR, REFE
type RejectionReason21Code string

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Nm,omitempty"`
}

type SecuritiesTransactionCancellationRequestStatusAdviceV01 struct {
	Id        DocumentIdentification11    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	CxlReqRef Identification1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 CxlReqRef"`
	TxId      TransactionIdentifications4 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 TxId,omitempty"`
	PrcgSts   ProcessingStatus2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 PrcgSts"`
	TxDtls    TransactionDetails4         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 TxDtls,omitempty"`
	MsgOrgtr  PartyIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 MsgOrgtr,omitempty"`
	MsgRcpt   PartyIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 MsgRcpt,omitempty"`
	Xtnsn     []Extension2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Xtnsn,omitempty"`
}

type SecurityIdentification11 struct {
	Id   SecurityIdentification11Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Id"`
	Desc Max140Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Desc,omitempty"`
}

type SecurityIdentification11Choice struct {
	ISIN   ISINIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 ISIN"`
	OthrId AlternateIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 OthrId"`
}

type SettlementDate2Choice struct {
	Dt   DateAndDateTimeChoice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dt"`
	DtCd SettlementDateCode2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 DtCd"`
}

type SettlementDateCode2Choice struct {
	Cd    DateType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

type SettlementParties2 struct {
	Dpstry PartyIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pty5,omitempty"`
}

type SettlementTypeAndIdentification4 struct {
	TxId          Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 TxId"`
	SctiesMvmntTp ReceiveDelivery1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SctiesMvmntTp,omitempty"`
	Pmt           DeliveryReceiptType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Pmt,omitempty"`
}

type TradeDate1Choice struct {
	Dt   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Dt"`
	DtCd TradeDateCode1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 DtCd"`
}

type TradeDateCode1Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Prtry"`
}

type TransactionDetails4 struct {
	AcctOwnr        PartyIdentification13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AcctOwnr,omitempty"`
	SfkpgAcct       SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SfkpgAcct"`
	FinInstrmId     SecurityIdentification11    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 FinInstrmId"`
	SttlmQty        Quantity6Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SttlmQty"`
	SttlmAmt        AmountAndDirection8         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SttlmAmt,omitempty"`
	TradDt          TradeDate1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 TradDt,omitempty"`
	SttlmDt         SettlementDate2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 SttlmDt"`
	DlvrgSttlmPties SettlementParties2          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties  SettlementParties2          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 RcvgSttlmPties,omitempty"`
	Invstr          PartyIdentification14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 Invstr,omitempty"`
}

type TransactionIdentifications4 struct {
	AcctSvcrTxId      Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 MktInfrstrctrTxId,omitempty"`
	AcctOwnrTxId      References4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.027.001.01 AcctOwnrTxId"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
