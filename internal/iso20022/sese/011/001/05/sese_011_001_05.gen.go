// Code generated by main. DO NOT EDIT.

package sese_011_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference6 struct {
	Ref     Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 Ref"`
	RefIssr PartyIdentification90Choice `xml:"urn:swift:xsd:sese.011.001.05 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 MsgNm,omitempty"`
}

type AdditionalReference7 struct {
	Ref     Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 Ref"`
	RefIssr PartyIdentification97Choice `xml:"urn:swift:xsd:sese.011.001.05 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationPendingStatus7Choice struct {
	Rsn          Max350Text             `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
}

type CancelledStatus13Choice struct {
	NoSpcfdRsn   NoReasonCode               `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
	Rsn          CancelledStatusReason3Code `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	XtndedRsn    Extended350Code            `xml:"urn:swift:xsd:sese.011.001.05 XtndedRsn"`
	DataSrcSchme GenericIdentification1     `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
}

// May be one of CNTA, CNCL, CNIN
type CancelledStatusReason3Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	TrfInstrStsRpt TransferInstructionStatusReportV05 `xml:"urn:swift:xsd:sese.011.001.05 TrfInstrStsRpt"`
}

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:swift:xsd:sese.011.001.05 PlcAndNm"`
	Txt      Max350Text `xml:"urn:swift:xsd:sese.011.001.05 Txt"`
}

type FailedSettlementStatus2Choice struct {
	Rsn          Max350Text             `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:swift:xsd:sese.011.001.05 Id"`
	SchmeNm Max35Text `xml:"urn:swift:xsd:sese.011.001.05 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:swift:xsd:sese.011.001.05 Issr,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:swift:xsd:sese.011.001.05 Id"`
	Issr    Max35Text `xml:"urn:swift:xsd:sese.011.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:swift:xsd:sese.011.001.05 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type InRepairStatus4Choice struct {
	Rsn          Max350Text             `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:swift:xsd:sese.011.001.05 Nm"`
	Dt ISOYearMonth `xml:"urn:swift:xsd:sese.011.001.05 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:swift:xsd:sese.011.001.05 Nb,omitempty"`
}

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:swift:xsd:sese.011.001.05 Id"`
	CreDtTm ISODateTime `xml:"urn:swift:xsd:sese.011.001.05 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:swift:xsd:sese.011.001.05 Nm"`
	Adr PostalAddress1 `xml:"urn:swift:xsd:sese.011.001.05 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type PartyIdentification70Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.011.001.05 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.011.001.05 NmAndAdr"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.011.001.05 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.011.001.05 NmAndAdr"`
}

type PartyIdentification97Choice struct {
	AnyBIC     AnyBICIdentifier       `xml:"urn:swift:xsd:sese.011.001.05 AnyBIC"`
	LglNttyIdr LEIIdentifier          `xml:"urn:swift:xsd:sese.011.001.05 LglNttyIdr"`
	NmAndAdr   NameAndAddress5        `xml:"urn:swift:xsd:sese.011.001.05 NmAndAdr"`
	PrtryId    GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 PrtryId"`
}

type PendingSettlementStatus3Choice struct {
	Rsn          PendingSettlementStatusReason2Code `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	XtndedRsn    Extended350Code                    `xml:"urn:swift:xsd:sese.011.001.05 XtndedRsn"`
	DataSrcSchme GenericIdentification1             `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode                       `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
}

// May be one of AWSH, BLOC, CAIS, CLAC, DOCC, DOCY, IAAD, LACK, LINK, PHCK, PHSE, SBLO, MINF, ACOP, IINV, CINV, AINV, WTRF, USUA, ASTA, AFST, STST, LPRO, ADRQ, ADS1, ADS2, DRJC, CYIN, CYDV, OVER, WCPA, SDUT, TAPR, XCNF, ESCA, NRCP, FVER
type PendingSettlementStatusReason2Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:swift:xsd:sese.011.001.05 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:swift:xsd:sese.011.001.05 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:swift:xsd:sese.011.001.05 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:swift:xsd:sese.011.001.05 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:swift:xsd:sese.011.001.05 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:swift:xsd:sese.011.001.05 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:swift:xsd:sese.011.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:swift:xsd:sese.011.001.05 Ctry"`
}

type References49Choice struct {
	RltdRef []AdditionalReference6 `xml:"urn:swift:xsd:sese.011.001.05 RltdRef"`
	OthrRef []AdditionalReference6 `xml:"urn:swift:xsd:sese.011.001.05 OthrRef"`
}

type RejectedReason15Choice struct {
	Cd    TransferRejectedStatusReason2Code `xml:"urn:swift:xsd:sese.011.001.05 Cd"`
	Prtry GenericIdentification36           `xml:"urn:swift:xsd:sese.011.001.05 Prtry"`
}

type RejectionReason32 struct {
	Rsn         RejectedReason15Choice `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	AddtlRsnInf Max350Text             `xml:"urn:swift:xsd:sese.011.001.05 AddtlRsnInf,omitempty"`
}

type ReversedStatus2Choice struct {
	Rsn          Max350Text             `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
}

type TransferInstructionStatus4 struct {
	Sts TransferStatus4Code `xml:"urn:swift:xsd:sese.011.001.05 Sts"`
	Rsn Max350Text          `xml:"urn:swift:xsd:sese.011.001.05 Rsn,omitempty"`
}

type TransferInstructionStatusReportV05 struct {
	MsgId        MessageIdentification1   `xml:"urn:swift:xsd:sese.011.001.05 MsgId"`
	CtrPtyRef    AdditionalReference7     `xml:"urn:swift:xsd:sese.011.001.05 CtrPtyRef,omitempty"`
	Ref          References49Choice       `xml:"urn:swift:xsd:sese.011.001.05 Ref,omitempty"`
	StsRpt       TransferStatusAndReason4 `xml:"urn:swift:xsd:sese.011.001.05 StsRpt"`
	MktPrctcVrsn MarketPracticeVersion1   `xml:"urn:swift:xsd:sese.011.001.05 MktPrctcVrsn,omitempty"`
	Xtnsn        []Extension1             `xml:"urn:swift:xsd:sese.011.001.05 Xtnsn,omitempty"`
}

// May be one of DDAT, DEPT, DSEC, SECU, ISTP, ICTN, SAFE, IAQD, BLCA, DOCC, IDNA, DLVY, LEGL, NSLA, DQUA, INUK, INID, INAC, INNA, INPM, CYPA, PTNS, FTAX, ISAT, CASH, TREF
type TransferRejectedStatusReason2Code string

type TransferStatus2Choice struct {
	Sts        TransferInstructionStatus4       `xml:"urn:swift:xsd:sese.011.001.05 Sts"`
	PdgSttlm   PendingSettlementStatus3Choice   `xml:"urn:swift:xsd:sese.011.001.05 PdgSttlm"`
	Umtchd     TransferUnmatchedStatus3Choice   `xml:"urn:swift:xsd:sese.011.001.05 Umtchd"`
	InRpr      InRepairStatus4Choice            `xml:"urn:swift:xsd:sese.011.001.05 InRpr"`
	Rjctd      []RejectionReason32              `xml:"urn:swift:xsd:sese.011.001.05 Rjctd"`
	FaildSttlm FailedSettlementStatus2Choice    `xml:"urn:swift:xsd:sese.011.001.05 FaildSttlm"`
	Canc       CancelledStatus13Choice          `xml:"urn:swift:xsd:sese.011.001.05 Canc"`
	Rvsd       ReversedStatus2Choice            `xml:"urn:swift:xsd:sese.011.001.05 Rvsd"`
	CxlPdg     CancellationPendingStatus7Choice `xml:"urn:swift:xsd:sese.011.001.05 CxlPdg"`
}

// May be one of PACK, COSE, MACH, RECE, STNP, SETT, COMP
type TransferStatus4Code string

type TransferStatusAndReason4 struct {
	MstrRef  Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 MstrRef,omitempty"`
	TrfRef   Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 TrfRef"`
	ClntRef  AdditionalReference7        `xml:"urn:swift:xsd:sese.011.001.05 ClntRef,omitempty"`
	CxlRef   Max35Text                   `xml:"urn:swift:xsd:sese.011.001.05 CxlRef,omitempty"`
	TrfSts   TransferStatus2Choice       `xml:"urn:swift:xsd:sese.011.001.05 TrfSts"`
	TradDt   ISODate                     `xml:"urn:swift:xsd:sese.011.001.05 TradDt,omitempty"`
	SndOutDt ISODate                     `xml:"urn:swift:xsd:sese.011.001.05 SndOutDt,omitempty"`
	StsInitr PartyIdentification70Choice `xml:"urn:swift:xsd:sese.011.001.05 StsInitr,omitempty"`
}

// May be one of CMIS, CPCA, DELN, DSEC, PHYS, PODU, DEPT, DDAT, DQUA
type TransferUnmatchedReason2Code string

type TransferUnmatchedStatus3Choice struct {
	NoSpcfdRsn   NoReasonCode                 `xml:"urn:swift:xsd:sese.011.001.05 NoSpcfdRsn"`
	Rsn          TransferUnmatchedReason2Code `xml:"urn:swift:xsd:sese.011.001.05 Rsn"`
	XtndedRsn    Extended350Code              `xml:"urn:swift:xsd:sese.011.001.05 XtndedRsn"`
	DataSrcSchme GenericIdentification1       `xml:"urn:swift:xsd:sese.011.001.05 DataSrcSchme"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
