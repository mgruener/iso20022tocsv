// Code generated by main. DO NOT EDIT.

package sese_011_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentificationAndName6 struct {
	Nm   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nm,omitempty"`
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IBAN,omitempty"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Othr,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalInformation15 struct {
	InfTp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 InfTp"`
	InfVal Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 InfVal"`
}

type AdditionalReference10 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type ApplicableRules1Choice struct {
	Cd    ApplicableRules1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of NPRE, YPRE
type ApplicableRules1Code string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

type BeneficiaryDrawdown1 struct {
	BnfcryTp  BeneficiaryType1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BnfcryTp,omitempty"`
	DthUdrLmt bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DthUdrLmt,omitempty"`
	AddtlInf  []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlInf,omitempty"`
}

type BeneficiaryType1Choice struct {
	Cd    BeneficiaryType1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of DEPE, NOMI, SUCC
type BeneficiaryType1Code string

type BenefitCrystallisationEvent1 struct {
	EvtTp        DrawdownEventType1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 EvtTp,omitempty"`
	EvtNb        Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 EvtNb,omitempty"`
	EvtDt        ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 EvtDt,omitempty"`
	CrstllstnAmt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CrstllstnAmt,omitempty"`
	PctgOfAllwnc float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PctgOfAllwnc,omitempty"`
	AddtlInf     []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlInf,omitempty"`
}

type BranchData2 struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id,omitempty"`
	Nm      Max140Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nm,omitempty"`
	PstlAdr PostalAddress6 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PstlAdr,omitempty"`
}

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

type CancellationPendingStatus7Choice struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
}

type CancelledStatus13Choice struct {
	NoSpcfdRsn   NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
	Rsn          CancelledStatusReason3Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	XtndedRsn    Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 XtndedRsn"`
	DataSrcSchme GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
}

// May be one of CNTA, CNCL, CNIN
type CancelledStatusReason3Code string

type Capped1 struct {
	StartDt       ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StartDt,omitempty"`
	IncmLmtCurPrd ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IncmLmtCurPrd,omitempty"`
	IncmCurPrd    ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IncmCurPrd,omitempty"`
	IncmLmtNxtPrd ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IncmLmtNxtPrd,omitempty"`
	AddtlInf      []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlInf,omitempty"`
}

type ChargeBasis2Choice struct {
	Cd    TaxationBasis5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type ChargeOrCommissionDiscount1 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Bsis,omitempty"`
}

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type Cheque10 struct {
	Nb      Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nb,omitempty"`
	PyeeId  PartyIdentification139               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PyeeId"`
	DrweeId FinancialInstitutionIdentification17 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DrweeId,omitempty"`
	DrwrId  PartyIdentification139               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DrwrId,omitempty"`
}

type ClearingSystemMemberIdentification2Choice struct {
	USCHU       CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USCHU"`
	NZNCC       NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NZNCC"`
	IENSC       IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IENSC"`
	GBSC        UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 GBSC"`
	USCH        CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USCH"`
	CHBC        SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CHBC"`
	USFW        FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USFW"`
	PTNCC       PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PTNCC"`
	RUCB        RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RUCB"`
	ITNCC       ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ITNCC"`
	ATBLZ       AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ATBLZ"`
	CACPA       CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CACPA"`
	CHSIC       SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CHSIC"`
	DEBLZ       GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DEBLZ"`
	ESNCC       SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ESNCC"`
	ZANCC       SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ZANCC"`
	HKNCC       HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 HKNCC"`
	AUBSBx      ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AUBSBx"`
	AUBSBs      SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AUBSBs"`
	INIFSC      IndianFinancialSystemCodeIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 INIFSC"`
	GRHEBIC     HellenicBankIdentificationCodeIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 GRHEBIC"`
	PLKNR       PolishNationalClearingCodeIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PLKNR"`
	OthrClrCdId Max35Text                                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 OthrClrCdId"`
}

type ClearingSystemMemberIdentification4Choice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AUBSBs"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CreditTransfer9 struct {
	Dbtr           PartyIdentification132               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Dbtr,omitempty"`
	DbtrAcct       AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DbtrAcct,omitempty"`
	DbtrAgt        FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DbtrAgt,omitempty"`
	DbtrAgtAcct    AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DbtrAgtAcct,omitempty"`
	IntrmyAgt1     FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IntrmyAgt1,omitempty"`
	IntrmyAgt1Acct AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IntrmyAgt1Acct,omitempty"`
	IntrmyAgt2     FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IntrmyAgt2,omitempty"`
	IntrmyAgt2Acct AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IntrmyAgt2Acct,omitempty"`
	CdtrAgt        FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CdtrAgt"`
	CdtrAgtAcct    AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CdtrAgtAcct,omitempty"`
	Cdtr           PartyIdentification132               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cdtr,omitempty"`
	CdtrAcct       AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CdtrAcct"`
}

type Document struct {
	TrfInstrStsRpt TransferInstructionStatusReportV07 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TrfInstrStsRpt"`
}

type Drawdown1 struct {
	TrchTp                  DrawdownType1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TrchTp"`
	AplblRules              ApplicableRules1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AplblRules,omitempty"`
	PctgOfTtlTrfVal         float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PctgOfTtlTrfVal,omitempty"`
	TtlAmtNetDrwdwn         ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlAmtNetDrwdwn,omitempty"`
	AddtlFndsDsgntd         bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlFndsDsgntd,omitempty"`
	DrwdwnAllwncChck        DrawdownAllowanceCheck1          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DrwdwnAllwncChck,omitempty"`
	PnsnCmcmntLumpSumRmng   ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PnsnCmcmntLumpSumRmng,omitempty"`
	PnsnCmcmntLumpSumDt     ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PnsnCmcmntLumpSumDt,omitempty"`
	MltplPnsnCmcmntLumpSums bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 MltplPnsnCmcmntLumpSums,omitempty"`
	LftmAllwnc              float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 LftmAllwnc,omitempty"`
	RcptOfDrwdwnInd         bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RcptOfDrwdwnInd,omitempty"`
	BnfcryDtls              BeneficiaryDrawdown1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BnfcryDtls,omitempty"`
	CapdLmts                Capped1                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CapdLmts,omitempty"`
	FlxblDrwdwnTrggrdDt     ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 FlxblDrwdwnTrggrdDt,omitempty"`
	AddtlInf                []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlInf,omitempty"`
}

type DrawdownAllowanceCheck1 struct {
	BCEInd  bool       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BCEInd,omitempty"`
	ChckInf Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ChckInf,omitempty"`
}

type DrawdownEventType1Choice struct {
	Cd    DrawdownEventType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of DRAW, UFPL
type DrawdownEventType1Code string

type DrawdownType1Choice struct {
	Cd    DrawdownType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of CAPP, FLEX
type DrawdownType1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

type FailedSettlementStatus2Choice struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
}

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type Fee5 struct {
	Tp           ChargeType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Tp"`
	Bsis         ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Bsis,omitempty"`
	StdAmt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StdAmt,omitempty"`
	StdRate      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StdRate,omitempty"`
	DscntDtls    ChargeOrCommissionDiscount1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DscntDtls,omitempty"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ApldAmt,omitempty"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ApldRate,omitempty"`
	NonStdSLARef Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NonStdSLARef,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RcptId,omitempty"`
	InftvInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 InftvInd"`
}

type FinancialInstitutionIdentification10Choice struct {
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NmAndAdr"`
	BICFI       BICFIDec2014Identifier                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ClrSysMmbId"`
	PrtryId     Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PrtryId"`
}

type FinancialInstitutionIdentification16 struct {
	BICFI       BICFIDec2014Identifier                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BICFI,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ClrSysMmbId,omitempty"`
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NmAndAdr,omitempty"`
	LEI         LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 LEI,omitempty"`
	PrtryId     Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PrtryId,omitempty"`
	BrnchId     BranchData2                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BrnchId,omitempty"`
}

type FinancialInstitutionIdentification17 struct {
	Pty FinancialInstitutionIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Pty"`
	LEI LEIIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 LEI,omitempty"`
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Issr,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SchmeNm,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern GR[0-9]{7,7}
type HellenicBankIdentificationCodeIdentifier string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type InRepairStatus4Choice struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
}

// Must match the pattern IN[a-zA-Z0-9]{11,11}
type IndianFinancialSystemCodeIdentifier string

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Adr,omitempty"`
}

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

// May be one of NORE
type NoReasonCode string

type OtherAmount1 struct {
	Tp  OtherAmountType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Tp"`
	Amt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Amt"`
}

type OtherAmountType1Choice struct {
	Cd      OtherAmountType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	PrtryCd GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PrtryCd"`
}

// May be one of PINT, SINT
type OtherAmountType1Code string

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AnyBIC"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NmAndAdr"`
}

type PartyIdentification132 struct {
	AnyBIC      AnyBICDec2014Identifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AnyBIC,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ClrSysMmbId,omitempty"`
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NmAndAdr,omitempty"`
	PrtryId     GenericIdentification1                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PrtryId,omitempty"`
	LEI         LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 LEI,omitempty"`
}

type PartyIdentification139 struct {
	Pty PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 LEI,omitempty"`
}

type PaymentInstrument15 struct {
	Ref          Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ref,omitempty"`
	Amt          ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Amt"`
	PmtDt        ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PmtDt,omitempty"`
	CshSttlmDtls PaymentInstrument23Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CshSttlmDtls,omitempty"`
}

type PaymentInstrument23Choice struct {
	CdtTrfDtls CreditTransfer9 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CdtTrfDtls,omitempty"`
	ChqDtls    Cheque10        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ChqDtls"`
}

type PendingSettlementStatus3Choice struct {
	Rsn          PendingSettlementStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	XtndedRsn    Extended350Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 XtndedRsn"`
	DataSrcSchme GenericIdentification1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
}

// May be one of AWSH, BLOC, CAIS, CLAC, DOCC, DOCY, IAAD, LACK, LINK, PHCK, PHSE, SBLO, MINF, ACOP, IINV, CINV, AINV, WTRF, USUA, ASTA, AFST, STST, LPRO, ADRQ, ADS1, ADS2, DRJC, CYIN, CYDV, OVER, WCPA, SDUT, TAPR, XCNF, ESCA, NRCP, FVER
type PendingSettlementStatusReason2Code string

// Must match the pattern PL[0-9]{8,8}
type PolishNationalClearingCodeIdentifier string

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ctry"`
}

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AdrLine,omitempty"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Amt"`
}

type References64Choice struct {
	RltdRef []AdditionalReference10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RltdRef"`
	OthrRef []AdditionalReference10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 OthrRef"`
}

type RejectedReason15Choice struct {
	Cd    TransferRejectedStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type RejectionReason32 struct {
	Rsn         RejectedReason15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	AddtlRsnInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AddtlRsnInf,omitempty"`
}

type ReversedStatus2Choice struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

type Tax35 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Tp"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ApldAmt"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ApldRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ctry,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TaxClctnDtls,omitempty"`
}

type TaxBasis1Choice struct {
	Cd    TaxationBasis2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type TaxCalculationInformation10 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TaxblAmt"`
}

// May be one of PROV, NATI, STAT, WITH, KAPA, NKAP, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType17Code string

type TaxType3Choice struct {
	Cd    TaxType17Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type TaxableIncomePerShareCalculated2Choice struct {
	Cd    TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, GRAM, NEAM, NAVP, PERU
type TaxationBasis5Code string

type TotalFeesAndTaxes41 struct {
	TtlOvrhdApld   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlOvrhdApld,omitempty"`
	TtlFees        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlFees,omitempty"`
	TtlTaxs        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlTaxs,omitempty"`
	ComrclAgrmtRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee5                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IndvFee,omitempty"`
	IndvTax        []Tax35                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 IndvTax,omitempty"`
}

type TransferInstructionStatus5 struct {
	Sts TransferStatus6Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Sts"`
	Rsn Max350Text          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn,omitempty"`
}

type TransferInstructionStatusReportV07 struct {
	MsgId        MessageIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 MsgId"`
	CtrPtyRef    AdditionalReference10    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CtrPtyRef,omitempty"`
	Ref          References64Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ref,omitempty"`
	StsRpt       TransferStatusAndReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StsRpt"`
	MktPrctcVrsn MarketPracticeVersion1   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 MktPrctcVrsn,omitempty"`
	Xtnsn        []Extension1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Xtnsn,omitempty"`
}

// May be one of DDAT, DEPT, DSEC, SECU, ISTP, ICTN, SAFE, IAQD, BLCA, DOCC, IDNA, DLVY, LEGL, NSLA, DQUA, INUK, INID, INAC, INNA, INPM, CYPA, PTNS, FTAX, ISAT, CASH, TREF
type TransferRejectedStatusReason2Code string

type TransferStatus3Choice struct {
	Sts        TransferInstructionStatus5       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Sts"`
	PdgSttlm   PendingSettlementStatus3Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PdgSttlm"`
	Umtchd     TransferUnmatchedStatus3Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Umtchd"`
	InRpr      InRepairStatus4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 InRpr"`
	Rjctd      []RejectionReason32              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rjctd"`
	FaildSttlm FailedSettlementStatus2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 FaildSttlm"`
	Canc       CancelledStatus13Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Canc"`
	Rvsd       ReversedStatus2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rvsd"`
	CxlPdg     CancellationPendingStatus7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CxlPdg"`
}

// May be one of PACK, COSE, COMP, DELY, MACH, RECE, STNP, SETT
type TransferStatus6Code string

type TransferStatusAndReason6 struct {
	MstrRef          Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 MstrRef,omitempty"`
	TrfRef           Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TrfRef"`
	ClntRef          AdditionalReference10                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 ClntRef,omitempty"`
	CxlRef           Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CxlRef,omitempty"`
	TrfEvtTp         []TransferStatusType1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TrfEvtTp,omitempty"`
	TrfSts           TransferStatus3Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TrfSts"`
	TradDt           ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TradDt,omitempty"`
	SttlmDt          ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SttlmDt,omitempty"`
	SndOutDt         ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 SndOutDt,omitempty"`
	TtlUnitsNb       float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlUnitsNb,omitempty"`
	AvrgPric         ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AvrgPric,omitempty"`
	UnitsDtls        []Unit11                                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 UnitsDtls,omitempty"`
	TtlTrfVal        ActiveCurrencyAnd13DecimalAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TtlTrfVal,omitempty"`
	PmtDtls          []PaymentInstrument15                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PmtDtls,omitempty"`
	BnftCrstllstnEvt []BenefitCrystallisationEvent1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 BnftCrstllstnEvt,omitempty"`
	DrwdwnTrch       []Drawdown1                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DrwdwnTrch,omitempty"`
	StsInitr         PartyIdentification139                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StsInitr,omitempty"`
	StsIssr          PartyIdentification139                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StsIssr,omitempty"`
	StsRcpt          PartyIdentification139                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 StsRcpt,omitempty"`
}

type TransferStatusType1Choice struct {
	Cd    TransferStatusType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// May be one of S019, BCEV, DRAW, PAYA, S012, S005, S001, SETT
type TransferStatusType1Code string

// May be one of CMIS, CPCA, DELN, DSEC, PHYS, PODU, DEPT, DDAT, DQUA
type TransferUnmatchedReason2Code string

type TransferUnmatchedStatus3Choice struct {
	NoSpcfdRsn   NoReasonCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NoSpcfdRsn"`
	Rsn          TransferUnmatchedReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Rsn"`
	XtndedRsn    Extended350Code              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 XtndedRsn"`
	DataSrcSchme GenericIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 DataSrcSchme"`
}

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type TypeOfPrice46Choice struct {
	Cd    TypeOfPrice10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type Unit11 struct {
	UnitsNb      float64             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 UnitsNb"`
	OrdrDt       ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 OrdrDt,omitempty"`
	AcqstnDt     ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AcqstnDt,omitempty"`
	CertNb       []Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 CertNb,omitempty"`
	Grp1Or2Units UKTaxGroupUnit1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Grp1Or2Units,omitempty"`
	Ref          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Ref,omitempty"`
	PricDtls     UnitPrice23         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PricDtls,omitempty"`
	TxOvrhd      TotalFeesAndTaxes41 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TxOvrhd,omitempty"`
	OthrAmt      []OtherAmount1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 OthrAmt,omitempty"`
}

type UnitPrice23 struct {
	Tp                   TypeOfPrice46Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Tp"`
	Val                  PriceValue1                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Val"`
	PricMtd              PriceMethod1Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 PricMtd,omitempty"`
	AcrdIntrstNAV        ActiveOrHistoricCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 AcrdIntrstNAV,omitempty"`
	NbOfDaysAcrd         float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr      ActiveCurrencyAnd13DecimalAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd TaxableIncomePerShareCalculated2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 TaxblIncmPerShrClctd,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type WaivingInstruction2Choice struct {
	Cd    WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.07 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
