// Code generated by main. DO NOT EDIT.

package sese_011_001_03

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalReference2 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Ref"`
	RefIssr PartyIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 MsgNm,omitempty"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CancellationPendingStatus1 struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
}

type CancelledStatus3 struct {
	NoSpcfdRsn   NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
	Rsn          CancelledStatusReason3Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	XtndedRsn    Extended350Code            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
}

// May be one of CNTA, CNCL, CNIN
type CancelledStatusReason3Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	TrfInstrStsRpt TransferInstructionStatusReportV03 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 TrfInstrStsRpt"`
}

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Txt"`
}

type FailedSettlementStatus1 struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InRepairStatus3 struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
}

type LongPostalAddress1Choice struct {
	Ustrd Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Ustrd"`
	Strd  StructuredLongPostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Strd"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CreDtTm"`
}

type NameAndAddress2 struct {
	Nm  Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Nm"`
	Adr LongPostalAddress1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Adr,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type PartyIdentification1Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PrtryId"`
	NmAndAdr NameAndAddress2        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NmAndAdr"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NmAndAdr"`
}

type PendingSettlementStatus2 struct {
	Rsn          PendingSettlementStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	XtndedRsn    Extended350Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
}

// May be one of AWSH, BLOC, CAIS, CLAC, DOCC, DOCY, IAAD, LACK, LINK, PHCK, PHSE, SBLO, MINF, ACOP, IINV, CINV, AINV, WTRF, USUA, ASTA, AFST, STST, LPRO, ADRQ, ADS1, ADS2, DRJC, CYIN, CYDV, OVER, WCPA, SDUT, TAPR, XCNF, ESCA, NRCP, FVER
type PendingSettlementStatusReason2Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Ctry"`
}

type RejectedStatus8Choice struct {
	Rsn          TransferRejectedStatusReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	XtndedRsn    Extended350Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 XtndedRsn"`
	DataSrcSchme []GenericIdentification1          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
}

type ReversedStatus1 struct {
	Rsn          Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	DataSrcSchme GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
	NoSpcfdRsn   NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
}

type StructuredLongPostalAddress1 struct {
	BldgNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 BldgNm,omitempty"`
	StrtNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 StrtNm,omitempty"`
	StrtBldgId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 StrtBldgId,omitempty"`
	Flr        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Flr,omitempty"`
	TwnNm      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 TwnNm"`
	DstrctNm   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DstrctNm,omitempty"`
	RgnId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 RgnId,omitempty"`
	Stat       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Stat,omitempty"`
	CtyId      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CtyId,omitempty"`
	Ctry       CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Ctry"`
	PstCdId    Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PstCdId"`
	POB        Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 POB,omitempty"`
}

type TransferInstructionStatus2 struct {
	Sts TransferStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Sts"`
	Rsn Max350Text          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn,omitempty"`
}

type TransferInstructionStatusReportV03 struct {
	MsgId     MessageIdentification1   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 MsgId"`
	CtrPtyRef AdditionalReference2     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CtrPtyRef,omitempty"`
	RltdRef   []AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 RltdRef,omitempty"`
	OthrRef   []AdditionalReference3   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 OthrRef,omitempty"`
	StsRpt    TransferStatusAndReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 StsRpt"`
	Xtnsn     []Extension1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Xtnsn,omitempty"`
}

// May be one of DDAT, DEPT, DSEC, SECU, ISTP, ICTN, SAFE, IAQD, BLCA, DOCC, IDNA, DLVY, LEGL, NSLA, DQUA, INUK, INID, INAC, INNA, INPM, CYPA, PTNS, FTAX, ISAT, CASH, TREF
type TransferRejectedStatusReason2Code string

// May be one of PACK, STNP, MACH, COSE, SETT
type TransferStatus2Code string

type TransferStatusAndReason2 struct {
	MstrRef    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 MstrRef,omitempty"`
	TrfRef     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 TrfRef"`
	ClntRef    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 ClntRef,omitempty"`
	CxlRef     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CxlRef,omitempty"`
	Sts        TransferInstructionStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Sts"`
	PdgSttlm   PendingSettlementStatus2   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 PdgSttlm"`
	Umtchd     TransferUnmatchedStatus2   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Umtchd"`
	InRpr      InRepairStatus3            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 InRpr"`
	Rjctd      RejectedStatus8Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rjctd"`
	FaildSttlm FailedSettlementStatus1    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 FaildSttlm"`
	Canc       CancelledStatus3           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Canc"`
	Rvsd       ReversedStatus1            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rvsd"`
	CxlPdg     CancellationPendingStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 CxlPdg"`
	TradDt     ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 TradDt,omitempty"`
	SndOutDt   ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 SndOutDt,omitempty"`
	StsInitr   PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 StsInitr,omitempty"`
}

// May be one of CMIS, CPCA, DELN, DSEC, PHYS, PODU, DEPT, DDAT, DQUA
type TransferUnmatchedReason2Code string

type TransferUnmatchedStatus2 struct {
	NoSpcfdRsn   NoReasonCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 NoSpcfdRsn"`
	Rsn          TransferUnmatchedReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 Rsn"`
	XtndedRsn    Extended350Code              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 XtndedRsn"`
	DataSrcSchme GenericIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.011.001.03 DataSrcSchme"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
