// Code generated by main. DO NOT EDIT.

package sese_019_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account5 struct {
	Id    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id,omitempty"`
	Dsgnt Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Dsgnt,omitempty"`
	Svcr  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Svcr"`
}

type Account6 struct {
	Id    Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id"`
	Dsgnt Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Dsgnt,omitempty"`
	Svcr  PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Svcr,omitempty"`
}

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 DmstIdSrc"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrtryIdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	ReqForPEPOrISAOrPrtflInfV01 RequestForPEPOrISAOrPortfolioInformationV01 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ReqForPEPOrISAOrPrtflInfV01"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Txt"`
}

type FinancialInstrument12 struct {
	Id SecurityIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id"`
	Nm Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Nm,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Issr,omitempty"`
}

// May be one of MINE, MAXI, MINC, ANYI
type ISAType2Code string

type ISAYearsOfIssue2 struct {
	CurYrTp       ISAType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CurYrTp,omitempty"`
	XtndedCurYrTp Extended350Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 XtndedCurYrTp,omitempty"`
	PrvsYrs       PreviousYearChoice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrvsYrs,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Nm"`
	GvnNm         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 IndvInvstrAdr"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type Organisation4 struct {
	Nm            Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Nm"`
	Id            PartyIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Id,omitempty"`
	Purp          Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Purp,omitempty"`
	TaxtnCtry     CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 RegnCtry,omitempty"`
	RegnDt        ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 RegnDt,omitempty"`
	TaxIdNb       Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CorpInvstrAdr"`
}

type PEPISATransfer5 struct {
	MstrRef             Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 MstrRef,omitempty"`
	TrfId               Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 TrfId"`
	ISA                 ISAYearsOfIssue2        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ISA"`
	PEP                 PreviousYearChoice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PEP"`
	Prtfl               Portfolio1              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Prtfl"`
	FinInstrmAsstForTrf []FinancialInstrument12 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 FinInstrmAsstForTrf,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NmAndAdr"`
}

type PartyIdentification4Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 BICOrBEI"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrtryId"`
}

type Portfolio1 struct {
	PrtflInf []Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrtflInf,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Ctry"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYearChoice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 SpcfcPrvsYrs"`
}

// Must be at least 1 items long
type RICIdentifier string

type RequestForPEPOrISAOrPortfolioInformationV01 struct {
	MsgRef           MessageIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 MsgRef"`
	PoolRef          AdditionalReference3       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PoolRef,omitempty"`
	PrvsRef          AdditionalReference3       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PrvsRef,omitempty"`
	RltdRef          AdditionalReference3       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 RltdRef,omitempty"`
	PmryIndvInvstr   IndividualPerson8          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PmryIndvInvstr,omitempty"`
	ScndryIndvInvstr IndividualPerson8          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation4              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation4              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation4            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 OthrCorpInvstr,omitempty"`
	ClntAcct         Account5                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ClntAcct"`
	NmneeAcct        Account6                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NmneeAcct,omitempty"`
	NewPlanMgr       PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 NewPlanMgr"`
	PdctTrf          []PEPISATransfer5          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 PdctTrf"`
	Xtnsn            []Extension1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Xtnsn,omitempty"`
}

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 Cmon"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.019.001.01 OthrPrtryId"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
