// Code generated by main. DO NOT EDIT.

package sese_019_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account19 struct {
	Id    Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 Id,omitempty"`
	Dsgnt Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 Dsgnt,omitempty"`
	Svcr  PartyIdentification70Choice `xml:"urn:swift:xsd:sese.019.001.04 Svcr,omitempty"`
}

type AccountHoldingInformationRequestV04 struct {
	MsgRef           MessageIdentification1         `xml:"urn:swift:xsd:sese.019.001.04 MsgRef"`
	PoolRef          AdditionalReference6           `xml:"urn:swift:xsd:sese.019.001.04 PoolRef,omitempty"`
	PrvsRef          AdditionalReference6           `xml:"urn:swift:xsd:sese.019.001.04 PrvsRef,omitempty"`
	RltdRef          AdditionalReference6           `xml:"urn:swift:xsd:sese.019.001.04 RltdRef,omitempty"`
	BizFlowDrctnTp   BusinessFlowDirectionType1Code `xml:"urn:swift:xsd:sese.019.001.04 BizFlowDrctnTp,omitempty"`
	PmryIndvInvstr   IndividualPerson8              `xml:"urn:swift:xsd:sese.019.001.04 PmryIndvInvstr,omitempty"`
	ScndryIndvInvstr IndividualPerson8              `xml:"urn:swift:xsd:sese.019.001.04 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8            `xml:"urn:swift:xsd:sese.019.001.04 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation21                 `xml:"urn:swift:xsd:sese.019.001.04 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation21                 `xml:"urn:swift:xsd:sese.019.001.04 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation21               `xml:"urn:swift:xsd:sese.019.001.04 OthrCorpInvstr,omitempty"`
	TrfrAcct         Account19                      `xml:"urn:swift:xsd:sese.019.001.04 TrfrAcct"`
	NmneeAcct        Account19                      `xml:"urn:swift:xsd:sese.019.001.04 NmneeAcct,omitempty"`
	Trfee            PartyIdentification70Choice    `xml:"urn:swift:xsd:sese.019.001.04 Trfee"`
	PdctTrf          []ISATransfer27                `xml:"urn:swift:xsd:sese.019.001.04 PdctTrf"`
	MktPrctcVrsn     MarketPracticeVersion1         `xml:"urn:swift:xsd:sese.019.001.04 MktPrctcVrsn,omitempty"`
	Xtnsn            []Extension1                   `xml:"urn:swift:xsd:sese.019.001.04 Xtnsn,omitempty"`
}

type AdditionalReference6 struct {
	Ref     Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 Ref"`
	RefIssr PartyIdentification90Choice `xml:"urn:swift:xsd:sese.019.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of LIQU, NLIQ
type AllOtherCash1Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:swift:xsd:sese.019.001.04 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

// May be one of ADLV, ARCV
type BusinessFlowDirectionType1Code string

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrentYearType2Choice struct {
	CurYrTp       ISAType2Code    `xml:"urn:swift:xsd:sese.019.001.04 CurYrTp"`
	XtndedCurYrTp Extended350Code `xml:"urn:swift:xsd:sese.019.001.04 XtndedCurYrTp"`
}

type Document struct {
	AcctHldgInfReq AccountHoldingInformationRequestV04 `xml:"urn:swift:xsd:sese.019.001.04 AcctHldgInfReq"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:swift:xsd:sese.019.001.04 PlcAndNm"`
	Txt      Max350Text `xml:"urn:swift:xsd:sese.019.001.04 Txt"`
}

type FinancialInstrument50 struct {
	Id          SecurityIdentification23Choice `xml:"urn:swift:xsd:sese.019.001.04 Id"`
	Nm          Max350Text                     `xml:"urn:swift:xsd:sese.019.001.04 Nm,omitempty"`
	ShrtNm      Max35Text                      `xml:"urn:swift:xsd:sese.019.001.04 ShrtNm,omitempty"`
	TrfeeAcct   Account19                      `xml:"urn:swift:xsd:sese.019.001.04 TrfeeAcct,omitempty"`
	SubAcctDtls SubAccount5                    `xml:"urn:swift:xsd:sese.019.001.04 SubAcctDtls,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:swift:xsd:sese.019.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:swift:xsd:sese.019.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:swift:xsd:sese.019.001.04 Issr,omitempty"`
}

type ISAPortfolio3Choice struct {
	ISA   ISAYearsOfIssue6 `xml:"urn:swift:xsd:sese.019.001.04 ISA"`
	Prtfl Portfolio1       `xml:"urn:swift:xsd:sese.019.001.04 Prtfl"`
}

type ISATransfer27 struct {
	MstrRef             Max35Text               `xml:"urn:swift:xsd:sese.019.001.04 MstrRef,omitempty"`
	TrfId               Max35Text               `xml:"urn:swift:xsd:sese.019.001.04 TrfId"`
	Prtfl               ISAPortfolio3Choice     `xml:"urn:swift:xsd:sese.019.001.04 Prtfl,omitempty"`
	AllOthrCsh          AllOtherCash1Code       `xml:"urn:swift:xsd:sese.019.001.04 AllOthrCsh,omitempty"`
	FinInstrmAsstForTrf []FinancialInstrument50 `xml:"urn:swift:xsd:sese.019.001.04 FinInstrmAsstForTrf,omitempty"`
}

// May be one of MINE, MAXI, MINC, ANYI
type ISAType2Code string

type ISAYearsOfIssue6 struct {
	CurYr   CurrentYearType2Choice `xml:"urn:swift:xsd:sese.019.001.04 CurYr,omitempty"`
	PrvsYrs PreviousYearChoice     `xml:"urn:swift:xsd:sese.019.001.04 PrvsYrs,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:swift:xsd:sese.019.001.04 Dmst"`
	Prtry Max35Text   `xml:"urn:swift:xsd:sese.019.001.04 Prtry"`
}

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:swift:xsd:sese.019.001.04 Nm"`
	GvnNm         Max35Text       `xml:"urn:swift:xsd:sese.019.001.04 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:swift:xsd:sese.019.001.04 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:swift:xsd:sese.019.001.04 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:swift:xsd:sese.019.001.04 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:swift:xsd:sese.019.001.04 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:swift:xsd:sese.019.001.04 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:swift:xsd:sese.019.001.04 IndvInvstrAdr"`
}

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:swift:xsd:sese.019.001.04 Nm"`
	Dt ISOYearMonth `xml:"urn:swift:xsd:sese.019.001.04 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:swift:xsd:sese.019.001.04 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:swift:xsd:sese.019.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:swift:xsd:sese.019.001.04 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:swift:xsd:sese.019.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:swift:xsd:sese.019.001.04 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type Organisation21 struct {
	Nm            Max140Text                  `xml:"urn:swift:xsd:sese.019.001.04 Nm"`
	Id            PartyIdentification72Choice `xml:"urn:swift:xsd:sese.019.001.04 Id,omitempty"`
	Purp          Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 Purp,omitempty"`
	TaxtnCtry     CountryCode                 `xml:"urn:swift:xsd:sese.019.001.04 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode                 `xml:"urn:swift:xsd:sese.019.001.04 RegnCtry,omitempty"`
	RegnDt        ISODate                     `xml:"urn:swift:xsd:sese.019.001.04 RegnDt,omitempty"`
	TaxIdNb       Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text                   `xml:"urn:swift:xsd:sese.019.001.04 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1              `xml:"urn:swift:xsd:sese.019.001.04 CorpInvstrAdr"`
}

type PartyIdentification70Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.019.001.04 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.019.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.019.001.04 NmAndAdr"`
}

type PartyIdentification72Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:swift:xsd:sese.019.001.04 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:swift:xsd:sese.019.001.04 PrtryId"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.019.001.04 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.019.001.04 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.019.001.04 NmAndAdr"`
}

type Portfolio1 struct {
	PrtflInf []Max350Text `xml:"urn:swift:xsd:sese.019.001.04 PrtflInf,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:swift:xsd:sese.019.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:swift:xsd:sese.019.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:swift:xsd:sese.019.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:swift:xsd:sese.019.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:swift:xsd:sese.019.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:swift:xsd:sese.019.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:swift:xsd:sese.019.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:swift:xsd:sese.019.001.04 Ctry"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYearChoice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:swift:xsd:sese.019.001.04 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:swift:xsd:sese.019.001.04 SpcfcPrvsYrs"`
}

// Must be at least 1 items long
type RICIdentifier string

type SecurityIdentification23Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:swift:xsd:sese.019.001.04 ISIN"`
	SEDOL       string                                `xml:"urn:swift:xsd:sese.019.001.04 SEDOL"`
	CUSIP       string                                `xml:"urn:swift:xsd:sese.019.001.04 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:swift:xsd:sese.019.001.04 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:swift:xsd:sese.019.001.04 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:swift:xsd:sese.019.001.04 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:swift:xsd:sese.019.001.04 CTA"`
	QUICK       string                                `xml:"urn:swift:xsd:sese.019.001.04 QUICK"`
	Wrtppr      string                                `xml:"urn:swift:xsd:sese.019.001.04 Wrtppr"`
	Dtch        string                                `xml:"urn:swift:xsd:sese.019.001.04 Dtch"`
	Vlrn        string                                `xml:"urn:swift:xsd:sese.019.001.04 Vlrn"`
	SCVM        string                                `xml:"urn:swift:xsd:sese.019.001.04 SCVM"`
	Belgn       string                                `xml:"urn:swift:xsd:sese.019.001.04 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:swift:xsd:sese.019.001.04 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:swift:xsd:sese.019.001.04 OthrPrtryId"`
}

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:swift:xsd:sese.019.001.04 Id"`
	Nm    Max35Text `xml:"urn:swift:xsd:sese.019.001.04 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:swift:xsd:sese.019.001.04 Chrtc,omitempty"`
}

// Must be at least 1 items long
type TickerIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
