// Code generated by main. DO NOT EDIT.

package sese_024_001_06

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcknowledgedAcceptedStatus7Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []AcknowledgementReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type AcknowledgementReason3 struct {
	Cd          AcknowledgementReason4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type AcknowledgementReason4Choice struct {
	Cd    AcknowledgementReason5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of ADEA, SMPG, OTHR, CDCY, CDRG, CDRE, NSTP, RQWV, LATE
type AcknowledgementReason5Code string

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AmountAndDirection8 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CdtDbtInd"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 OrgnlCcyAndOrdrdAmt,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type BeneficialOwnership1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type BlockTrade1Choice struct {
	Cd    BlockTrade1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of BLPA, BLCH
type BlockTrade1Code string

type CancellationReason12Choice struct {
	Cd    CancelledStatusReason13Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type CancellationReason5 struct {
	Cd          CancellationReason12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type CancellationStatus7Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []CancellationReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

// May be one of CANI, CANS, CSUB, CXLR, CANT, CANZ, CORP, SCEX, OTHR, CTHP
type CancelledStatusReason13Code string

type CashSettlementSystem1Choice struct {
	Cd    CashSettlementSystem2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of GROS, NETS
type CashSettlementSystem2Code string

type CentralCounterPartyEligibility1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 DtTm"`
}

// May be one of VARI
type DateType3Code string

// May be one of OPEN, UKWN
type DateType4Code string

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	SctiesSttlmTxStsAdvc SecuritiesSettlementTransactionStatusAdviceV06 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SctiesSttlmTxStsAdvc"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type ExposureType10Choice struct {
	Cd    ExposureType4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of BFWD, PAYM, CCPC, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQPT, EXTD, EQUS, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, REPO, RVPO, SLOA, SBSC, SCRP, SLEB, SHSL, SCIR, SCIE, SWPT, TBAS, TRCP
type ExposureType4Code string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of AWMO, BYIY, CLAT, ADEA, CANR, CAIS, OBJT, AWSH, PHSE, STCD, DOCY, MLAT, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CDLR, CSDH, CVAL, INBC
type FailingReason2Code string

type FailingReason3 struct {
	Cd          FailingReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type FailingReason3Choice struct {
	Cd    FailingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type FailingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []FailingReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AmtsdVal"`
}

type GenericIdentification19 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SchmeNm,omitempty"`
}

type GenericIdentification20 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SchmeNm,omitempty"`
}

type GenericIdentification21 struct {
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id,omitempty"`
}

type HoldIndicator4 struct {
	Ind bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Rsn []RegistrationReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type LetterOfGuarantee1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MarketClientSide1Choice struct {
	Cd    MarketClientSideCode    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of MAKT, CLNT
type MarketClientSideCode string

type MarketIdentification1Choice struct {
	MktIdrCd MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 MktIdrCd"`
	Desc     Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Desc"`
}

type MarketIdentification78 struct {
	Id MarketIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id,omitempty"`
	Tp MarketType3Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Tp"`
}

// May be one of PRIM, SECM, OTCO, VARI, EXCH
type MarketType2Code string

type MarketType3Choice struct {
	Cd    MarketType2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type MatchingStatus19Choice struct {
	Mtchd  ProprietaryReason1          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Mtchd"`
	Umtchd UnmatchedStatus12Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Umtchd"`
	Prtry  ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Adr,omitempty"`
}

type NettingEligibility1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of NORE
type NoReasonCode string

type OriginalAndCurrentQuantities1 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AmtsdVal"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Tp"`
}

// May be one of A144, NRST, RSTR
type OwnershipLegalRestrictions1Code string

type PartyIdentification36Choice struct {
	AnyBIC  AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AnyBIC"`
	PrtryId GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtryId"`
}

type PartyIdentification37Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AnyBIC"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NmAndAdr"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ctry"`
}

type PartyIdentification44Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AnyBIC"`
	NmAndAdr NameAndAddress5  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NmAndAdr"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ctry"`
}

type PartyIdentification45Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AnyBIC"`
	PrtryId  GenericIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NmAndAdr"`
}

type PartyIdentification46 struct {
	Id     PartyIdentification44Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	PrcgId Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrcgId,omitempty"`
}

type PartyIdentificationAndAccount44 struct {
	Id        PartyIdentification45Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	SfkpgAcct SecuritiesAccount13         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SfkpgAcct,omitempty"`
	PrcgId    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrcgId,omitempty"`
}

// May be one of ADEA, CAIS, DOCY, NOFX, BLOC, MUNO, GLOB, YCOL, COLL, FLIM, NEXT, LACK, LALO, MONY, MINO, OTHR, DENO, LIQU, CERT, CSDH, CVAL, CDEL, CDLR, CDAC, INBC
type PendingProcessingReason2Code string

type PendingProcessingReason3 struct {
	Cd          PendingProcessingReason3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type PendingProcessingReason3Choice struct {
	Cd    PendingProcessingReason2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type PendingProcessingStatus3Choice struct {
	NoSpcfdRsn NoReasonCode               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []PendingProcessingReason3 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type PendingReason13Choice struct {
	Cd    PendingReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type PendingReason2 struct {
	Cd          PendingReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type PendingReason2Choice struct {
	Cd    PendingReason6Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of AWMO, ADEA, CAIS, REFU, AWSH, PHSE, TAMM, DOCY, DOCC, BLOC, CHAS, NEWI, CLAC, MUNO, GLOB, PREA, PART, NMAS, NOFX, CMON, YCOL, COLL, DEPO, FLIM, INCA, LINK, FUTU, LACK, LALO, MONY, NCON, REFS, SDUT, BATC, CYCL, SBLO, CPEC, MINO, IAAD, OTHR, PHCK, BENO, BOTH, CLHT, DENO, DISA, DKNY, FROZ, LAAW, LATE, LIQU, PRCY, REGT, SETS, CERT, PRSY, CSDH, CVAL, CDLR, INBC
type PendingReason2Code string

type PendingReason5 struct {
	Cd          PendingReason13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

// May be one of ADEA, CONF, OTHR, CDRG, CDCY, CDRE
type PendingReason6Code string

type PendingStatus13Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []PendingReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type PendingStatus9Choice struct {
	NoSpcfdRsn NoReasonCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []PendingReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ctry"`
}

type ProcessingStatus37Choice struct {
	AckdAccptd AcknowledgedAcceptedStatus7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AckdAccptd"`
	PdgPrcg    PendingProcessingStatus3Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PdgPrcg"`
	Rjctd      RejectionStatus13Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rjctd"`
	Rpr        RepairStatus5Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rpr"`
	Canc       CancellationStatus7Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Canc"`
	PdgCxl     PendingStatus13Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PdgCxl"`
	Prtry      ProprietaryStatusAndReason1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
	CxlReqd    ProprietaryReason1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CxlReqd"`
	ModReqd    ProprietaryReason1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 ModReqd"`
}

type ProprietaryReason1 struct {
	Rsn         GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason1 struct {
	PrtrySts GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtrySts"`
	PrtryRsn []ProprietaryReason1    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtryRsn,omitempty"`
}

type Quantity6Choice struct {
	Qty             FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Qty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 OrgnlAndCurFace"`
}

// May be one of DELI, RECE
type ReceiveDelivery1Code string

type Registration1Choice struct {
	Cd    Registration1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of NREG, YREG
type Registration1Code string

// May be one of PTYH, CSDH, CDEL, CVAL
type Registration2Code string

type Registration7Choice struct {
	Cd    Registration2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type RegistrationReason3 struct {
	Cd       Registration7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlInf Max210Text          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlInf,omitempty"`
}

type RejectionReason14Choice struct {
	Cd    RejectionReason37Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type RejectionReason17 struct {
	Cd          RejectionReason14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

// May be one of SAFE, DQUA, ADEA, DSEC, LATE, CASH, DDEA, DTRD, PLCE, RTGS, NCRR, PHYS, REFE, DMON, MINO, BATC, MUNO, TXST, SETS, IIND, CAEV, CASY, DDAT, SETR, SDUT, INPS, OTHR, ICUS, ICAG, DEPT, IEXE, INVB, INVL, INVN, VALR, INVE, PLIS
type RejectionReason37Code string

type RejectionStatus13Choice struct {
	NoSpcfdRsn NoReasonCode        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []RejectionReason17 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type RepairReason1 struct {
	Cd          RepairReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type RepairReason1Choice struct {
	Cd    RepairReason4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of BATC, CAEV, CASH, CASY, DDAT, DDEA, DMON, DQUA, DSEC, DTRD, IIND, MINO, MUNO, NCRR, PHYS, PLCE, REFE, RTGS, SAFE, SETR, SETS, TXST, INPS, SDUT, OTHR, IEXE, ICAG, DEPT, ICUS
type RepairReason4Code string

type RepairStatus5Choice struct {
	NoSpcfdRsn NoReasonCode    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []RepairReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type RepurchaseType3Choice struct {
	Cd    RepurchaseType3Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of CADJ, CALL, PAIR, RATE, ROLP, TOPU, WTHD, PADJ
type RepurchaseType3Code string

type Restriction1Choice struct {
	Cd    OwnershipLegalRestrictions1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat3Choice struct {
	Id      SafekeepingPlaceTypeAndText3             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ctry"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TpAndId"`
	Prtry   GenericIdentification21                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
}

type SafekeepingPlaceTypeAndText3 struct {
	SfkpgPlcTp SafekeepingPlace3Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id,omitempty"`
}

type SecuritiesAccount13 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Id"`
	Tp GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Nm,omitempty"`
}

type SecuritiesRTGS1Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Ind"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SecuritiesSettlementTransactionStatusAdviceV06 struct {
	TxId          TransactionIdentifications16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TxId"`
	PrcgSts       ProcessingStatus37Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrcgSts,omitempty"`
	IfrrdMtchgSts MatchingStatus19Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 IfrrdMtchgSts,omitempty"`
	MtchgSts      MatchingStatus19Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 MtchgSts,omitempty"`
	SttlmSts      SettlementStatus7Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmSts,omitempty"`
	TxDtls        TransactionDetails70         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TxDtls,omitempty"`
	SplmtryData   []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SplmtryData,omitempty"`
}

// May be one of CNCB, BSBK, COLI, COLO, CONV, FCTA, INSP, ISSU, MKDW, MKUP, NETT, NSYN, OWNE, OWNI, PAIR, PLAC, PORT, REAL, REDI, REDM, RELE, REPU, RODE, RVPO, SBBK, SBRE, SECB, SECL, SLRE, SUBS, SYND, TBAC, TRAD, TRPO, TRVO, TURN, CORP, CLAI, AUTO, ETFT
type SecuritiesTransactionType7Code string

type SecuritiesTransactionType9Choice struct {
	Cd    SecuritiesTransactionType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Desc,omitempty"`
}

type SettlementDate2Choice struct {
	Dt   DateAndDateTimeChoice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Dt"`
	DtCd SettlementDateCode2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 DtCd"`
}

type SettlementDateCode2Choice struct {
	Cd    DateType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SettlementDetails69 struct {
	HldInd         HoldIndicator4                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 HldInd,omitempty"`
	SttlmTxCond    []SettlementTransactionCondition12Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmTxCond,omitempty"`
	SctiesTxTp     SecuritiesTransactionType9Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SctiesTxTp"`
	SttlgCpcty     SettlingCapacity4Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlgCpcty,omitempty"`
	StmpDtyTaxBsis GenericIdentification20                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 StmpDtyTaxBsis,omitempty"`
	SctiesRTGS     SecuritiesRTGS1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SctiesRTGS,omitempty"`
	Regn           Registration1Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Regn,omitempty"`
	BnfclOwnrsh    BeneficialOwnership1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 BnfclOwnrsh,omitempty"`
	XpsrTp         ExposureType10Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 XpsrTp,omitempty"`
	CshClrSys      CashSettlementSystem1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CshClrSys,omitempty"`
	TaxCpcty       TaxCapacityParty1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TaxCpcty,omitempty"`
	RpTp           RepurchaseType3Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 RpTp,omitempty"`
	MktClntSd      MarketClientSide1Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 MktClntSd,omitempty"`
	BlckTrad       BlockTrade1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 BlckTrad,omitempty"`
	LglRstrctns    Restriction1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 LglRstrctns,omitempty"`
	SttlmSysMtd    SettlementSystemMethod1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmSysMtd,omitempty"`
	NetgElgblty    NettingEligibility1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NetgElgblty,omitempty"`
	CCPElgblty     CentralCounterPartyEligibility1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CCPElgblty,omitempty"`
	LttrOfGrnt     LetterOfGuarantee1Choice                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 LttrOfGrnt,omitempty"`
	PrtlSttlmInd   SettlementTransactionCondition5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrtlSttlmInd,omitempty"`
	ElgblForColl   bool                                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 ElgblForColl,omitempty"`
}

type SettlementParties13 struct {
	Dpstry PartyIdentification46           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount44 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pty5,omitempty"`
}

type SettlementStatus7Choice struct {
	Pdg   PendingStatus9Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pdg"`
	Flng  FailingStatus3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Flng"`
	Prtry ProprietaryStatusAndReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SettlementSystemMethod1Choice struct {
	Cd    SettlementSystemMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of NSET, YSET
type SettlementSystemMethod1Code string

type SettlementTransactionCondition12Choice struct {
	Cd    SettlementTransactionCondition8Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of PART, NPAR, PARC, PARQ
type SettlementTransactionCondition5Code string

// May be one of ASGN, BUTC, CLEN, DIRT, DLWM, DRAW, EXER, FRCL, KNOC, PHYS, RESI, SHOR, SPDL, SPST, EXPI, PENS, UNEX, TRIP, NOMC, TRAN, RHYP, ADEA, RPTO
type SettlementTransactionCondition8Code string

// May be one of SAGE, CUST, SPRI, RISP
type SettlingCapacity2Code string

type SettlingCapacity4Choice struct {
	Cd    SettlingCapacity2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxCapacityParty1Choice struct {
	Cd    TaxLiability1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of PRIN, AGEN
type TaxLiability1Code string

type TradeDate1Choice struct {
	Dt   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Dt"`
	DtCd TradeDateCode1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 DtCd"`
}

type TradeDateCode1Choice struct {
	Cd    DateType3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

type TransactionDetails70 struct {
	TradId                  []Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TradId,omitempty"`
	PoolId                  Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PoolId,omitempty"`
	CorpActnEvtId           Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CorpActnEvtId,omitempty"`
	TrptyAgtCollTxId        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TrptyAgtCollTxId,omitempty"`
	ClntTrptyCollTxId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 ClntTrptyCollTxId,omitempty"`
	ClntCollInstrId         Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 ClntCollInstrId,omitempty"`
	TrptyCollInstrId        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TrptyCollInstrId,omitempty"`
	AcctOwnr                PartyIdentification36Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AcctOwnr,omitempty"`
	SfkpgAcct               SecuritiesAccount13           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SfkpgAcct"`
	SfkpgPlc                SafekeepingPlaceFormat3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SfkpgPlc,omitempty"`
	PlcOfTrad               MarketIdentification78        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PlcOfTrad,omitempty"`
	PlcOfClr                AnyBICIdentifier              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PlcOfClr,omitempty"`
	FinInstrmId             SecurityIdentification14      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 FinInstrmId"`
	SttlmQty                Quantity6Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmQty"`
	SttlmAmt                AmountAndDirection8           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmAmt,omitempty"`
	LateDlvryDt             DateAndDateTimeChoice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 LateDlvryDt,omitempty"`
	XpctdSttlmDt            DateAndDateTimeChoice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 XpctdSttlmDt,omitempty"`
	XpctdValDt              DateAndDateTimeChoice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 XpctdValDt,omitempty"`
	SttlmDt                 SettlementDate2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmDt"`
	TradDt                  TradeDate1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 TradDt,omitempty"`
	SctiesMvmntTp           ReceiveDelivery1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SctiesMvmntTp"`
	Pmt                     DeliveryReceiptType2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Pmt"`
	SttlmParams             SettlementDetails69           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmParams"`
	RcvgSttlmPties          SettlementParties13           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 RcvgSttlmPties,omitempty"`
	DlvrgSttlmPties         SettlementParties13           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 DlvrgSttlmPties,omitempty"`
	Invstr                  PartyIdentification37Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Invstr,omitempty"`
	QlfdFrgnIntrmy          PartyIdentification45Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 QlfdFrgnIntrmy,omitempty"`
	SttlmInstrPrcgAddtlDtls Max350Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 SttlmInstrPrcgAddtlDtls,omitempty"`
}

type TransactionIdentifications16 struct {
	AcctOwnrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AcctOwnrTxId"`
	AcctSvcrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 PrcrTxId,omitempty"`
	CmonId            Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 CmonId,omitempty"`
	NetgSvcPrvdrId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NetgSvcPrvdrId,omitempty"`
}

type UnmatchedReason11 struct {
	Cd          UnmatchedReason14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 AddtlRsnInf,omitempty"`
}

type UnmatchedReason14Choice struct {
	Cd    UnmatchedReason8Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Cd"`
	Prtry GenericIdentification20 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Prtry"`
}

// May be one of CMIS, DDAT, DELN, DEPT, DMON, DDEA, DQUA, ADEA, SETR, SETS, DSEC, DTRA, CLAT, PHYS, IIND, FRAP, PLCE, PODU, REGD, RTGS, ICAG, CPCA, IEXE, NCRR, LEOG, NMAS, SAFE, DTRD, LATE, TXST, ICUS, OTHR, MIME, UNBR, INPS, ACRU, INVE, PLIS
type UnmatchedReason8Code string

type UnmatchedStatus12Choice struct {
	NoSpcfdRsn NoReasonCode        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 NoSpcfdRsn"`
	Rsn        []UnmatchedReason11 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.024.001.06 Rsn"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
