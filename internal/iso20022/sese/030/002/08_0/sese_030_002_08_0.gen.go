// Code generated by main. DO NOT EDIT.

package sese_030_002_08_0

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AdditionalInformation17 struct {
	AcctOwnrTxId  RestrictedFINXMax16Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AcctOwnrTxId,omitempty"`
	ClssfctnTp    ClassificationType33Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 ClssfctnTp,omitempty"`
	SfkpgAcct     SecuritiesAccount30                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SfkpgAcct,omitempty"`
	FinInstrmId   SecurityIdentification20            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 FinInstrmId,omitempty"`
	Qty           FinancialInstrumentQuantity15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Qty,omitempty"`
	FctvDt        DateAndDateTime2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 FctvDt,omitempty"`
	XpryDt        DateAndDateTime2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 XpryDt,omitempty"`
	CutOffDt      DateAndDateTime2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 CutOffDt,omitempty"`
	Invstr        PartyIdentification157              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Invstr,omitempty"`
	DlvrgPty1     PartyIdentificationAndAccount190    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 DlvrgPty1,omitempty"`
	RcvgPty1      PartyIdentificationAndAccount190    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 RcvgPty1,omitempty"`
	TxSbjtToBuyIn bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 TxSbjtToBuyIn,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// May be one of LAMI, NBOR, YBOR, RTRN
type AutoBorrowing2Code string

type AutomaticBorrowing11Choice struct {
	Cd    AutoBorrowing2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

type ClassificationType33Choice struct {
	ClssfctnFinInstrm CFIOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 ClssfctnFinInstrm"`
	AltrnClssfctn     GenericIdentification86 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AltrnClssfctn"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 DtTm"`
}

type Document struct {
	SctiesSttlmCondsModReq SecuritiesSettlementConditionsModificationRequest002V08 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SctiesSttlmCondsModReq"`
}

type DocumentNumber16Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 ShrtNb"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 LngNb"`
	PrtryNb GenericIdentification163          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrtryNb"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{4}
type Exact4NumericText string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity15Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Unit"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AmtsdVal"`
}

type GenericIdentification163 struct {
	Id      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Issr    Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Issr"`
	SchmeNm Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SchmeNm,omitempty"`
}

type GenericIdentification86 struct {
	Id      RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SchmeNm,omitempty"`
}

type HoldIndicator7 struct {
	Ind bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Ind"`
	Rsn []RegistrationReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Rsn,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be one of LINK, UNLK, SOFT
type LinkageType1Code string

type LinkageType4Choice struct {
	Cd    LinkageType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

type Linkages56 struct {
	PrcgPos ProcessingPosition18Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrcgPos,omitempty"`
	MsgNb   DocumentNumber16Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 MsgNb,omitempty"`
	Ref     References66Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Ref"`
	RefOwnr PartyIdentification136Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 RefOwnr,omitempty"`
}

type MatchingDenied4Choice struct {
	Cd    MatchingProcess1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

// May be one of UNMT, MTRE
type MatchingProcess1Code string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress12 struct {
	Nm RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Nm"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Tp"`
}

type PartyIdentification136Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AnyBIC"`
	PrtryId GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrtryId"`
}

type PartyIdentification137Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AnyBIC"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrtryId"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 NmAndAdr"`
}

type PartyIdentification156 struct {
	Id  PartyIdentification136Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 LEI,omitempty"`
}

type PartyIdentification157 struct {
	Id  PartyIdentification137Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 LEI,omitempty"`
}

type PartyIdentificationAndAccount190 struct {
	Id        PartyIdentification137Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	LEI       LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 LEI,omitempty"`
	SfkpgAcct SecuritiesAccount30          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SfkpgAcct,omitempty"`
	PrcgId    RestrictedFINXMax16Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrcgId,omitempty"`
}

type PriorityNumeric5Choice struct {
	Nmrc  Exact4NumericText       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Nmrc"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

type ProcessingPosition18Choice struct {
	Cd    ProcessingPosition4Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

// May be one of AFTE, BEFO, WITH
type ProcessingPosition4Code string

type References24 struct {
	AcctOwnrTxId      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AcctOwnrTxId,omitempty"`
	AcctSvcrTxId      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AcctSvcrTxId,omitempty"`
	MktInfrstrctrTxId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrcrTxId,omitempty"`
	PoolId            RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PoolId,omitempty"`
	CmonId            RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 CmonId,omitempty"`
	TradId            RestrictedFINXMax52Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 TradId,omitempty"`
}

type References66Choice struct {
	SctiesSttlmTxId   RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SctiesSttlmTxId"`
	IntraPosMvmntId   RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 IntraPosMvmntId"`
	IntraBalMvmntId   RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 IntraBalMvmntId"`
	AcctSvcrTxId      RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AcctSvcrTxId"`
	MktInfrstrctrTxId RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 MktInfrstrctrTxId"`
	PoolId            RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PoolId"`
	CmonId            RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 CmonId"`
	TradId            RestrictedFINXMax52Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 TradId"`
	OthrTxId          RestrictedFINXMax16Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 OthrTxId"`
}

type Registration12Choice struct {
	Cd    Registration2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

// May be one of PTYH, CSDH, CDEL, CVAL
type Registration2Code string

type RegistrationReason6 struct {
	Cd       Registration12Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	AddtlInf RestrictedFINXMax210Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AddtlInf,omitempty"`
}

type RequestDetails21 struct {
	Ref          References24                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Ref"`
	RstrctnRef   []RestrictionIdentification2        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 RstrctnRef,omitempty"`
	AutomtcBrrwg AutomaticBorrowing11Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AutomtcBrrwg,omitempty"`
	RtnInd       bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 RtnInd,omitempty"`
	Lkg          LinkageType4Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Lkg,omitempty"`
	Prty         PriorityNumeric5Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prty,omitempty"`
	OthrPrcg     []GenericIdentification47           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 OthrPrcg,omitempty"`
	PrtlSttlmInd SettlementTransactionCondition5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PrtlSttlmInd,omitempty"`
	SctiesRTGS   SecuritiesRTGS5Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SctiesRTGS,omitempty"`
	HldInd       HoldIndicator7                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 HldInd,omitempty"`
	MtchgDnl     MatchingDenied4Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 MtchgDnl,omitempty"`
	UnltrlSplt   UnilateralSplit4Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 UnltrlSplt,omitempty"`
	Lnkgs        []Linkages56                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Lnkgs,omitempty"`
}

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,210}
type RestrictedFINXMax210Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,52}
type RestrictedFINXMax52Text string

type RestrictionIdentification2 struct {
	Cd RestrictionReference1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Id RestrictedFINXMax16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
}

// May be one of ADDC, ADDS, REMC, REMS
type RestrictionReference1Code string

type SecuritiesAccount30 struct {
	Id RestrictedFINXMax35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Id"`
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Nm,omitempty"`
}

type SecuritiesRTGS5Choice struct {
	Ind   bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Ind"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

type SecuritiesSettlementConditionsModificationRequest002V08 struct {
	AcctOwnr    PartyIdentification156    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AcctOwnr,omitempty"`
	SfkpgAcct   SecuritiesAccount30       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SfkpgAcct"`
	ReqDtls     []RequestDetails21        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 ReqDtls"`
	AddtlInf    []AdditionalInformation17 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 AddtlInf,omitempty"`
	SplmtryData []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 SplmtryData,omitempty"`
}

// May be one of TRAD
type SecuritiesTransactionType5Code string

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Desc,omitempty"`
}

// May be one of PART, NPAR, PARC, PARQ
type SettlementTransactionCondition5Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type UnilateralSplit4Choice struct {
	Cd    SecuritiesTransactionType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Cd"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.030.002.08 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
