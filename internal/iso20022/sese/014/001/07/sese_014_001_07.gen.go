// Code generated by main. DO NOT EDIT.

package sese_014_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account19 struct {
	Id    Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Id,omitempty"`
	Dsgnt Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Dsgnt,omitempty"`
	Svcr  PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 Svcr,omitempty"`
}

type Account20 struct {
	Id       Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Id,omitempty"`
	AcctSvcr PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 AcctSvcr"`
}

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:swift:xsd:sese.014.001.07 IBAN"`
	Othr GenericAccountIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 Othr"`
}

type AccountIdentificationAndName5 struct {
	Id AccountIdentification4Choice `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	Nm Max35Text                    `xml:"urn:swift:xsd:sese.014.001.07 Nm,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:swift:xsd:sese.014.001.07 Cd"`
	Prtry Max35Text                          `xml:"urn:swift:xsd:sese.014.001.07 Prtry"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference6 struct {
	Ref     Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Ref"`
	RefIssr PartyIdentification90Choice `xml:"urn:swift:xsd:sese.014.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 MsgNm,omitempty"`
}

type AdditionalReference7 struct {
	Ref     Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Ref"`
	RefIssr PartyIdentification97Choice `xml:"urn:swift:xsd:sese.014.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of LIQU, NLIQ
type AllOtherCash1Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:swift:xsd:sese.014.001.07 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICFIIdentifier string

// Must be at least 1 items long
type BloombergIdentifier string

// May be one of SLDP, SLRP, DLPR
type BusinessFlowType1Code string

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

type Cancellation11Choice struct {
	CxlByTrfInstrDtls ISATransfer24      `xml:"urn:swift:xsd:sese.014.001.07 CxlByTrfInstrDtls"`
	CxlByRef          TransferReference7 `xml:"urn:swift:xsd:sese.014.001.07 CxlByRef"`
}

type CashAccount34 struct {
	Id       AccountIdentificationAndName5             `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	AcctSvcr FinancialInstitutionIdentification7Choice `xml:"urn:swift:xsd:sese.014.001.07 AcctSvcr,omitempty"`
}

type ClearingSystemMemberIdentificationChoice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:swift:xsd:sese.014.001.07 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:swift:xsd:sese.014.001.07 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:swift:xsd:sese.014.001.07 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:swift:xsd:sese.014.001.07 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:swift:xsd:sese.014.001.07 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:swift:xsd:sese.014.001.07 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:swift:xsd:sese.014.001.07 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:swift:xsd:sese.014.001.07 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:swift:xsd:sese.014.001.07 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:swift:xsd:sese.014.001.07 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:swift:xsd:sese.014.001.07 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:swift:xsd:sese.014.001.07 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:swift:xsd:sese.014.001.07 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:swift:xsd:sese.014.001.07 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:swift:xsd:sese.014.001.07 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:swift:xsd:sese.014.001.07 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:swift:xsd:sese.014.001.07 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:swift:xsd:sese.014.001.07 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:swift:xsd:sese.014.001.07 AUBSBs"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:swift:xsd:sese.014.001.07 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:swift:xsd:sese.014.001.07 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:swift:xsd:sese.014.001.07 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:swift:xsd:sese.014.001.07 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:swift:xsd:sese.014.001.07 EmailAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrentYearType1Choice struct {
	CurYrTp       ISAType1Code    `xml:"urn:swift:xsd:sese.014.001.07 CurYrTp"`
	XtndedCurYrTp Extended350Code `xml:"urn:swift:xsd:sese.014.001.07 XtndedCurYrTp"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:swift:xsd:sese.014.001.07 Dt"`
	DtTm ISODateTime `xml:"urn:swift:xsd:sese.014.001.07 DtTm"`
}

type DateFormat1Choice struct {
	Dt   ISODate             `xml:"urn:swift:xsd:sese.014.001.07 Dt"`
	Cd   SettlementDate1Code `xml:"urn:swift:xsd:sese.014.001.07 Cd"`
	DtTm ISODateTime         `xml:"urn:swift:xsd:sese.014.001.07 DtTm"`
}

type Document struct {
	PrtflTrfCxlReq PortfolioTransferCancellationRequestV07 `xml:"urn:swift:xsd:sese.014.001.07 PrtflTrfCxlReq"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:swift:xsd:sese.014.001.07 PlcAndNm"`
	Txt      Max350Text `xml:"urn:swift:xsd:sese.014.001.07 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type FinancialInstitutionIdentification7Choice struct {
	NmAndAdr    NameAndAddress5                          `xml:"urn:swift:xsd:sese.014.001.07 NmAndAdr"`
	BICFI       BICFIIdentifier                          `xml:"urn:swift:xsd:sese.014.001.07 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentificationChoice `xml:"urn:swift:xsd:sese.014.001.07 ClrSysMmbId"`
	PrtryId     SimpleIdentificationInformation4         `xml:"urn:swift:xsd:sese.014.001.07 PrtryId"`
}

type FinancialInstrument46 struct {
	Id                   SecurityIdentification23Choice    `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	Nm                   Max350Text                        `xml:"urn:swift:xsd:sese.014.001.07 Nm,omitempty"`
	ShrtNm               Max35Text                         `xml:"urn:swift:xsd:sese.014.001.07 ShrtNm,omitempty"`
	TrfTp                TransferType1Code                 `xml:"urn:swift:xsd:sese.014.001.07 TrfTp"`
	Qty                  Quantity12Choice                  `xml:"urn:swift:xsd:sese.014.001.07 Qty,omitempty"`
	AvrgAcqstnPric       ActiveOrHistoricCurrencyAndAmount `xml:"urn:swift:xsd:sese.014.001.07 AvrgAcqstnPric,omitempty"`
	TrfCcy               ActiveOrHistoricCurrencyCode      `xml:"urn:swift:xsd:sese.014.001.07 TrfCcy,omitempty"`
	TtlBookVal           ActiveOrHistoricCurrencyAndAmount `xml:"urn:swift:xsd:sese.014.001.07 TtlBookVal,omitempty"`
	TrfeeAcct            Account19                         `xml:"urn:swift:xsd:sese.014.001.07 TrfeeAcct,omitempty"`
	SubAcctDtls          SubAccount5                       `xml:"urn:swift:xsd:sese.014.001.07 SubAcctDtls,omitempty"`
	SttlmPtiesRcvgSdDtls ReceivingPartiesAndAccount14      `xml:"urn:swift:xsd:sese.014.001.07 SttlmPtiesRcvgSdDtls,omitempty"`
	DlvrgAgtDtls         PartyIdentificationAndAccount125  `xml:"urn:swift:xsd:sese.014.001.07 DlvrgAgtDtls,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:swift:xsd:sese.014.001.07 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:swift:xsd:sese.014.001.07 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:swift:xsd:sese.014.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Issr,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:swift:xsd:sese.014.001.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:swift:xsd:sese.014.001.07 SchmeNm,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

type ISAPortfolio1Choice struct {
	ISA   ISAYearsOfIssue4 `xml:"urn:swift:xsd:sese.014.001.07 ISA"`
	Prtfl Portfolio1       `xml:"urn:swift:xsd:sese.014.001.07 Prtfl"`
}

type ISATransfer22 struct {
	MstrRef             Max35Text               `xml:"urn:swift:xsd:sese.014.001.07 MstrRef,omitempty"`
	TrfId               Max35Text               `xml:"urn:swift:xsd:sese.014.001.07 TrfId"`
	TrfConfId           Max35Text               `xml:"urn:swift:xsd:sese.014.001.07 TrfConfId,omitempty"`
	ClntRef             AdditionalReference7    `xml:"urn:swift:xsd:sese.014.001.07 ClntRef,omitempty"`
	CtrPtyRef           AdditionalReference7    `xml:"urn:swift:xsd:sese.014.001.07 CtrPtyRef,omitempty"`
	BizFlowTp           BusinessFlowType1Code   `xml:"urn:swift:xsd:sese.014.001.07 BizFlowTp,omitempty"`
	ReqdTrfDt           DateFormat1Choice       `xml:"urn:swift:xsd:sese.014.001.07 ReqdTrfDt,omitempty"`
	Prtfl               ISAPortfolio1Choice     `xml:"urn:swift:xsd:sese.014.001.07 Prtfl,omitempty"`
	RsdlCsh             ResidualCash1Code       `xml:"urn:swift:xsd:sese.014.001.07 RsdlCsh,omitempty"`
	AllOthrCsh          AllOtherCash1Code       `xml:"urn:swift:xsd:sese.014.001.07 AllOthrCsh,omitempty"`
	FinInstrmAsstForTrf []FinancialInstrument46 `xml:"urn:swift:xsd:sese.014.001.07 FinInstrmAsstForTrf,omitempty"`
}

type ISATransfer24 struct {
	PmryIndvInvstr   IndividualPerson8           `xml:"urn:swift:xsd:sese.014.001.07 PmryIndvInvstr,omitempty"`
	ScndryIndvInvstr IndividualPerson8           `xml:"urn:swift:xsd:sese.014.001.07 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8         `xml:"urn:swift:xsd:sese.014.001.07 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation21              `xml:"urn:swift:xsd:sese.014.001.07 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation21              `xml:"urn:swift:xsd:sese.014.001.07 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation21            `xml:"urn:swift:xsd:sese.014.001.07 OthrCorpInvstr,omitempty"`
	TrfrAcct         Account19                   `xml:"urn:swift:xsd:sese.014.001.07 TrfrAcct"`
	NmneeAcct        Account19                   `xml:"urn:swift:xsd:sese.014.001.07 NmneeAcct,omitempty"`
	Trfee            PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 Trfee"`
	IntrmyInf        []Intermediary34            `xml:"urn:swift:xsd:sese.014.001.07 IntrmyInf,omitempty"`
	CshAcct          CashAccount34               `xml:"urn:swift:xsd:sese.014.001.07 CshAcct,omitempty"`
	PdctTrfAndRef    ISATransfer25               `xml:"urn:swift:xsd:sese.014.001.07 PdctTrfAndRef"`
	Xtnsn            []Extension1                `xml:"urn:swift:xsd:sese.014.001.07 Xtnsn,omitempty"`
}

type ISATransfer25 struct {
	CxlRef  Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 CxlRef,omitempty"`
	PdctTrf []ISATransfer22 `xml:"urn:swift:xsd:sese.014.001.07 PdctTrf"`
}

// May be one of MINE, MAXI, MINC
type ISAType1Code string

type ISAYearsOfIssue4 struct {
	CurYr          CurrentYearType1Choice   `xml:"urn:swift:xsd:sese.014.001.07 CurYr,omitempty"`
	CshCmpntInd    bool                     `xml:"urn:swift:xsd:sese.014.001.07 CshCmpntInd"`
	PrvsYrs        PreviousYear2            `xml:"urn:swift:xsd:sese.014.001.07 PrvsYrs,omitempty"`
	CurYrSbcptDtls SubscriptionInformation1 `xml:"urn:swift:xsd:sese.014.001.07 CurYrSbcptDtls,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:swift:xsd:sese.014.001.07 Dmst"`
	Prtry Max35Text   `xml:"urn:swift:xsd:sese.014.001.07 Prtry"`
}

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 Nm"`
	GvnNm         Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:swift:xsd:sese.014.001.07 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:swift:xsd:sese.014.001.07 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:swift:xsd:sese.014.001.07 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:swift:xsd:sese.014.001.07 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:swift:xsd:sese.014.001.07 IndvInvstrAdr"`
}

type Intermediary34 struct {
	Id       PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	Acct     Account20                   `xml:"urn:swift:xsd:sese.014.001.07 Acct,omitempty"`
	Role     Role4Choice                 `xml:"urn:swift:xsd:sese.014.001.07 Role,omitempty"`
	CtctPrsn ContactIdentification2      `xml:"urn:swift:xsd:sese.014.001.07 CtctPrsn,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:swift:xsd:sese.014.001.07 Nm"`
	Dt ISOYearMonth `xml:"urn:swift:xsd:sese.014.001.07 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:swift:xsd:sese.014.001.07 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	CreDtTm ISODateTime `xml:"urn:swift:xsd:sese.014.001.07 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:swift:xsd:sese.014.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:swift:xsd:sese.014.001.07 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type Organisation21 struct {
	Nm            Max140Text                  `xml:"urn:swift:xsd:sese.014.001.07 Nm"`
	Id            PartyIdentification72Choice `xml:"urn:swift:xsd:sese.014.001.07 Id,omitempty"`
	Purp          Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 Purp,omitempty"`
	TaxtnCtry     CountryCode                 `xml:"urn:swift:xsd:sese.014.001.07 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode                 `xml:"urn:swift:xsd:sese.014.001.07 RegnCtry,omitempty"`
	RegnDt        ISODate                     `xml:"urn:swift:xsd:sese.014.001.07 RegnDt,omitempty"`
	TaxIdNb       Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1              `xml:"urn:swift:xsd:sese.014.001.07 CorpInvstrAdr"`
}

type PartyIdentification70Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.014.001.07 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.014.001.07 NmAndAdr"`
}

type PartyIdentification72Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:swift:xsd:sese.014.001.07 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 PrtryId"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:swift:xsd:sese.014.001.07 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:sese.014.001.07 NmAndAdr"`
}

type PartyIdentification97 struct {
	PtyId    PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 PtyId"`
	PrcgRef  Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 PrcgRef,omitempty"`
	PrcgDt   DateAndDateTimeChoice       `xml:"urn:swift:xsd:sese.014.001.07 PrcgDt,omitempty"`
	CtctPrsn ContactIdentification2      `xml:"urn:swift:xsd:sese.014.001.07 CtctPrsn,omitempty"`
}

type PartyIdentification97Choice struct {
	AnyBIC     AnyBICIdentifier       `xml:"urn:swift:xsd:sese.014.001.07 AnyBIC"`
	LglNttyIdr LEIIdentifier          `xml:"urn:swift:xsd:sese.014.001.07 LglNttyIdr"`
	NmAndAdr   NameAndAddress5        `xml:"urn:swift:xsd:sese.014.001.07 NmAndAdr"`
	PrtryId    GenericIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 PrtryId"`
}

type PartyIdentificationAndAccount123 struct {
	PtyId       PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 PtyId"`
	AcctId      Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 AcctId,omitempty"`
	PrcgRef     Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 PrcgRef,omitempty"`
	PrcgDt      DateAndDateTimeChoice       `xml:"urn:swift:xsd:sese.014.001.07 PrcgDt,omitempty"`
	SubAcctDtls SubAccount5                 `xml:"urn:swift:xsd:sese.014.001.07 SubAcctDtls,omitempty"`
	CtctPrsn    ContactIdentification2      `xml:"urn:swift:xsd:sese.014.001.07 CtctPrsn,omitempty"`
}

type PartyIdentificationAndAccount124 struct {
	PtyId   PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 PtyId"`
	AcctId  Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 AcctId,omitempty"`
	PrcgRef Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 PrcgRef,omitempty"`
	PrcgDt  DateAndDateTimeChoice       `xml:"urn:swift:xsd:sese.014.001.07 PrcgDt,omitempty"`
}

type PartyIdentificationAndAccount125 struct {
	PtyId      PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 PtyId,omitempty"`
	AcctId     Max35Text                   `xml:"urn:swift:xsd:sese.014.001.07 AcctId,omitempty"`
	PlcOfSttlm PartyIdentification70Choice `xml:"urn:swift:xsd:sese.014.001.07 PlcOfSttlm"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type Portfolio1 struct {
	PrtflInf []Max350Text `xml:"urn:swift:xsd:sese.014.001.07 PrtflInf,omitempty"`
}

type PortfolioTransferCancellationRequestV07 struct {
	MsgRef       MessageIdentification1 `xml:"urn:swift:xsd:sese.014.001.07 MsgRef"`
	PoolRef      AdditionalReference6   `xml:"urn:swift:xsd:sese.014.001.07 PoolRef,omitempty"`
	PrvsRef      AdditionalReference6   `xml:"urn:swift:xsd:sese.014.001.07 PrvsRef,omitempty"`
	RltdRef      AdditionalReference6   `xml:"urn:swift:xsd:sese.014.001.07 RltdRef,omitempty"`
	Cxl          Cancellation11Choice   `xml:"urn:swift:xsd:sese.014.001.07 Cxl"`
	MktPrctcVrsn MarketPracticeVersion1 `xml:"urn:swift:xsd:sese.014.001.07 MktPrctcVrsn,omitempty"`
}

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:swift:xsd:sese.014.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:swift:xsd:sese.014.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:swift:xsd:sese.014.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:swift:xsd:sese.014.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:swift:xsd:sese.014.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:swift:xsd:sese.014.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:swift:xsd:sese.014.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:swift:xsd:sese.014.001.07 Ctry"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYear1Choice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:swift:xsd:sese.014.001.07 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:swift:xsd:sese.014.001.07 SpcfcPrvsYrs"`
}

type PreviousYear2 struct {
	PrvsYrs     PreviousYear1Choice `xml:"urn:swift:xsd:sese.014.001.07 PrvsYrs"`
	CshCmpntInd bool                `xml:"urn:swift:xsd:sese.014.001.07 CshCmpntInd"`
}

type Quantity12Choice struct {
	Unit     float64 `xml:"urn:swift:xsd:sese.014.001.07 Unit,omitempty"`
	PctgRate float64 `xml:"urn:swift:xsd:sese.014.001.07 PctgRate,omitempty"`
}

// Must be at least 1 items long
type RICIdentifier string

type ReceivingPartiesAndAccount14 struct {
	RcvrsCtdnDtls    PartyIdentificationAndAccount124 `xml:"urn:swift:xsd:sese.014.001.07 RcvrsCtdnDtls,omitempty"`
	RcvrsIntrmy1Dtls PartyIdentificationAndAccount124 `xml:"urn:swift:xsd:sese.014.001.07 RcvrsIntrmy1Dtls,omitempty"`
	RcvrsIntrmy2Dtls PartyIdentificationAndAccount124 `xml:"urn:swift:xsd:sese.014.001.07 RcvrsIntrmy2Dtls,omitempty"`
	RcvgAgtDtls      PartyIdentificationAndAccount123 `xml:"urn:swift:xsd:sese.014.001.07 RcvgAgtDtls"`
	SctiesSttlmSys   Max35Text                        `xml:"urn:swift:xsd:sese.014.001.07 SctiesSttlmSys,omitempty"`
	PlcOfSttlmDtls   PartyIdentification97            `xml:"urn:swift:xsd:sese.014.001.07 PlcOfSttlmDtls,omitempty"`
}

// May be one of NRCT, RCTR
type ResidualCash1Code string

type Role4Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:swift:xsd:sese.014.001.07 Cd"`
	Prtry GenericIdentification47 `xml:"urn:swift:xsd:sese.014.001.07 Prtry"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

type SecurityIdentification23Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:swift:xsd:sese.014.001.07 ISIN"`
	SEDOL       string                                `xml:"urn:swift:xsd:sese.014.001.07 SEDOL"`
	CUSIP       string                                `xml:"urn:swift:xsd:sese.014.001.07 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:swift:xsd:sese.014.001.07 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:swift:xsd:sese.014.001.07 TckrSymb"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:swift:xsd:sese.014.001.07 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:swift:xsd:sese.014.001.07 CTA"`
	QUICK       string                                `xml:"urn:swift:xsd:sese.014.001.07 QUICK"`
	Wrtppr      string                                `xml:"urn:swift:xsd:sese.014.001.07 Wrtppr"`
	Dtch        string                                `xml:"urn:swift:xsd:sese.014.001.07 Dtch"`
	Vlrn        string                                `xml:"urn:swift:xsd:sese.014.001.07 Vlrn"`
	SCVM        string                                `xml:"urn:swift:xsd:sese.014.001.07 SCVM"`
	Belgn       string                                `xml:"urn:swift:xsd:sese.014.001.07 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:swift:xsd:sese.014.001.07 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:swift:xsd:sese.014.001.07 OthrPrtryId"`
}

// May be one of ASAP, ENDC, WHIF
type SettlementDate1Code string

type SimpleIdentificationInformation4 struct {
	Id Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Id"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Id"`
	Nm    Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:swift:xsd:sese.014.001.07 Chrtc,omitempty"`
}

type SubscriptionInformation1 struct {
	DtOfFrstSbcpt ISODate                 `xml:"urn:swift:xsd:sese.014.001.07 DtOfFrstSbcpt"`
	EqtyCmpnt     ActiveCurrencyAndAmount `xml:"urn:swift:xsd:sese.014.001.07 EqtyCmpnt,omitempty"`
	CshCmpnt      ActiveCurrencyAndAmount `xml:"urn:swift:xsd:sese.014.001.07 CshCmpnt,omitempty"`
	TtlAmtYrToDt  ActiveCurrencyAndAmount `xml:"urn:swift:xsd:sese.014.001.07 TtlAmtYrToDt"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

// Must be at least 1 items long
type TickerIdentifier string

type TransferReference7 struct {
	MstrRef Max35Text            `xml:"urn:swift:xsd:sese.014.001.07 MstrRef,omitempty"`
	TrfRefs []TransferReference8 `xml:"urn:swift:xsd:sese.014.001.07 TrfRefs"`
}

type TransferReference8 struct {
	TrfRef     Max35Text `xml:"urn:swift:xsd:sese.014.001.07 TrfRef"`
	CxlRef     Max35Text `xml:"urn:swift:xsd:sese.014.001.07 CxlRef,omitempty"`
	TrfConfRef Max35Text `xml:"urn:swift:xsd:sese.014.001.07 TrfConfRef,omitempty"`
}

// May be one of SECU, CASH
type TransferType1Code string

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
