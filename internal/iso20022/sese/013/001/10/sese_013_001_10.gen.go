// Code generated by main. DO NOT EDIT.

package sese_013_001_10

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account27 struct {
	Id       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
	AcctSvcr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcctSvcr"`
}

type Account28 struct {
	OwnrId      PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OwnrId,omitempty"`
	AcctId      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcctId,omitempty"`
	Dsgnt       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dsgnt,omitempty"`
	AcctNm      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcctNm,omitempty"`
	Svcr        PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Svcr,omitempty"`
	SubAcctDtls SubAccount5            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SubAcctDtls,omitempty"`
}

type AccountIdentificationAndName6 struct {
	Nm   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IBAN,omitempty"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Othr,omitempty"`
}

// May be one of BOWN, CORP, CUST, ENTR, EURE, PART, TRUS, GOVO, JOIT, COMO, JOIN, LLCO, LIPA, NOMI, NFPO, ONIS, OWNR, RGIC, SIGL, UNCO, USUF
type AccountOwnershipType6Code string

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalInformation15 struct {
	InfTp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InfTp"`
	InfVal Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InfVal"`
}

type AdditionalReference10 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MsgNm,omitempty"`
}

type AdditionalReference11 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AllOtherCash1 struct {
	Ind bool               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ind"`
	Ccy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ccy,omitempty"`
}

type AlternatePartyIdentification7 struct {
	IdTp    IdentificationType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AltrnId"`
}

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IdSrc"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

type BonusWithdrawal2 struct {
	TpOfAmt  TypeOfAmount1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TpOfAmt"`
	Amt      ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt,omitempty"`
	Rsn      WithdrawalReason1Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Rsn,omitempty"`
	UclmdAmt ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UclmdAmt,omitempty"`
	Outsdng  bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Outsdng,omitempty"`
	Ref      Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref,omitempty"`
	AddtlInf []AdditionalInformation15                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type BranchData2 struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
	Nm      Max140Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	PstlAdr PostalAddress6 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PstlAdr,omitempty"`
}

// May be one of SLDP, SLRP, DLPR
type BusinessFlowType1Code string

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

type CashAll1 struct {
	Ind bool               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ind"`
	Ccy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ccy,omitempty"`
}

type CashAsset3 struct {
	CshAsstTp CashAssetType1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshAsstTp"`
	HldgCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 HldgCcy"`
	TrfCcy    ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfCcy,omitempty"`
	AddtlInf  AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type CashAssetType1Choice struct {
	Cd    CashAssetType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of CSH2, CSH1
type CashAssetType1Code string

type ChargeBasis2Choice struct {
	Cd    TaxationBasis5Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type ChargeOrCommissionDiscount1 struct {
	Amt  ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt,omitempty"`
	Rate float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Rate,omitempty"`
	Bsis WaivingInstruction2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Bsis,omitempty"`
}

type ChargeType5Choice struct {
	Cd    InvestmentFundFee1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type ClassificationType32Choice struct {
	ClssfctnFinInstrm CFIOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClssfctnFinInstrm"`
	AltrnClssfctn     GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AltrnClssfctn"`
}

type ClearingSystemMemberIdentification2Choice struct {
	USCHU       CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USCHU"`
	NZNCC       NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NZNCC"`
	IENSC       IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IENSC"`
	GBSC        UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GBSC"`
	USCH        CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USCH"`
	CHBC        SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CHBC"`
	USFW        FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USFW"`
	PTNCC       PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PTNCC"`
	RUCB        RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RUCB"`
	ITNCC       ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ITNCC"`
	ATBLZ       AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ATBLZ"`
	CACPA       CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CACPA"`
	CHSIC       SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CHSIC"`
	DEBLZ       GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DEBLZ"`
	ESNCC       SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ESNCC"`
	ZANCC       SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ZANCC"`
	HKNCC       HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 HKNCC"`
	AUBSBx      ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AUBSBx"`
	AUBSBs      SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AUBSBs"`
	INIFSC      IndianFinancialSystemCodeIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 INIFSC"`
	GRHEBIC     HellenicBankIdentificationCodeIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GRHEBIC"`
	PLKNR       PolishNationalClearingCodeIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PLKNR"`
	OthrClrCdId Max35Text                                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrClrCdId"`
}

type ClearingSystemMemberIdentification4Choice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AUBSBs"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 EmailAdr,omitempty"`
}

type Conversion1 struct {
	TrgtScty FinancialInstrumentIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrgtScty"`
	AddtlInf []AdditionalInformation15          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CreditTransfer9 struct {
	Dbtr           PartyIdentification132               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dbtr,omitempty"`
	DbtrAcct       AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DbtrAcct,omitempty"`
	DbtrAgt        FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DbtrAgt,omitempty"`
	DbtrAgtAcct    AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DbtrAgtAcct,omitempty"`
	IntrmyAgt1     FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IntrmyAgt1,omitempty"`
	IntrmyAgt1Acct AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IntrmyAgt1Acct,omitempty"`
	IntrmyAgt2     FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IntrmyAgt2,omitempty"`
	IntrmyAgt2Acct AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IntrmyAgt2Acct,omitempty"`
	CdtrAgt        FinancialInstitutionIdentification16 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CdtrAgt"`
	CdtrAgtAcct    AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CdtrAgtAcct,omitempty"`
	Cdtr           PartyIdentification132               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cdtr,omitempty"`
	CdtrAcct       AccountIdentificationAndName6        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CdtrAcct"`
}

type Crystallisation2 struct {
	TrchId           Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrchId"`
	CrstllsdUnitsNb  float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CrstllsdUnitsNb,omitempty"`
	UcrstllsdUnitsNb float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UcrstllsdUnitsNb,omitempty"`
	CrstllsdAmt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CrstllsdAmt,omitempty"`
	UcrstllsdAmt     ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UcrstllsdAmt,omitempty"`
	AddtlInf         []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type DateAndAmount2 struct {
	Dt  ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dt,omitempty"`
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DtTm"`
}

type DateQuarter1Choice struct {
	Dt  ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dt"`
	Prd Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prd"`
}

type Document struct {
	PrtflTrfConf PortfolioTransferConfirmationV10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtflTrfConf"`
}

type DrawdownStatus1Choice struct {
	Cd    DrawdownStatus1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of FULL, NONE, PART
type DrawdownStatus1Code string

type DrawdownType2Choice struct {
	Cd    DrawdownType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of BOTH, CAPP, FLEX
type DrawdownType2Code string

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type Fee5 struct {
	Tp           ChargeType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Bsis         ChargeBasis2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Bsis,omitempty"`
	StdAmt       ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 StdAmt,omitempty"`
	StdRate      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 StdRate,omitempty"`
	DscntDtls    ChargeOrCommissionDiscount1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DscntDtls,omitempty"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ApldAmt,omitempty"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ApldRate,omitempty"`
	NonStdSLARef Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NonStdSLARef,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RcptId,omitempty"`
	InftvInd     bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InftvInd"`
}

type FinancialInstitutionIdentification16 struct {
	BICFI       BICFIDec2014Identifier                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BICFI,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClrSysMmbId,omitempty"`
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmAndAdr,omitempty"`
	LEI         LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
	PrtryId     Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryId,omitempty"`
	BrnchId     BranchData2                               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BrnchId,omitempty"`
}

type FinancialInstrument63Choice struct {
	Scty     FinancialInstrumentIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Scty"`
	CshAsst  CashAsset3                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshAsst"`
	OthrAsst OtherAsset2                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrAsst"`
}

type FinancialInstrument83 struct {
	LineId         Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LineId,omitempty"`
	Instrm         FinancialInstrument63Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Instrm"`
	Qty            Quantity47                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Qty,omitempty"`
	PrtlInstdQty   bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtlInstdQty,omitempty"`
	OrgnlPctgInstd float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OrgnlPctgInstd,omitempty"`
	TrfTp          TransferType2Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfTp"`
	AddtlAsst      bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlAsst,omitempty"`
	NotAvlbl       bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NotAvlbl,omitempty"`
	Convs          Conversion1                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Convs,omitempty"`
	UnitsDtls      []Unit11                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UnitsDtls,omitempty"`
	ClntRef        AdditionalReference10            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClntRef,omitempty"`
	CtrPtyRef      AdditionalReference10            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CtrPtyRef,omitempty"`
	BizFlowTp      BusinessFlowType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BizFlowTp,omitempty"`
	AvrgAcqstnPric ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AvrgAcqstnPric,omitempty"`
	TrfCcy         ActiveOrHistoricCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfCcy,omitempty"`
	TtlBookVal     DateAndAmount2                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlBookVal,omitempty"`
	OrgnlCost      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OrgnlCost,omitempty"`
	LatstValtn     DateAndAmount2                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LatstValtn,omitempty"`
	TrfeeAcct      Account28                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfeeAcct,omitempty"`
	Trfr           Account28                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Trfr,omitempty"`
	IntrmyInf      []Intermediary43                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IntrmyInf,omitempty"`
	ReqdTradDt     ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ReqdTradDt,omitempty"`
	ReqdSttlmDt    ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ReqdSttlmDt,omitempty"`
	FctvTrfDt      DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 FctvTrfDt,omitempty"`
	FctvSttlmDt    DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 FctvSttlmDt,omitempty"`
	PmtDtls        PaymentInstrument14              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PmtDtls,omitempty"`
	CrstllstnDtls  []Crystallisation2               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CrstllstnDtls,omitempty"`
	TaxValtnPt     Tax36                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxValtnPt,omitempty"`
	SttlmPtiesDtls FundSettlementParameters17       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SttlmPtiesDtls,omitempty"`
	AddtlInf       []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type FinancialInstrumentIdentification1 struct {
	Id     SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Nm     Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	ShrtNm Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ShrtNm,omitempty"`
}

type FinancialInstrumentIdentification2 struct {
	Id         SecurityIdentification25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Nm         Max350Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	ShrtNm     Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ShrtNm,omitempty"`
	ClssfctnTp ClassificationType32Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClssfctnTp,omitempty"`
}

type FundPortfolio5Choice struct {
	TaxEffcntPdct TaxEfficientProduct5 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxEffcntPdct"`
	GnlInvstmt    GeneralInvestment2   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GnlInvstmt"`
	Pnsn          Pension3             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pnsn"`
}

type FundSettlementParameters17 struct {
	SfkpgPlc         SafekeepingPlaceFormat28Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SfkpgPlc,omitempty"`
	TradTxCond       []TradeTransactionCondition8Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TradTxCond,omitempty"`
	SttlmTxCond      []SettlementTransactionCondition30Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SttlmTxCond,omitempty"`
	SctiesSttlmSysId Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SctiesSttlmSysId,omitempty"`
	RcvgSdDtls       SettlementParties94                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RcvgSdDtls,omitempty"`
	DlvrgSdDtls      SettlementParties94                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DlvrgSdDtls,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GeneralInvestment2 struct {
	Tp            GeneralInvestmentAccountType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp,omitempty"`
	OwnrshTp      AccountOwnershipType6Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OwnrshTp,omitempty"`
	CurInvstmtAmt ActiveCurrencyAnd13DecimalAmount    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CurInvstmtAmt,omitempty"`
	EstmtdVal     DateAndAmount2                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 EstmtdVal,omitempty"`
	AddtlInf      []AdditionalInformation15           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type GeneralInvestmentAccountType2Choice struct {
	Cd    GeneralInvestmentAccountType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of ANYY, EQUI
type GeneralInvestmentAccountType2Code string

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern GR[0-9]{7,7}
type HellenicBankIdentificationCodeIdentifier string

// May be one of TFEE, TFOR
type HolderType1Code string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type IdentificationType42Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// Must match the pattern IN[a-zA-Z0-9]{11,11}
type IndianFinancialSystemCodeIdentifier string

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm"`
	GvnNm         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IndvInvstrAdr"`
}

type InnovativeFinance1 struct {
	Tp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Inf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Inf"`
}

type Intermediary43 struct {
	Id       PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Acct     Account27              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Acct,omitempty"`
	Role     Role4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Role,omitempty"`
	CtctPrsn ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CtctPrsn,omitempty"`
}

type InvestmentAccount69 struct {
	Id     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
	Dsgnt  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dsgnt,omitempty"`
	AcctNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcctNm,omitempty"`
	Svcr   PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Svcr,omitempty"`
}

// May be one of BEND, BRKF, COMM, CDPL, CDSC, CBCH, DLEV, FEND, INIT, ADDF, POST, PREM, CHAR, SHIP, SWIT, UCIC, REGF, PENA
type InvestmentFundFee1Code string

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LumpSumType1Choice struct {
	Cd    LumpSumType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of DEAB, PCLS, UFPL
type LumpSumType1Code string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CreDtTm"`
}

type MoneyPurchaseAnnualAllowance1 struct {
	Trggrd   bool    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Trggrd"`
	TrggrdDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrggrdDt,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type Organisation36 struct {
	Nm            Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm"`
	Id            PartyIdentification140 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
	Purp          Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Purp,omitempty"`
	TaxtnCtry     CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegnCtry,omitempty"`
	RegnDt        ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegnDt,omitempty"`
	TaxIdNb       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CorpInvstrAdr"`
}

type OtherAmount1 struct {
	Tp  OtherAmountType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Amt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt"`
}

type OtherAmount3 struct {
	Tp  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Amt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt"`
}

type OtherAmountType1Choice struct {
	Cd      OtherAmountType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	PrtryCd GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryCd"`
}

// May be one of PINT, SINT
type OtherAmountType1Code string

type OtherAsset2 struct {
	OthrAsstTp OtherAsset2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrAsstTp"`
	Id         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Nm         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	Desc       Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Desc,omitempty"`
	OthrId     []Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrId,omitempty"`
	AddtlInf   []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type OtherAsset2Choice struct {
	Cd    OtherAsset2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of DIMA, EXIA, MOVE, PROP, TIPP
type OtherAsset2Code string

type PartyIdentification122Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AnyBIC"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmAndAdr"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry"`
}

type PartyIdentification123Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmAndAdr"`
}

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AnyBIC"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmAndAdr"`
}

type PartyIdentification126Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AnyBIC"`
	PrtryId GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryId"`
}

type PartyIdentification132 struct {
	AnyBIC      AnyBICDec2014Identifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AnyBIC,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClrSysMmbId,omitempty"`
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmAndAdr,omitempty"`
	PrtryId     GenericIdentification1                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrtryId,omitempty"`
	LEI         LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
}

type PartyIdentification139 struct {
	Pty PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
}

type PartyIdentification140 struct {
	Pty PartyIdentification126Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
}

type PartyIdentification141 struct {
	Id       PartyIdentification122Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	LEI      LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
	AltrnId  AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AltrnId,omitempty"`
	PrcgDt   DateAndDateTime2Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrcgDt,omitempty"`
	PrcgId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrcgId,omitempty"`
	AddtlInf PartyTextInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PartyIdentificationAndAccount194 struct {
	Id        PartyIdentification123Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	LEI       LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LEI,omitempty"`
	AltrnId   AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AltrnId,omitempty"`
	SfkpgAcct SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SfkpgAcct,omitempty"`
	PrcgDt    DateAndDateTime2Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrcgDt,omitempty"`
	PrcgId    Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrcgId,omitempty"`
	AddtlInf  PartyTextInformation6         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PartyTextInformation1 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegnDtls,omitempty"`
}

type PartyTextInformation6 struct {
	DclrtnDtls  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegnDtls,omitempty"`
	RegnAdr     PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegnAdr,omitempty"`
}

type PaymentInstrument14 struct {
	Ref        Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref,omitempty"`
	CdtTrfDtls CreditTransfer9 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CdtTrfDtls,omitempty"`
}

type Pension3 struct {
	Id                         PensionPolicy1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
	Tp                         PensionSchemeType2Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	TrfScp                     PensionTransferScope1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfScp,omitempty"`
	TaxRef                     []TaxReference1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxRef,omitempty"`
	DrwdwnTrchId               Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DrwdwnTrchId,omitempty"`
	DrwdwnSts                  DrawdownStatus1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DrwdwnSts,omitempty"`
	DrwdwnTp                   DrawdownType2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DrwdwnTp,omitempty"`
	EstmtdVal                  DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 EstmtdVal,omitempty"`
	BlckTrf                    bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BlckTrf,omitempty"`
	BlckTrfRef                 Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BlckTrfRef,omitempty"`
	TaxFreeCshPrtcn            bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxFreeCshPrtcn,omitempty"`
	TaxFreeCshAmt              DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxFreeCshAmt,omitempty"`
	ValOfPnsnPlcyOrPlanOrSchme DateAndAmount2                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ValOfPnsnPlcyOrPlanOrSchme,omitempty"`
	RtrmntAgePrtcn             bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RtrmntAgePrtcn,omitempty"`
	RtrmntAge                  float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RtrmntAge,omitempty"`
	Shrg                       bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Shrg,omitempty"`
	LumpSumTp                  []LumpSumType1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LumpSumTp,omitempty"`
	PnsnOrdr                   []PensionOrder1               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PnsnOrdr,omitempty"`
	RingFncdDrwdwnAssts        bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RingFncdDrwdwnAssts,omitempty"`
	MnyPurchsAnlAllwnc         MoneyPurchaseAnnualAllowance1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MnyPurchsAnlAllwnc,omitempty"`
	SfgrdBnft                  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SfgrdBnft,omitempty"`
	NonSfgrddGrntedBnfts       bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NonSfgrddGrntedBnfts,omitempty"`
	LftmAllwncPrtcn            bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LftmAllwncPrtcn,omitempty"`
	ClntLftmAllwncPrtcn        bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ClntLftmAllwncPrtcn,omitempty"`
	BnftCrstllstnEvtOcrd       bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BnftCrstllstnEvtOcrd,omitempty"`
	AddtlInf                   []AdditionalInformation15     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PensionOrder1 struct {
	Tp       PensionOrderType1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PensionOrderType1Choice struct {
	Cd    PensionOrderType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of EARM, SHAR
type PensionOrderType1Code string

type PensionPolicy1 struct {
	Idr      Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Idr"`
	SubIdr   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SubIdr,omitempty"`
	AddtlInf AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PensionSchemeType2Choice struct {
	Cd    PensionSchemeType2Code  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of AAVC, DBEN, EXPP, FAVC, GPPS, SIPG, STKG, IPST, STKI, OTPM, OCDC, PPNS, EPKA, ITPO, REAN, SC32, S32A, SIPP, SSAS
type PensionSchemeType2Code string

type PensionTransferScope1Choice struct {
	Cd    PensionTransferScope1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of CRYS, SDDT, FULP, UCRY
type PensionTransferScope1Code string

// May be one of ATIN, GTIN, ITIN
type PersonIdentificationType7Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

// Must match the pattern PL[0-9]{8,8}
type PolishNationalClearingCodeIdentifier string

type PortfolioTransfer5 struct {
	MstrRef             Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MstrRef,omitempty"`
	TrfInstrRef         Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfInstrRef"`
	TrfConfId           Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfConfId"`
	ActlTrfDt           ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ActlTrfDt,omitempty"`
	Prtfl               FundPortfolio5Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtfl,omitempty"`
	AllOthrCsh          []AllOtherCash1           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AllOthrCsh,omitempty"`
	CshAll              []CashAll1                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshAll,omitempty"`
	RsdlCsh             []ResidualCash2           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RsdlCsh,omitempty"`
	TaxDt               ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxDt,omitempty"`
	PmtDtls             PaymentInstrument14       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PmtDtls,omitempty"`
	FinInstrmAsstForTrf []FinancialInstrument83   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 FinInstrmAsstForTrf,omitempty"`
	AddtlInf            []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type PortfolioTransferConfirmationV10 struct {
	MsgRef           MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MsgRef"`
	PoolRef          AdditionalReference11  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PoolRef,omitempty"`
	PrvsRef          AdditionalReference10  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrvsRef,omitempty"`
	RltdRef          AdditionalReference10  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RltdRef,omitempty"`
	PmryIndvInvstr   IndividualPerson8      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PmryIndvInvstr,omitempty"`
	RegdHldr         IndividualPerson8      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RegdHldr,omitempty"`
	ScndryIndvInvstr IndividualPerson8      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation36         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation36         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation36       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrCorpInvstr,omitempty"`
	TrfrAcct         InvestmentAccount69    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfrAcct"`
	NmneeAcct        InvestmentAccount69    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NmneeAcct,omitempty"`
	Trfee            PartyIdentification132 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Trfee"`
	PdctTrf          []PortfolioTransfer5   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PdctTrf"`
	MktPrctcVrsn     MarketPracticeVersion1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 MktPrctcVrsn,omitempty"`
	Xtnsn            []Extension1           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Xtnsn,omitempty"`
}

// May be one of FTRS
type PortfolioWithdrawalReason1Code string

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry"`
}

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AdrLine,omitempty"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYear1Choice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SpcfcPrvsYrs"`
}

type PreviousYear4 struct {
	PrvsYrs     PreviousYear1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrvsYrs"`
	CshCmpntInd bool                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshCmpntInd,omitempty"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Amt"`
}

type Quantity47 struct {
	Unit     float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Unit,omitempty"`
	PctgRate float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PctgRate,omitempty"`
	FaceAmt  float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 FaceAmt,omitempty"`
	AmtsdVal float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AmtsdVal,omitempty"`
	CshAmt   ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshAmt,omitempty"`
	OthrAsst Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrAsst,omitempty"`
}

// Must be at least 1 items long
type RICIdentifier string

type ResidualCash2 struct {
	Ind bool               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ind"`
	Ccy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ccy,omitempty"`
}

type Role4Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat28Choice struct {
	Id      SafekeepingPlaceTypeAndText6           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Ctry    CountryCode                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry"`
	TpAndId SafekeepingPlaceTypeAndIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TpAndId"`
	Prtry   GenericIdentification78                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type SafekeepingPlaceTypeAndIdentification1 struct {
	SfkpgPlcTp SafekeepingPlace1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SfkpgPlcTp"`
	Id         AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
}

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrPrtryId"`
}

type SettlementParties94 struct {
	Dpstry PartyIdentification141           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Dpstry,omitempty"`
	Pty1   PartyIdentificationAndAccount194 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty1,omitempty"`
	Pty2   PartyIdentificationAndAccount194 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty2,omitempty"`
	Pty3   PartyIdentificationAndAccount194 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty3,omitempty"`
	Pty4   PartyIdentificationAndAccount194 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty4,omitempty"`
	Pty5   PartyIdentificationAndAccount194 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Pty5,omitempty"`
}

// May be one of NOMC
type SettlementTransactionCondition11Code string

type SettlementTransactionCondition30Choice struct {
	Cd    SettlementTransactionCondition11Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification30              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Id"`
	Nm    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Chrtc,omitempty"`
}

type SubscriptionInformation2 struct {
	DtOfFrstSbcpt ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DtOfFrstSbcpt"`
	EqtyCmpnt     ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 EqtyCmpnt,omitempty"`
	CshCmpnt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshCmpnt,omitempty"`
	TtlAmtYrToDt  ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlAmtYrToDt"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

type Tax35 struct {
	Tp           TaxType3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	ApldAmt      ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ApldAmt"`
	ApldRate     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ApldRate,omitempty"`
	Ctry         CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ctry,omitempty"`
	RcptId       PartyIdentification139      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 RcptId,omitempty"`
	TaxClctnDtls TaxCalculationInformation10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxClctnDtls,omitempty"`
}

type Tax36 struct {
	DtOrPrd  DateQuarter1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DtOrPrd"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type TaxBasis1Choice struct {
	Cd    TaxationBasis2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type TaxCalculationInformation10 struct {
	Bsis     TaxBasis1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Bsis,omitempty"`
	TaxblAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxblAmt"`
}

type TaxEfficientProduct5 struct {
	TaxEffcntPdctTp    TaxEfficientProductType2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxEffcntPdctTp"`
	CurYr              bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CurYr,omitempty"`
	CshCmpntInd        bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CshCmpntInd,omitempty"`
	PrvsYrs            PreviousYear4                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrvsYrs,omitempty"`
	PrvsYrSbcptAmt     ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrvsYrSbcptAmt,omitempty"`
	PrvsYrsSbcptAmt    ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PrvsYrsSbcptAmt,omitempty"`
	DtOfFrstSbcpt      ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DtOfFrstSbcpt,omitempty"`
	CurYrSbcptDtls     SubscriptionInformation2         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CurYrSbcptDtls,omitempty"`
	BnsOrWdrwl         []BonusWithdrawal2               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 BnsOrWdrwl,omitempty"`
	TrfrAltrnId        Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TrfrAltrnId,omitempty"`
	TtlSbcptAmt        ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlSbcptAmt,omitempty"`
	OthrAmt            []OtherAmount3                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrAmt,omitempty"`
	DtFrstQlfygAddtn   ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 DtFrstQlfygAddtn,omitempty"`
	InvstrTaxRef       TaxReference2                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InvstrTaxRef,omitempty"`
	InvstmtsToFllwVal  []DateAndAmount2                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InvstmtsToFllwVal,omitempty"`
	InnvtvFinc         []InnovativeFinance1             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 InnvtvFinc,omitempty"`
	LwstInvstdAmtCurYr ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 LwstInvstdAmtCurYr,omitempty"`
	TaxClctnBase       ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxClctnBase,omitempty"`
	UusdTaxDdctn       ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UusdTaxDdctn,omitempty"`
	CurInvstmtAmt      ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CurInvstmtAmt,omitempty"`
	EstmtdVal          DateAndAmount2                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 EstmtdVal,omitempty"`
	AddtlInf           []AdditionalInformation15        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AddtlInf,omitempty"`
}

type TaxEfficientProductType2Choice struct {
	Cd    TaxEfficientProductType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of CASH, CLIS, FISA, GISK, GASK, HISA, INNF, JCSH, JISA, LISA, CCTF, SCTF, EQUI
type TaxEfficientProductType2Code string

type TaxReference1 struct {
	TaxTp  TaxReferenceType1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxTp,omitempty"`
	Ref    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref"`
	HldrTp TaxReferenceParty1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 HldrTp,omitempty"`
}

type TaxReference2 struct {
	Tp  TaxReferenceType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp,omitempty"`
	Ref Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref"`
}

type TaxReferenceParty1Choice struct {
	Cd    HolderType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type TaxReferenceType1Choice struct {
	Cd    PersonIdentificationType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of PROV, NATI, STAT, WITH, KAPA, NKAP, INPO, STAM, WTAX, INHT, SOSU, CTAX, GIFT, COAX, EUTR, AKT1, AKT2, ZWIS
type TaxType17Code string

type TaxType3Choice struct {
	Cd    TaxType17Code           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of BONU, WTHD
type TaxWrapperAmountType1Code string

type TaxableIncomePerShareCalculated2Choice struct {
	Cd    TaxableIncomePerShareCalculated2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be one of FLAT, PERU
type TaxationBasis2Code string

// May be one of FLAT, GRAM, NEAM, NAVP, PERU
type TaxationBasis5Code string

// Must be at least 1 items long
type TickerIdentifier string

type TotalFeesAndTaxes41 struct {
	TtlOvrhdApld   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlOvrhdApld,omitempty"`
	TtlFees        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlFees,omitempty"`
	TtlTaxs        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TtlTaxs,omitempty"`
	ComrclAgrmtRef Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 ComrclAgrmtRef,omitempty"`
	IndvFee        []Fee5                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IndvFee,omitempty"`
	IndvTax        []Tax35                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 IndvTax,omitempty"`
}

// May be one of XCPN, CCPN
type TradeTransactionCondition5Code string

type TradeTransactionCondition8Choice struct {
	Cd    TradeTransactionCondition5Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type TransferType2Choice struct {
	Cd    TransferType4Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of CASH, CONV, EXCL, SECU
type TransferType4Code string

type TypeOfAmount1Choice struct {
	Cd    TaxWrapperAmountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU
type TypeOfPrice10Code string

type TypeOfPrice46Choice struct {
	Cd    TypeOfPrice10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type Unit11 struct {
	UnitsNb      float64             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 UnitsNb"`
	OrdrDt       ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OrdrDt,omitempty"`
	AcqstnDt     ISODate             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcqstnDt,omitempty"`
	CertNb       []Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 CertNb,omitempty"`
	Grp1Or2Units UKTaxGroupUnit1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Grp1Or2Units,omitempty"`
	Ref          Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Ref,omitempty"`
	PricDtls     UnitPrice23         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PricDtls,omitempty"`
	TxOvrhd      TotalFeesAndTaxes41 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TxOvrhd,omitempty"`
	OthrAmt      []OtherAmount1      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 OthrAmt,omitempty"`
}

type UnitPrice23 struct {
	Tp                   TypeOfPrice46Choice                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Tp"`
	Val                  PriceValue1                            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Val"`
	PricMtd              PriceMethod1Code                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 PricMtd,omitempty"`
	AcrdIntrstNAV        ActiveOrHistoricCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 AcrdIntrstNAV,omitempty"`
	NbOfDaysAcrd         float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr      ActiveCurrencyAnd13DecimalAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd TaxableIncomePerShareCalculated2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 TaxblIncmPerShrClctd,omitempty"`
}

// May be one of WICA, WIUN
type WaivingInstruction1Code string

type WaivingInstruction2Choice struct {
	Cd    WaivingInstruction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type WithdrawalReason1Choice struct {
	Cd    PortfolioWithdrawalReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Cd"`
	Prtry GenericIdentification36        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.10 Prtry"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
