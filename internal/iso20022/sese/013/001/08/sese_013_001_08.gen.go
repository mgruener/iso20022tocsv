// Code generated by main. DO NOT EDIT.

package sese_013_001_08

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Account24 struct {
	Id    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id,omitempty"`
	Dsgnt Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Dsgnt,omitempty"`
	Svcr  PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Svcr,omitempty"`
}

type Account25 struct {
	Id       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id,omitempty"`
	AcctSvcr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AcctSvcr"`
}

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 IBAN"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Othr"`
}

type AccountIdentificationAndName5 struct {
	Id AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	Nm Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Prtry"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference7 struct {
	Ref     Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Ref"`
	RefIssr PartyIdentification97Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RefIssr,omitempty"`
	MsgNm   Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MsgNm,omitempty"`
}

type AdditionalReference8 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MsgNm,omitempty"`
}

type AdditionalReference9 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Ref"`
	RefIssr PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of LIQU, NLIQ
type AllOtherCash1Code string

type AlternateSecurityIdentification7 struct {
	Id    Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	IdSrc IdentificationSource1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 IdSrc"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern AT[0-9]{5,5}
type AustrianBankleitzahlIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICFIIdentifier string

// Must match the pattern (BBG)[BCDFGHJKLMNPQRSTVWXYZ\d]{8}\d
type Bloomberg2Identifier string

// May be one of SLDP, SLRP, DLPR
type BusinessFlowType1Code string

// Must match the pattern CP[0-9]{4,4}
type CHIPSParticipantIdentifier string

// Must match the pattern CH[0-9]{6,6}
type CHIPSUniversalIdentifier string

// Must match the pattern CA[0-9]{9,9}
type CanadianPaymentsARNIdentifier string

type CashAccount201 struct {
	Id       AccountIdentificationAndName5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	AcctSvcr FinancialInstitutionIdentification15 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AcctSvcr,omitempty"`
}

type ClearingSystemMemberIdentification4Choice struct {
	USCHU  CHIPSUniversalIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 USCHU"`
	NZNCC  NewZealandNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NZNCC"`
	IENSC  IrishNSCIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 IENSC"`
	GBSC   UKDomesticSortCodeIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 GBSC"`
	USCH   CHIPSParticipantIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 USCH"`
	CHBC   SwissBCIdentifier                              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CHBC"`
	USFW   FedwireRoutingNumberIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 USFW"`
	PTNCC  PortugueseNCCIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PTNCC"`
	RUCB   RussianCentralBankIdentificationCodeIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RUCB"`
	ITNCC  ItalianDomesticIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ITNCC"`
	ATBLZ  AustrianBankleitzahlIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ATBLZ"`
	CACPA  CanadianPaymentsARNIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CACPA"`
	CHSIC  SwissSICIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CHSIC"`
	DEBLZ  GermanBankleitzahlIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 DEBLZ"`
	ESNCC  SpanishDomesticInterbankingIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ESNCC"`
	ZANCC  SouthAfricanNCCIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ZANCC"`
	HKNCC  HongKongBankIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 HKNCC"`
	AUBSBx ExtensiveBranchNetworkIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AUBSBx"`
	AUBSBs SmallNetworkIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AUBSBs"`
}

// Must be at least 1 items long
type ConsolidatedTapeAssociationIdentifier string

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 EmailAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CurrentYearType1Choice struct {
	CurYrTp       ISAType1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CurYrTp"`
	XtndedCurYrTp Extended350Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 XtndedCurYrTp"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Dt"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 DtTm"`
}

type Document struct {
	PrtflTrfConf PortfolioTransferConfirmationV08 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtflTrfConf"`
}

// Must be at least 1 items long
type EuroclearClearstreamIdentifier string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must be at least 1 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Txt"`
}

// Must match the pattern AU[0-9]{6,6}
type ExtensiveBranchNetworkIdentifier string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must match the pattern FW[0-9]{9,9}
type FedwireRoutingNumberIdentifier string

type FinancialInstitutionIdentification15 struct {
	Pty FinancialInstitutionIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Pty"`
	LEI LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 LEI,omitempty"`
}

type FinancialInstitutionIdentification9Choice struct {
	NmAndAdr    NameAndAddress5                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmAndAdr"`
	BICFI       BICFIIdentifier                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 BICFI"`
	ClrSysMmbId ClearingSystemMemberIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ClrSysMmbId"`
	PrtryId     Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtryId"`
}

type FinancialInstrument65 struct {
	Id                   SecurityIdentification25Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	Nm                   Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm,omitempty"`
	ShrtNm               Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ShrtNm,omitempty"`
	TrfTp                TransferType1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfTp"`
	Qty                  Quantity43Choice                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Qty"`
	AvrgAcqstnPric       ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AvrgAcqstnPric,omitempty"`
	TrfCcy               ActiveOrHistoricCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfCcy,omitempty"`
	TtlBookVal           ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TtlBookVal,omitempty"`
	TrfeeAcct            Account24                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfeeAcct,omitempty"`
	SubAcctDtls          SubAccount5                       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SubAcctDtls,omitempty"`
	SttlmPtiesRcvgSdDtls ReceivingPartiesAndAccount18      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SttlmPtiesRcvgSdDtls,omitempty"`
	DlvrgAgtDtls         PartyIdentificationAndAccount156  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 DlvrgAgtDtls,omitempty"`
	ReqdSttlmDt          ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ReqdSttlmDt,omitempty"`
}

// May be one of MALE, FEMA
type GenderCode string

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Issr,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SchmeNm,omitempty"`
}

// Must match the pattern BL[0-9]{8,8}
type GermanBankleitzahlIdentifier string

// Must match the pattern HK[0-9]{3,3}
type HongKongBankIdentifier string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

type ISAPortfolio2Choice struct {
	ISA   ISAYearsOfIssue5 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ISA"`
	Prtfl Portfolio1       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Prtfl"`
}

type ISATransfer28 struct {
	MstrRef             Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MstrRef,omitempty"`
	TrfConfId           Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfConfId"`
	TrfInstrRef         Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfInstrRef"`
	ClntRef             AdditionalReference7    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ClntRef,omitempty"`
	CtrPtyRef           AdditionalReference7    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CtrPtyRef,omitempty"`
	BizFlowTp           BusinessFlowType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 BizFlowTp,omitempty"`
	ActlTrfDt           ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ActlTrfDt,omitempty"`
	RsdlCsh             ResidualCash1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RsdlCsh,omitempty"`
	Prtfl               ISAPortfolio2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Prtfl,omitempty"`
	AllOthrCsh          AllOtherCash1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AllOthrCsh,omitempty"`
	FinInstrmAsstForTrf []FinancialInstrument65 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 FinInstrmAsstForTrf,omitempty"`
}

// May be one of MINE, MAXI, MINC
type ISAType1Code string

type ISAYearsOfIssue5 struct {
	CurYr          CurrentYearType1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CurYr,omitempty"`
	CshCmpntInd    bool                     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CshCmpntInd"`
	PrvsYrs        PreviousYear3            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrvsYrs,omitempty"`
	CurYrSbcptDtls SubscriptionInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CurYrSbcptDtls"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYear time.Time

func (t *ISOYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISOYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource1Choice struct {
	Dmst  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Dmst"`
	Prtry Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Prtry"`
}

type IndividualPerson8 struct {
	Nm            Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm"`
	GvnNm         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 GvnNm"`
	NmPrfx        NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmPrfx,omitempty"`
	NmSfx         Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmSfx,omitempty"`
	Gndr          GenderCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Gndr,omitempty"`
	BirthDt       ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 BirthDt,omitempty"`
	SclSctyNb     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SclSctyNb,omitempty"`
	IndvInvstrAdr PostalAddress1  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 IndvInvstrAdr"`
}

type Intermediary41 struct {
	Id       PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	Acct     Account25              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Acct,omitempty"`
	Role     Role4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Role,omitempty"`
	CtctPrsn ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CtctPrsn,omitempty"`
}

// May be one of FMCO, REGI, TRAG, INTR, DIST, CONC, UCL1, UCL2, TRAN
type InvestmentFundRole2Code string

// Must match the pattern IE[0-9]{6,6}
type IrishNSCIdentifier string

// Must match the pattern IT[0-9]{10,10}
type ItalianDomesticIdentifier string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nb,omitempty"`
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// Must be at least 1 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Adr,omitempty"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// Must match the pattern NZ[0-9]{6,6}
type NewZealandNCCIdentifier string

type Organisation31 struct {
	Nm            Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm"`
	Id            PartyIdentification124 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id,omitempty"`
	Purp          Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Purp,omitempty"`
	TaxtnCtry     CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TaxtnCtry,omitempty"`
	RegnCtry      CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RegnCtry,omitempty"`
	RegnDt        ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RegnDt,omitempty"`
	TaxIdNb       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TaxIdNb,omitempty"`
	NtlRegnNb     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NtlRegnNb,omitempty"`
	CorpInvstrAdr PostalAddress1         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CorpInvstrAdr"`
}

type PartyIdentification113 struct {
	Pty PartyIdentification90Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Pty"`
	LEI LEIIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 LEI,omitempty"`
}

type PartyIdentification119Choice struct {
	AnyBIC  AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AnyBIC"`
	PrtryId GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtryId"`
}

type PartyIdentification123 struct {
	PtyId    PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PtyId"`
	PrcgRef  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgRef,omitempty"`
	PrcgDt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgDt,omitempty"`
	CtctPrsn ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CtctPrsn,omitempty"`
}

type PartyIdentification124 struct {
	Pty PartyIdentification119Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 LEI,omitempty"`
}

type PartyIdentification90Choice struct {
	AnyBIC   AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AnyBIC"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtryId"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmAndAdr"`
}

type PartyIdentification97Choice struct {
	AnyBIC     AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AnyBIC"`
	LglNttyIdr LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 LglNttyIdr"`
	NmAndAdr   NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmAndAdr"`
	PrtryId    GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtryId"`
}

type PartyIdentificationAndAccount156 struct {
	PtyId      PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PtyId,omitempty"`
	AcctId     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AcctId,omitempty"`
	PlcOfSttlm PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PlcOfSttlm"`
}

type PartyIdentificationAndAccount157 struct {
	PtyId   PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PtyId"`
	AcctId  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AcctId,omitempty"`
	PrcgRef Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgRef,omitempty"`
	PrcgDt  DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgDt,omitempty"`
}

type PartyIdentificationAndAccount158 struct {
	PtyId       PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PtyId"`
	AcctId      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AcctId,omitempty"`
	PrcgRef     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgRef,omitempty"`
	PrcgDt      DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrcgDt,omitempty"`
	SubAcctDtls SubAccount5            `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SubAcctDtls,omitempty"`
	CtctPrsn    ContactIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CtctPrsn,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type Portfolio1 struct {
	PrtflInf []Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrtflInf,omitempty"`
}

type PortfolioTransferConfirmationV08 struct {
	MsgRef           MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MsgRef"`
	PoolRef          AdditionalReference9   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PoolRef,omitempty"`
	PrvsRef          AdditionalReference8   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrvsRef,omitempty"`
	RltdRef          AdditionalReference8   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RltdRef,omitempty"`
	PmryIndvInvstr   IndividualPerson8      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PmryIndvInvstr,omitempty"`
	ScndryIndvInvstr IndividualPerson8      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ScndryIndvInvstr,omitempty"`
	OthrIndvInvstr   []IndividualPerson8    `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 OthrIndvInvstr,omitempty"`
	PmryCorpInvstr   Organisation31         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PmryCorpInvstr,omitempty"`
	ScndryCorpInvstr Organisation31         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ScndryCorpInvstr,omitempty"`
	OthrCorpInvstr   []Organisation31       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 OthrCorpInvstr,omitempty"`
	TrfrAcct         Account24              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TrfrAcct"`
	NmneeAcct        Account24              `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 NmneeAcct,omitempty"`
	Trfee            PartyIdentification113 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Trfee"`
	IntrmyInf        []Intermediary41       `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 IntrmyInf,omitempty"`
	CshAcct          CashAccount201         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CshAcct,omitempty"`
	PdctTrf          []ISATransfer28        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PdctTrf"`
	MktPrctcVrsn     MarketPracticeVersion1 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 MktPrctcVrsn,omitempty"`
	Xtnsn            []Extension1           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Xtnsn,omitempty"`
}

// Must match the pattern PT[0-9]{8,8}
type PortugueseNCCIdentifier string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Ctry"`
}

// Must match the pattern ALL
type PreviousAll string

type PreviousYear1Choice struct {
	AllPrvsYrs   PreviousAll `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 AllPrvsYrs"`
	SpcfcPrvsYrs []ISOYear   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SpcfcPrvsYrs"`
}

type PreviousYear3 struct {
	PrvsYr      PreviousYear1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PrvsYr"`
	CshCmpntInd bool                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CshCmpntInd"`
}

type Quantity43Choice struct {
	Unit     Unit9   `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Unit"`
	PctgRate float64 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PctgRate"`
}

// Must be at least 1 items long
type RICIdentifier string

type ReceivingPartiesAndAccount18 struct {
	RcvrsCtdnDtls    PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RcvrsCtdnDtls,omitempty"`
	RcvrsIntrmy1Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RcvrsIntrmy1Dtls,omitempty"`
	RcvrsIntrmy2Dtls PartyIdentificationAndAccount157 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RcvrsIntrmy2Dtls,omitempty"`
	RcvgAgtDtls      PartyIdentificationAndAccount158 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RcvgAgtDtls"`
	SctiesSttlmSys   Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SctiesSttlmSys,omitempty"`
	PlcOfSttlmDtls   PartyIdentification123           `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 PlcOfSttlmDtls,omitempty"`
}

// May be one of NRCT, RCTR
type ResidualCash1Code string

type Role4Choice struct {
	Cd    InvestmentFundRole2Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Cd"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Prtry"`
}

// Must match the pattern RU[0-9]{9,9}
type RussianCentralBankIdentificationCodeIdentifier string

type SecurityIdentification25Choice struct {
	ISIN        ISINOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 ISIN"`
	SEDOL       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SEDOL"`
	CUSIP       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CUSIP"`
	RIC         RICIdentifier                         `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 RIC"`
	TckrSymb    TickerIdentifier                      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TckrSymb"`
	Blmbrg      Bloomberg2Identifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Blmbrg"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CTA"`
	QUICK       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 QUICK"`
	Wrtppr      string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Wrtppr"`
	Dtch        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Dtch"`
	Vlrn        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Vlrn"`
	SCVM        string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 SCVM"`
	Belgn       string                                `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Belgn"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Cmon"`
	OthrPrtryId AlternateSecurityIdentification7      `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 OthrPrtryId"`
}

// Must match the pattern AU[0-9]{6,6}
type SmallNetworkIdentifier string

// Must match the pattern ZA[0-9]{6,6}
type SouthAfricanNCCIdentifier string

// Must match the pattern ES[0-9]{8,9}
type SpanishDomesticInterbankingIdentifier string

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Id"`
	Nm    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Chrtc,omitempty"`
}

type SubscriptionInformation1 struct {
	DtOfFrstSbcpt ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 DtOfFrstSbcpt"`
	EqtyCmpnt     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 EqtyCmpnt,omitempty"`
	CshCmpnt      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 CshCmpnt,omitempty"`
	TtlAmtYrToDt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TtlAmtYrToDt"`
}

// Must match the pattern SW[0-9]{3,5}
type SwissBCIdentifier string

// Must match the pattern SW[0-9]{6,6}
type SwissSICIdentifier string

// Must be at least 1 items long
type TickerIdentifier string

// May be one of SECU, CASH
type TransferType1Code string

// Must match the pattern SC[0-9]{6,6}
type UKDomesticSortCodeIdentifier string

// May be one of GRP1, GRP2
type UKTaxGroupUnit1Code string

type Unit10 struct {
	UnitsNb      float64             `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 UnitsNb"`
	Grp1Or2Units UKTaxGroupUnit1Code `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 Grp1Or2Units"`
}

type Unit9 struct {
	TtlUnitsNb float64  `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 TtlUnitsNb"`
	UnitDtls   []Unit10 `xml:"urn:iso:std:iso:20022:tech:xsd:sese.013.001.08 UnitDtls,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
