// Code generated by go generate; DO NOT EDIT.
/*
Copyright Â© 2021 Michael Gruener

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package iso20022

import (
	"encoding/xml"
	"fmt"
	acmt_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/01"
	acmt_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/03"
	acmt_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/04"
	acmt_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/05"
	acmt_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/06"
	acmt_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/07"
	acmt_001_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/001/001/08"
	acmt_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/02"
	acmt_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/03"
	acmt_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/04"
	acmt_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/05"
	acmt_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/06"
	acmt_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/07"
	acmt_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/002/001/08"
	acmt_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/02"
	acmt_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/03"
	acmt_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/04"
	acmt_003_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/05"
	acmt_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/06"
	acmt_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/07"
	acmt_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/003/001/08"
	acmt_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/005/001/02"
	acmt_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/005/001/03"
	acmt_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/005/001/04"
	acmt_005_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/005/001/05"
	acmt_005_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/005/001/06"
	acmt_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/02"
	acmt_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/03"
	acmt_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/04"
	acmt_006_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/05"
	acmt_006_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/06"
	acmt_006_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/006/001/07"
	acmt_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/007/001/01"
	acmt_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/007/001/02"
	acmt_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/007/001/03"
	acmt_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/008/001/01"
	acmt_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/008/001/02"
	acmt_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/008/001/03"
	acmt_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/009/001/01"
	acmt_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/009/001/02"
	acmt_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/009/001/03"
	acmt_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/010/001/01"
	acmt_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/010/001/02"
	acmt_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/010/001/03"
	acmt_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/011/001/01"
	acmt_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/011/001/02"
	acmt_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/011/001/03"
	acmt_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/012/001/01"
	acmt_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/012/001/02"
	acmt_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/012/001/03"
	acmt_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/013/001/01"
	acmt_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/013/001/02"
	acmt_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/013/001/03"
	acmt_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/014/001/01"
	acmt_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/014/001/02"
	acmt_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/014/001/03"
	acmt_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/015/001/01"
	acmt_015_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/015/001/02"
	acmt_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/015/001/03"
	acmt_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/016/001/01"
	acmt_016_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/016/001/02"
	acmt_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/016/001/03"
	acmt_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/017/001/01"
	acmt_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/017/001/02"
	acmt_017_001_03_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/017/001/03_0"
	acmt_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/018/001/01"
	acmt_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/018/001/02"
	acmt_018_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/018/001/03"
	acmt_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/019/001/01"
	acmt_019_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/019/001/02"
	acmt_019_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/019/001/03"
	acmt_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/020/001/01"
	acmt_020_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/020/001/02"
	acmt_020_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/020/001/03"
	acmt_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/021/001/01"
	acmt_021_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/021/001/02"
	acmt_021_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/021/001/03"
	acmt_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/022/001/01"
	acmt_022_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/022/001/02"
	acmt_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/023/001/01"
	acmt_023_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/023/001/02"
	acmt_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/024/001/01"
	acmt_024_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/024/001/02"
	acmt_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/027/001/01"
	acmt_027_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/027/001/02"
	acmt_027_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/027/001/03"
	acmt_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/028/001/01"
	acmt_028_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/028/001/02"
	acmt_028_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/028/001/03"
	acmt_029_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/029/001/01"
	acmt_029_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/029/001/02"
	acmt_029_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/029/001/03"
	acmt_030_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/030/001/01"
	acmt_030_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/030/001/02"
	acmt_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/031/001/01"
	acmt_031_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/031/001/02"
	acmt_031_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/031/001/03"
	acmt_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/032/001/01"
	acmt_032_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/032/001/02"
	acmt_032_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/032/001/03"
	acmt_033_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/033/001/01"
	acmt_033_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/033/001/02"
	acmt_034_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/034/001/01"
	acmt_034_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/034/001/02"
	acmt_034_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/034/001/03"
	acmt_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/035/001/01"
	acmt_035_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/035/001/02"
	acmt_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/036/001/01"
	acmt_037_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/037/001/01"
	acmt_037_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/acmt/037/001/02"
	admi_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/004/001/02"
	admi_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/005/001/01"
	admi_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/006/001/01"
	admi_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/007/001/01"
	admi_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/009/001/02"
	admi_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/010/001/02"
	admi_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/011/001/01"
	admi_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/admi/017/001/01"
	auth_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/001/001/01"
	auth_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/002/001/01"
	auth_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/003/001/01"
	auth_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/008/001/02"
	auth_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/009/001/02"
	auth_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/010/001/01"
	auth_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/011/001/01"
	auth_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/012/001/01"
	auth_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/012/001/02"
	auth_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/013/001/01"
	auth_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/013/001/02"
	auth_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/014/001/01"
	auth_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/014/001/02"
	auth_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/015/001/01"
	auth_015_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/015/001/02"
	auth_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/016/001/01"
	auth_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/017/001/01"
	auth_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/017/001/02"
	auth_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/018/001/01"
	auth_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/018/001/02"
	auth_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/019/001/01"
	auth_019_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/019/001/02"
	auth_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/020/001/01"
	auth_020_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/020/001/02"
	auth_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/021/001/01"
	auth_021_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/021/001/02"
	auth_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/022/001/01"
	auth_022_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/022/001/02"
	auth_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/023/001/01"
	auth_023_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/023/001/02"
	auth_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/024/001/01"
	auth_024_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/024/001/02"
	auth_025_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/025/001/01"
	auth_025_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/025/001/02"
	auth_026_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/026/001/02"
	auth_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/027/001/01"
	auth_027_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/027/001/02"
	auth_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/028/001/01"
	auth_029_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/029/001/01"
	auth_029_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/029/001/02"
	auth_030_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/030/001/01"
	auth_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/031/001/01"
	auth_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/032/001/01"
	auth_033_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/033/001/01"
	auth_033_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/033/001/02"
	auth_034_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/034/001/01"
	auth_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/035/001/01"
	auth_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/036/001/01"
	auth_036_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/036/001/02"
	auth_038_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/038/001/01"
	auth_039_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/039/001/01"
	auth_040_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/040/001/01"
	auth_041_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/041/001/01"
	auth_042_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/042/001/01"
	auth_042_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/042/001/02"
	auth_043_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/043/001/01"
	auth_044_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/044/001/01"
	auth_044_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/044/001/02"
	auth_045_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/045/001/01"
	auth_045_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/045/001/02"
	auth_047_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/047/001/01"
	auth_048_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/048/001/01"
	auth_049_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/049/001/01"
	auth_049_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/049/001/02"
	auth_050_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/050/001/01"
	auth_052_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/052/001/01"
	auth_054_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/054/001/01"
	auth_055_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/055/001/01"
	auth_056_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/056/001/01"
	auth_057_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/057/001/01"
	auth_058_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/058/001/01"
	auth_059_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/059/001/01"
	auth_060_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/060/001/01"
	auth_061_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/061/001/01"
	auth_062_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/062/001/01"
	auth_063_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/063/001/01"
	auth_064_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/064/001/01"
	auth_065_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/065/001/01"
	auth_066_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/066/001/01"
	auth_067_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/067/001/01"
	auth_068_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/068/001/01"
	auth_069_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/069/001/01"
	auth_070_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/070/001/01"
	auth_071_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/071/001/01"
	auth_072_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/072/001/01"
	auth_076_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/076/001/01"
	auth_077_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/077/001/01"
	auth_078_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/078/001/01"
	auth_079_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/079/001/01"
	auth_080_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/080/001/01"
	auth_083_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/083/001/01"
	auth_084_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/084/001/01"
	auth_085_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/085/001/01"
	auth_086_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/086/001/01"
	auth_090_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/090/001/01"
	auth_091_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/091/001/01"
	auth_092_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/092/001/01"
	auth_092_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/092/001/02"
	auth_094_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/094/001/01"
	auth_100_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/100/001/01"
	auth_101_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/auth/101/001/01"
	caaa_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/01"
	caaa_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/02"
	caaa_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/03"
	caaa_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/04"
	caaa_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/05"
	caaa_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/06"
	caaa_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/07"
	caaa_001_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/08"
	caaa_001_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/001/001/09"
	caaa_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/01"
	caaa_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/02"
	caaa_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/03"
	caaa_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/04"
	caaa_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/05"
	caaa_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/06"
	caaa_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/07"
	caaa_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/08"
	caaa_002_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/002/001/09"
	caaa_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/01"
	caaa_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/02"
	caaa_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/03"
	caaa_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/04"
	caaa_003_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/05"
	caaa_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/06"
	caaa_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/07"
	caaa_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/08"
	caaa_003_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/003/001/09"
	caaa_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/01"
	caaa_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/02"
	caaa_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/03"
	caaa_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/04"
	caaa_004_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/05"
	caaa_004_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/06"
	caaa_004_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/07"
	caaa_004_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/004/001/08"
	caaa_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/01"
	caaa_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/02"
	caaa_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/03"
	caaa_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/04"
	caaa_005_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/05"
	caaa_005_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/06"
	caaa_005_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/07"
	caaa_005_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/08"
	caaa_005_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/005/001/09"
	caaa_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/01"
	caaa_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/02"
	caaa_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/03"
	caaa_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/04"
	caaa_006_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/05"
	caaa_006_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/06"
	caaa_006_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/07"
	caaa_006_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/006/001/08"
	caaa_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/01"
	caaa_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/02"
	caaa_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/03"
	caaa_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/04"
	caaa_007_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/05"
	caaa_007_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/06"
	caaa_007_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/07"
	caaa_007_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/08"
	caaa_007_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/007/001/09"
	caaa_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/01"
	caaa_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/02"
	caaa_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/03"
	caaa_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/04"
	caaa_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/05"
	caaa_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/06"
	caaa_008_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/07"
	caaa_008_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/008/001/08"
	caaa_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/01"
	caaa_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/02"
	caaa_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/03"
	caaa_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/04"
	caaa_009_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/05"
	caaa_009_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/06"
	caaa_009_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/07"
	caaa_009_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/009/001/08"
	caaa_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/01"
	caaa_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/02"
	caaa_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/03"
	caaa_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/04"
	caaa_010_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/05"
	caaa_010_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/06"
	caaa_010_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/010/001/07"
	caaa_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/01"
	caaa_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/02"
	caaa_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/03"
	caaa_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/04"
	caaa_011_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/05"
	caaa_011_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/06"
	caaa_011_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/07"
	caaa_011_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/08"
	caaa_011_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/011/001/09"
	caaa_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/01"
	caaa_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/02"
	caaa_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/03"
	caaa_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/04"
	caaa_012_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/05"
	caaa_012_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/06"
	caaa_012_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/07"
	caaa_012_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/012/001/08"
	caaa_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/01"
	caaa_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/02"
	caaa_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/03"
	caaa_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/04"
	caaa_013_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/05"
	caaa_013_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/06"
	caaa_013_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/07"
	caaa_013_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/013/001/08"
	caaa_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/01"
	caaa_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/02"
	caaa_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/03"
	caaa_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/04"
	caaa_014_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/05"
	caaa_014_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/06"
	caaa_014_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/014/001/07"
	caaa_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/01"
	caaa_015_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/02"
	caaa_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/03"
	caaa_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/04"
	caaa_015_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/05"
	caaa_015_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/015/001/06"
	caaa_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/01"
	caaa_016_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/02"
	caaa_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/03"
	caaa_016_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/04"
	caaa_016_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/05"
	caaa_016_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/016/001/06"
	caaa_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/01"
	caaa_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/02"
	caaa_017_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/03"
	caaa_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/04"
	caaa_017_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/05"
	caaa_017_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/06"
	caaa_017_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/017/001/07"
	caaa_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/018/001/01"
	caaa_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/018/001/02"
	caaa_018_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/018/001/03"
	caaa_018_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/018/001/04"
	caaa_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/019/001/01"
	caaa_019_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/019/001/02"
	caaa_019_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/019/001/03"
	caaa_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/020/001/01"
	caaa_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caaa/021/001/01"
	caad_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/001/001/01"
	caad_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/002/001/01"
	caad_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/003/001/01"
	caad_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/004/001/01"
	caad_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/005/001/02"
	caad_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/006/001/02"
	caad_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caad/007/001/02"
	caam_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/001/001/01"
	caam_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/001/001/02"
	caam_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/001/001/03"
	caam_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/002/001/01"
	caam_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/002/001/02"
	caam_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/002/001/03"
	caam_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/003/001/01"
	caam_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/003/001/02"
	caam_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/003/001/03"
	caam_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/004/001/01"
	caam_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/004/001/02"
	caam_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/004/001/03"
	caam_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/005/001/01"
	caam_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/005/001/02"
	caam_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/006/001/01"
	caam_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/006/001/02"
	caam_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/007/001/01"
	caam_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/008/001/01"
	caam_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/009/001/01"
	caam_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/009/001/02"
	caam_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/010/001/01"
	caam_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/010/001/02"
	caam_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/011/001/01"
	caam_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/caam/012/001/01"
	cafc_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafc/001/001/01"
	cafc_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafc/002/001/01"
	cafm_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafm/001/001/01"
	cafm_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafm/002/001/01"
	cafr_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafr/001/001/01"
	cafr_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafr/002/001/01"
	cafr_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafr/003/001/01"
	cafr_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cafr/004/001/01"
	cain_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/001/001/01"
	cain_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/001/001/02"
	cain_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/002/001/01"
	cain_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/002/001/02"
	cain_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/003/001/01"
	cain_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/003/001/02"
	cain_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/004/001/02"
	cain_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/005/001/01"
	cain_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/005/001/02"
	cain_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/006/001/01"
	cain_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/006/001/02"
	cain_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/007/001/01"
	cain_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/008/001/01"
	cain_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/009/001/01"
	cain_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/010/001/01"
	cain_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/011/001/01"
	cain_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/012/001/01"
	cain_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/013/001/01"
	cain_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/014/001/01"
	cain_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/015/001/01"
	cain_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/016/001/01"
	cain_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/017/001/01"
	cain_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/018/001/01"
	cain_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/019/001/01"
	cain_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/020/001/01"
	cain_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/021/001/01"
	cain_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/022/001/01"
	cain_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/023/001/01"
	cain_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/024/001/01"
	cain_025_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/025/001/01"
	cain_026_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/026/001/01"
	cain_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/027/001/01"
	cain_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/cain/028/001/01"
	camt_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/003/001/07"
	camt_004_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/004/001/08"
	camt_005_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/005/001/08"
	camt_006_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/006/001/08"
	camt_007_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/007/001/08"
	camt_008_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/008/001/08"
	camt_009_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/009/001/07"
	camt_010_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/010/001/08"
	camt_011_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/011/001/07"
	camt_012_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/012/001/07"
	camt_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/013/001/04"
	camt_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/014/001/04"
	camt_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/015/001/04"
	camt_016_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/016/001/04"
	camt_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/017/001/04"
	camt_018_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/018/001/05"
	camt_019_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/019/001/07"
	camt_020_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/020/001/04"
	camt_021_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/021/001/06"
	camt_023_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/023/001/07"
	camt_024_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/024/001/06"
	camt_025_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/025/001/05"
	camt_026_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/03"
	camt_026_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/04"
	camt_026_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/05"
	camt_026_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/06"
	camt_026_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/07"
	camt_026_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/026/001/08"
	camt_027_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/03"
	camt_027_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/04"
	camt_027_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/05"
	camt_027_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/06"
	camt_027_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/07"
	camt_027_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/027/001/08"
	camt_028_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/03"
	camt_028_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/04"
	camt_028_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/05"
	camt_028_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/06"
	camt_028_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/07"
	camt_028_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/08"
	camt_028_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/09"
	camt_028_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/028/001/10"
	camt_029_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/03"
	camt_029_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/04"
	camt_029_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/05"
	camt_029_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/06"
	camt_029_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/07"
	camt_029_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/08"
	camt_029_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/09"
	camt_029_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/029/001/10"
	camt_030_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/030/001/03"
	camt_030_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/030/001/04"
	camt_030_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/030/001/05"
	camt_031_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/031/001/03"
	camt_031_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/031/001/04"
	camt_031_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/031/001/05"
	camt_031_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/031/001/06"
	camt_032_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/032/001/02"
	camt_032_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/032/001/03"
	camt_032_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/032/001/04"
	camt_033_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/033/001/03"
	camt_033_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/033/001/04"
	camt_033_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/033/001/05"
	camt_033_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/033/001/06"
	camt_034_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/034/001/03"
	camt_034_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/034/001/04"
	camt_034_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/034/001/05"
	camt_034_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/034/001/06"
	camt_035_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/035/001/02"
	camt_035_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/035/001/03"
	camt_035_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/035/001/04"
	camt_035_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/035/001/05"
	camt_036_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/036/001/02"
	camt_036_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/036/001/03"
	camt_036_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/036/001/04"
	camt_036_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/036/001/05"
	camt_037_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/03"
	camt_037_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/04"
	camt_037_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/05"
	camt_037_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/06"
	camt_037_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/07"
	camt_037_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/037/001/08"
	camt_038_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/038/001/02"
	camt_038_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/038/001/03"
	camt_038_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/038/001/04"
	camt_039_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/039/001/03"
	camt_039_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/039/001/04"
	camt_039_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/039/001/05"
	camt_040_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/040/001/03"
	camt_040_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/040/001/04"
	camt_041_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/041/001/03"
	camt_041_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/041/001/04"
	camt_042_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/042/001/03"
	camt_042_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/042/001/04"
	camt_043_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/043/001/03"
	camt_043_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/043/001/04"
	camt_044_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/044/001/02"
	camt_044_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/044/001/03"
	camt_045_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/045/001/02"
	camt_045_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/045/001/03"
	camt_046_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/046/001/05"
	camt_047_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/047/001/06"
	camt_048_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/048/001/05"
	camt_049_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/049/001/05"
	camt_050_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/050/001/05"
	camt_051_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/051/001/05"
	camt_052_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/01"
	camt_052_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/02"
	camt_052_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/03"
	camt_052_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/04"
	camt_052_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/05"
	camt_052_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/06"
	camt_052_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/07"
	camt_052_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/052/001/08"
	camt_053_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/01"
	camt_053_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/02"
	camt_053_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/03"
	camt_053_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/04"
	camt_053_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/05"
	camt_053_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/06"
	camt_053_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/07"
	camt_053_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/053/001/08"
	camt_054_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/01"
	camt_054_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/02"
	camt_054_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/03"
	camt_054_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/05"
	camt_054_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/06"
	camt_054_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/07"
	camt_054_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/054/001/08"
	camt_055_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/01"
	camt_055_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/02"
	camt_055_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/03"
	camt_055_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/04"
	camt_055_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/05"
	camt_055_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/06"
	camt_055_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/07"
	camt_055_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/08"
	camt_055_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/055/001/09"
	camt_056_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/01"
	camt_056_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/02"
	camt_056_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/03"
	camt_056_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/04"
	camt_056_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/05"
	camt_056_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/06"
	camt_056_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/07"
	camt_056_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/08"
	camt_056_001_09_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/056/001/09_0"
	camt_057_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/057/001/02"
	camt_057_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/057/001/03"
	camt_057_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/057/001/04"
	camt_057_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/057/001/05"
	camt_057_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/057/001/06"
	camt_058_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/058/001/02"
	camt_058_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/058/001/03"
	camt_058_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/058/001/04"
	camt_058_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/058/001/05"
	camt_058_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/058/001/06"
	camt_059_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/059/001/02"
	camt_059_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/059/001/03"
	camt_059_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/059/001/04"
	camt_059_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/059/001/05"
	camt_059_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/059/001/06"
	camt_060_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/060/001/02"
	camt_060_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/060/001/03"
	camt_060_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/060/001/04"
	camt_060_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/060/001/05"
	camt_061_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/061/001/02"
	camt_062_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/062/001/03"
	camt_063_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/063/001/02"
	camt_066_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/066/001/01"
	camt_067_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/067/001/01"
	camt_068_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/068/001/01"
	camt_069_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/069/001/03"
	camt_070_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/070/001/04"
	camt_071_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/071/001/03"
	camt_072_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/072/001/01"
	camt_073_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/073/001/01"
	camt_074_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/074/001/01"
	camt_075_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/075/001/01"
	camt_078_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/078/001/01"
	camt_079_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/079/001/01"
	camt_080_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/080/001/01"
	camt_081_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/081/001/01"
	camt_082_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/082/001/01"
	camt_083_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/083/001/01"
	camt_084_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/084/001/01"
	camt_085_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/085/001/01"
	camt_086_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/086/001/01"
	camt_086_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/086/001/02"
	camt_086_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/086/001/03"
	camt_087_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/01"
	camt_087_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/02"
	camt_087_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/03"
	camt_087_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/04"
	camt_087_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/05"
	camt_087_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/06"
	camt_087_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/087/001/07"
	camt_088_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/088/001/01"
	camt_101_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/101/001/01"
	camt_102_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/102/001/01"
	camt_103_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/103/001/01"
	camt_104_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/camt/104/001/01"
	canm_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/canm/001/001/02"
	canm_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/canm/002/001/02"
	canm_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/canm/003/001/02"
	canm_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/canm/004/001/02"
	casp_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/001/001/01"
	casp_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/001/001/02"
	casp_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/002/001/01"
	casp_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/002/001/02"
	casp_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/003/001/01"
	casp_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/003/001/02"
	casp_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/004/001/01"
	casp_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/004/001/02"
	casp_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/005/001/01"
	casp_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/005/001/02"
	casp_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/006/001/01"
	casp_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/006/001/02"
	casp_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/007/001/01"
	casp_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/007/001/02"
	casp_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/008/001/01"
	casp_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/008/001/02"
	casp_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/009/001/01"
	casp_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/009/001/02"
	casp_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/010/001/01"
	casp_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/010/001/02"
	casp_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/011/001/01"
	casp_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/011/001/02"
	casp_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/012/001/01"
	casp_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/012/001/02"
	casp_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/013/001/01"
	casp_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/013/001/02"
	casp_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/014/001/01"
	casp_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/014/001/02"
	casp_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/015/001/01"
	casp_015_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/015/001/02"
	casp_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/016/001/01"
	casp_016_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/016/001/02"
	casp_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/017/001/01"
	casp_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/casp/017/001/02"
	casr_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casr/001/001/01"
	casr_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/casr/002/001/01"
	catm_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/01"
	catm_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/02"
	catm_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/03"
	catm_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/04"
	catm_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/05"
	catm_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/06"
	catm_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/07"
	catm_001_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/08"
	catm_001_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/001/001/09"
	catm_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/01"
	catm_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/02"
	catm_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/03"
	catm_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/04"
	catm_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/05"
	catm_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/06"
	catm_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/07"
	catm_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/002/001/08"
	catm_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/01"
	catm_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/02"
	catm_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/03"
	catm_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/04"
	catm_003_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/05"
	catm_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/06"
	catm_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/07"
	catm_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/08"
	catm_003_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/003/001/09"
	catm_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/004/001/01"
	catm_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/004/001/02"
	catm_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/004/001/03"
	catm_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/004/001/04"
	catm_004_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/004/001/05"
	catm_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/01"
	catm_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/02"
	catm_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/03"
	catm_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/04"
	catm_005_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/05"
	catm_005_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/005/001/06"
	catm_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/006/001/01"
	catm_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/006/001/02"
	catm_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/006/001/03"
	catm_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/006/001/04"
	catm_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/007/001/01"
	catm_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/007/001/02"
	catm_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/007/001/03"
	catm_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/008/001/01"
	catm_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/008/001/02"
	catm_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/catm/008/001/03"
	catp_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/001/001/01"
	catp_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/001/001/02"
	catp_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/002/001/01"
	catp_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/002/001/02"
	catp_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/003/001/01"
	catp_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/003/001/02"
	catp_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/004/001/01"
	catp_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/004/001/02"
	catp_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/005/001/01"
	catp_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/005/001/02"
	catp_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/006/001/01"
	catp_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/006/001/02"
	catp_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/007/001/01"
	catp_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/007/001/02"
	catp_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/008/001/01"
	catp_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/008/001/02"
	catp_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/009/001/01"
	catp_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/009/001/02"
	catp_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/010/001/01"
	catp_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/010/001/02"
	catp_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/011/001/01"
	catp_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/011/001/02"
	catp_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/012/001/01"
	catp_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/013/001/01"
	catp_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/014/001/01"
	catp_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/015/001/01"
	catp_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/016/001/01"
	catp_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/catp/017/001/01"
	colr_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/001/001/01"
	colr_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/002/001/01"
	colr_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/003/001/03"
	colr_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/003/001/04"
	colr_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/004/001/03"
	colr_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/004/001/04"
	colr_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/005/001/03"
	colr_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/005/001/04"
	colr_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/006/001/03"
	colr_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/006/001/04"
	colr_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/007/001/03"
	colr_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/007/001/04"
	colr_007_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/007/001/05"
	colr_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/008/001/03"
	colr_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/008/001/04"
	colr_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/008/001/05"
	colr_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/009/001/03"
	colr_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/009/001/04"
	colr_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/010/001/03"
	colr_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/010/001/04"
	colr_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/011/001/03"
	colr_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/011/001/04"
	colr_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/012/001/03"
	colr_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/012/001/04"
	colr_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/013/001/03"
	colr_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/013/001/04"
	colr_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/014/001/03"
	colr_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/014/001/04"
	colr_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/015/001/03"
	colr_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/015/001/04"
	colr_016_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/016/001/02"
	colr_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/colr/016/001/03"
	fxtr_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/008/001/05"
	fxtr_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/008/001/06"
	fxtr_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/013/001/03"
	fxtr_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/014/001/03"
	fxtr_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/014/001/04"
	fxtr_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/015/001/03"
	fxtr_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/015/001/04"
	fxtr_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/016/001/03"
	fxtr_016_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/016/001/04"
	fxtr_017_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/017/001/03"
	fxtr_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/017/001/04"
	fxtr_030_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/030/001/03"
	fxtr_030_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/030/001/04"
	fxtr_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/031/001/01"
	fxtr_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/032/001/01"
	fxtr_033_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/033/001/01"
	fxtr_034_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/034/001/01"
	fxtr_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/035/001/01"
	fxtr_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/036/001/01"
	fxtr_037_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/037/001/01"
	fxtr_038_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/fxtr/038/001/01"
	pacs_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/03"
	pacs_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/07"
	pacs_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/08"
	pacs_002_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/09"
	pacs_002_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/10"
	pacs_002_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/002/001/11"
	pacs_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/003/001/02"
	pacs_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/003/001/06"
	pacs_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/003/001/07"
	pacs_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/003/001/08"
	pacs_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/02"
	pacs_004_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/06"
	pacs_004_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/07"
	pacs_004_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/08"
	pacs_004_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/09"
	pacs_004_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/004/001/10"
	pacs_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/02"
	pacs_007_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/06"
	pacs_007_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/07"
	pacs_007_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/08"
	pacs_007_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/09"
	pacs_007_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/007/001/10"
	pacs_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/02"
	pacs_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/05"
	pacs_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/06"
	pacs_008_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/07"
	pacs_008_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/08"
	pacs_008_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/008/001/09"
	pacs_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/009/001/02"
	pacs_009_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/009/001/06"
	pacs_009_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/009/001/07"
	pacs_009_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/009/001/08"
	pacs_009_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/009/001/09"
	pacs_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/010/001/02"
	pacs_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/010/001/03"
	pacs_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/010/001/04"
	pacs_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/028/001/01"
	pacs_028_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/028/001/02"
	pacs_028_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/028/001/03"
	pacs_028_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pacs/028/001/04"
	pain_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/03"
	pain_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/04"
	pain_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/05"
	pain_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/06"
	pain_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/07"
	pain_001_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/08"
	pain_001_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/09"
	pain_001_001_10_1 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/001/001/10_1"
	pain_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/03"
	pain_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/04"
	pain_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/05"
	pain_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/06"
	pain_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/07"
	pain_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/08"
	pain_002_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/09"
	pain_002_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/10"
	pain_002_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/002/001/11"
	pain_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/02"
	pain_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/03"
	pain_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/04"
	pain_007_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/05"
	pain_007_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/06"
	pain_007_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/07"
	pain_007_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/08"
	pain_007_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/09"
	pain_007_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/007/001/10"
	pain_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/02"
	pain_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/03"
	pain_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/04"
	pain_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/05"
	pain_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/06"
	pain_008_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/07"
	pain_008_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/08"
	pain_008_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/008/001/09"
	pain_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/01"
	pain_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/02"
	pain_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/03"
	pain_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/04"
	pain_009_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/05"
	pain_009_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/009/001/06"
	pain_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/01"
	pain_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/02"
	pain_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/03"
	pain_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/04"
	pain_010_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/05"
	pain_010_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/010/001/06"
	pain_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/01"
	pain_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/02"
	pain_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/03"
	pain_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/04"
	pain_011_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/05"
	pain_011_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/011/001/06"
	pain_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/01"
	pain_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/02"
	pain_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/03"
	pain_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/04"
	pain_012_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/05"
	pain_012_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/012/001/06"
	pain_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/01"
	pain_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/02"
	pain_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/03"
	pain_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/04"
	pain_013_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/05"
	pain_013_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/06"
	pain_013_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/07"
	pain_013_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/013/001/08"
	pain_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/01"
	pain_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/02"
	pain_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/03"
	pain_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/04"
	pain_014_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/05"
	pain_014_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/06"
	pain_014_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/07"
	pain_014_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/014/001/08"
	pain_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/017/001/01"
	pain_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/017/001/02"
	pain_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/018/001/01"
	pain_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/pain/018/001/02"
	reda_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/001/001/03"
	reda_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/001/001/04"
	reda_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/002/001/03"
	reda_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/002/001/04"
	reda_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/003/001/03"
	reda_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/004/001/02"
	reda_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/004/001/03"
	reda_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/004/001/04"
	reda_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/005/001/02"
	reda_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/005/001/03"
	reda_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/014/001/01"
	reda_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/015/001/01"
	reda_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/016/001/01"
	reda_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/017/001/01"
	reda_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/018/001/01"
	reda_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/019/001/01"
	reda_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/020/001/01"
	reda_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/021/001/01"
	reda_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/022/001/01"
	reda_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/023/001/01"
	reda_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/031/001/01"
	reda_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/032/001/01"
	reda_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/035/001/01"
	reda_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/036/001/01"
	reda_037_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/037/001/01"
	reda_041_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/041/001/01"
	reda_042_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/042/001/01"
	reda_043_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/043/001/01"
	reda_056_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/056/001/01"
	reda_057_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/057/001/01"
	reda_058_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/058/001/01"
	reda_059_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/059/001/01"
	reda_060_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/060/001/01"
	reda_061_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/061/001/01"
	reda_066_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/066/001/01"
	reda_067_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/067/001/01"
	reda_068_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/068/001/01"
	reda_069_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/069/001/01"
	reda_070_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/070/001/01"
	reda_071_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/071/001/01"
	reda_072_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/072/001/01"
	reda_073_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/reda/073/001/01"
	remt_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/001/001/01"
	remt_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/001/001/02"
	remt_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/001/001/03"
	remt_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/001/001/04"
	remt_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/002/001/01"
	remt_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/remt/002/001/02"
	secl_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/001/001/03"
	secl_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/002/001/03"
	secl_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/003/001/03"
	secl_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/004/001/03"
	secl_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/005/001/02"
	secl_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/006/001/02"
	secl_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/007/001/03"
	secl_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/008/001/03"
	secl_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/009/001/03"
	secl_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/secl/010/001/03"
	seev_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/02"
	seev_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/03"
	seev_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/04"
	seev_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/05"
	seev_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/06"
	seev_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/001/001/07"
	seev_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/002/001/02"
	seev_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/002/001/03"
	seev_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/002/001/04"
	seev_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/002/001/05"
	seev_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/002/001/06"
	seev_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/003/001/02"
	seev_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/003/001/03"
	seev_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/003/001/04"
	seev_003_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/003/001/05"
	seev_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/003/001/06"
	seev_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/004/001/02"
	seev_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/004/001/03"
	seev_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/004/001/04"
	seev_004_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/004/001/05"
	seev_004_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/004/001/06"
	seev_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/005/001/02"
	seev_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/005/001/03"
	seev_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/005/001/04"
	seev_005_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/005/001/05"
	seev_005_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/005/001/06"
	seev_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/006/001/02"
	seev_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/006/001/03"
	seev_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/006/001/04"
	seev_006_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/006/001/05"
	seev_006_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/006/001/06"
	seev_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/007/001/02"
	seev_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/007/001/03"
	seev_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/007/001/04"
	seev_007_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/007/001/05"
	seev_007_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/007/001/06"
	seev_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/008/001/02"
	seev_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/008/001/03"
	seev_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/008/001/04"
	seev_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/008/001/05"
	seev_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/008/001/06"
	seev_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/009/001/01"
	seev_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/010/001/01"
	seev_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/011/001/01"
	seev_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/012/001/01"
	seev_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/013/001/01"
	seev_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/014/001/01"
	seev_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/015/001/01"
	seev_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/016/001/01"
	seev_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/017/001/01"
	seev_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/018/001/01"
	seev_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/019/001/01"
	seev_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/020/001/01"
	seev_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/021/001/01"
	seev_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/022/001/01"
	seev_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/023/001/01"
	seev_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/024/001/01"
	seev_025_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/025/001/01"
	seev_026_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/026/001/01"
	seev_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/027/001/01"
	seev_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/028/001/01"
	seev_029_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/029/001/01"
	seev_030_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/030/001/01"
	seev_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/01"
	seev_031_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/02"
	seev_031_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/03"
	seev_031_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/04"
	seev_031_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/05"
	seev_031_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/06"
	seev_031_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/07"
	seev_031_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/08"
	seev_031_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/09"
	seev_031_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/001/10"
	seev_031_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/002/06"
	seev_031_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/002/07"
	seev_031_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/002/08"
	seev_031_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/002/09"
	seev_031_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/031/002/10"
	seev_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/01"
	seev_032_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/02"
	seev_032_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/03"
	seev_032_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/04"
	seev_032_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/05"
	seev_032_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/06"
	seev_032_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/001/07"
	seev_032_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/002/05"
	seev_032_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/002/06"
	seev_032_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/032/002/07"
	seev_033_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/01"
	seev_033_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/02"
	seev_033_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/03"
	seev_033_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/04"
	seev_033_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/05"
	seev_033_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/06"
	seev_033_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/07"
	seev_033_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/08"
	seev_033_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/09"
	seev_033_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/001/10"
	seev_033_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/002/06"
	seev_033_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/002/07"
	seev_033_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/002/08"
	seev_033_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/002/09"
	seev_033_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/033/002/10"
	seev_034_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/01"
	seev_034_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/02"
	seev_034_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/03"
	seev_034_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/04"
	seev_034_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/05"
	seev_034_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/06"
	seev_034_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/07"
	seev_034_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/08"
	seev_034_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/09"
	seev_034_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/10"
	seev_034_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/001/11"
	seev_034_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/002/07"
	seev_034_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/002/08"
	seev_034_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/002/09"
	seev_034_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/002/10"
	seev_034_002_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/034/002/11"
	seev_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/01"
	seev_035_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/02"
	seev_035_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/03"
	seev_035_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/04"
	seev_035_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/05"
	seev_035_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/06"
	seev_035_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/07"
	seev_035_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/08"
	seev_035_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/09"
	seev_035_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/10"
	seev_035_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/001/11"
	seev_035_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/002/07"
	seev_035_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/002/08"
	seev_035_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/002/09"
	seev_035_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/002/10"
	seev_035_002_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/035/002/11"
	seev_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/01"
	seev_036_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/02"
	seev_036_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/03"
	seev_036_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/04"
	seev_036_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/05"
	seev_036_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/06"
	seev_036_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/07"
	seev_036_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/08"
	seev_036_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/09"
	seev_036_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/10"
	seev_036_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/001/11"
	seev_036_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/002/07"
	seev_036_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/002/08"
	seev_036_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/002/09"
	seev_036_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/002/10"
	seev_036_002_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/036/002/11"
	seev_037_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/01"
	seev_037_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/02"
	seev_037_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/03"
	seev_037_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/04"
	seev_037_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/05"
	seev_037_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/06"
	seev_037_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/07"
	seev_037_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/08"
	seev_037_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/09"
	seev_037_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/10"
	seev_037_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/001/11"
	seev_037_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/002/07"
	seev_037_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/002/08"
	seev_037_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/002/09"
	seev_037_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/002/10"
	seev_037_002_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/037/002/11"
	seev_038_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/001/01"
	seev_038_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/001/02"
	seev_038_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/001/03"
	seev_038_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/001/04"
	seev_038_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/001/05"
	seev_038_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/002/04"
	seev_038_002_05_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/038/002/05_0"
	seev_039_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/01"
	seev_039_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/02"
	seev_039_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/03"
	seev_039_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/04"
	seev_039_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/05"
	seev_039_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/06"
	seev_039_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/07"
	seev_039_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/08"
	seev_039_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/09"
	seev_039_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/001/10"
	seev_039_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/002/06"
	seev_039_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/002/07"
	seev_039_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/002/08"
	seev_039_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/002/09"
	seev_039_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/039/002/10"
	seev_040_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/01"
	seev_040_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/02"
	seev_040_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/03"
	seev_040_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/04"
	seev_040_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/05"
	seev_040_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/06"
	seev_040_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/07"
	seev_040_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/08"
	seev_040_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/001/09"
	seev_040_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/002/06"
	seev_040_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/002/07"
	seev_040_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/002/08"
	seev_040_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/040/002/09"
	seev_041_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/01"
	seev_041_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/02"
	seev_041_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/03"
	seev_041_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/04"
	seev_041_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/05"
	seev_041_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/06"
	seev_041_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/07"
	seev_041_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/08"
	seev_041_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/09"
	seev_041_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/001/10"
	seev_041_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/002/06"
	seev_041_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/002/07"
	seev_041_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/002/08"
	seev_041_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/002/09"
	seev_041_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/041/002/10"
	seev_042_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/01"
	seev_042_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/02"
	seev_042_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/03"
	seev_042_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/04"
	seev_042_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/05"
	seev_042_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/06"
	seev_042_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/07"
	seev_042_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/08"
	seev_042_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/001/09"
	seev_042_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/002/05"
	seev_042_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/002/06"
	seev_042_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/002/07"
	seev_042_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/002/08"
	seev_042_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/042/002/09"
	seev_044_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/01"
	seev_044_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/02"
	seev_044_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/03"
	seev_044_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/04"
	seev_044_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/05"
	seev_044_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/06"
	seev_044_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/07"
	seev_044_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/08"
	seev_044_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/09"
	seev_044_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/001/10"
	seev_044_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/002/06"
	seev_044_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/002/07"
	seev_044_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/002/08"
	seev_044_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/002/09"
	seev_044_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/044/002/10"
	seev_045_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/045/001/01"
	seev_045_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/045/001/02"
	seev_046_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/046/001/01"
	seev_047_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/047/001/01"
	seev_048_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/048/001/01"
	seev_049_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/seev/049/001/01"
	semt_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/001/001/02"
	semt_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/001/001/03"
	semt_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/02"
	semt_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/03"
	semt_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/04"
	semt_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/06"
	semt_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/07"
	semt_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/08"
	semt_002_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/09"
	semt_002_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/001/10"
	semt_002_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/002/09"
	semt_002_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/002/002/10"
	semt_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/02"
	semt_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/03"
	semt_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/04"
	semt_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/06"
	semt_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/07"
	semt_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/08"
	semt_003_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/09"
	semt_003_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/001/10"
	semt_003_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/002/09"
	semt_003_002_10_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/003/002/10_0"
	semt_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/004/001/02"
	semt_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/005/001/02"
	semt_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/006/001/02"
	semt_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/006/001/03"
	semt_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/007/001/02"
	semt_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/007/001/03"
	semt_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/013/001/01"
	semt_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/013/001/02"
	semt_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/013/001/03"
	semt_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/013/001/04"
	semt_013_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/013/002/04"
	semt_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/01"
	semt_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/02"
	semt_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/03"
	semt_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/04"
	semt_014_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/05"
	semt_014_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/001/06"
	semt_014_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/002/05"
	semt_014_002_06_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/014/002/06_0"
	semt_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/01"
	semt_015_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/02"
	semt_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/03"
	semt_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/04"
	semt_015_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/05"
	semt_015_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/06"
	semt_015_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/07"
	semt_015_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/001/08"
	semt_015_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/015/002/08"
	semt_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/01"
	semt_016_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/02"
	semt_016_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/04"
	semt_016_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/05"
	semt_016_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/06"
	semt_016_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/07"
	semt_016_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/001/08"
	semt_016_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/016/002/08"
	semt_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/01"
	semt_017_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/02"
	semt_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/04"
	semt_017_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/05"
	semt_017_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/06"
	semt_017_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/07"
	semt_017_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/08"
	semt_017_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/09"
	semt_017_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/001/10"
	semt_017_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/002/08"
	semt_017_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/017/002/10"
	semt_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/01"
	semt_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/02"
	semt_018_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/04"
	semt_018_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/05"
	semt_018_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/06"
	semt_018_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/07"
	semt_018_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/08"
	semt_018_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/09"
	semt_018_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/10"
	semt_018_001_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/001/11"
	semt_018_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/002/09"
	semt_018_002_11 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/018/002/11"
	semt_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/01"
	semt_019_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/02"
	semt_019_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/03"
	semt_019_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/04"
	semt_019_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/05"
	semt_019_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/06"
	semt_019_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/07"
	semt_019_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/001/08"
	semt_019_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/002/07"
	semt_019_002_08_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/019/002/08_0"
	semt_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/001/01"
	semt_020_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/001/02"
	semt_020_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/001/03"
	semt_020_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/001/04"
	semt_020_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/001/05"
	semt_020_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/020/002/05"
	semt_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/01"
	semt_021_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/02"
	semt_021_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/03"
	semt_021_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/04"
	semt_021_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/05"
	semt_021_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/001/06"
	semt_021_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/021/002/06"
	semt_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/001/01"
	semt_022_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/001/02"
	semt_022_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/001/03"
	semt_022_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/001/04"
	semt_022_002_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/002/03"
	semt_022_002_04_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/022/002/04_0"
	semt_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/023/001/01"
	semt_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/024/001/01"
	semt_041_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/041/001/01"
	semt_041_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/041/001/02"
	semt_042_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/semt/042/001/01"
	sese_001_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/02"
	sese_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/03"
	sese_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/04"
	sese_001_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/05"
	sese_001_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/06"
	sese_001_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/07"
	sese_001_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/08"
	sese_001_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/001/001/09"
	sese_002_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/02"
	sese_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/03"
	sese_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/04"
	sese_002_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/05"
	sese_002_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/06"
	sese_002_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/07"
	sese_002_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/08"
	sese_002_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/002/001/09"
	sese_003_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/02"
	sese_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/03"
	sese_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/04"
	sese_003_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/05"
	sese_003_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/06"
	sese_003_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/07"
	sese_003_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/08"
	sese_003_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/003/001/09"
	sese_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/02"
	sese_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/03"
	sese_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/04"
	sese_004_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/05"
	sese_004_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/06"
	sese_004_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/07"
	sese_004_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/08"
	sese_004_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/004/001/09"
	sese_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/02"
	sese_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/03"
	sese_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/04"
	sese_005_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/05"
	sese_005_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/06"
	sese_005_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/07"
	sese_005_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/08"
	sese_005_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/005/001/09"
	sese_006_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/02"
	sese_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/03"
	sese_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/04"
	sese_006_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/05"
	sese_006_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/06"
	sese_006_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/07"
	sese_006_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/08"
	sese_006_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/006/001/09"
	sese_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/02"
	sese_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/03"
	sese_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/04"
	sese_007_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/05"
	sese_007_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/06"
	sese_007_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/07"
	sese_007_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/08"
	sese_007_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/007/001/09"
	sese_008_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/02"
	sese_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/03"
	sese_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/04"
	sese_008_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/05"
	sese_008_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/06"
	sese_008_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/07"
	sese_008_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/08"
	sese_008_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/008/001/09"
	sese_009_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/02"
	sese_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/03"
	sese_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/04"
	sese_009_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/05"
	sese_009_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/06"
	sese_009_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/009/001/07"
	sese_010_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/02"
	sese_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/03"
	sese_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/04"
	sese_010_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/05"
	sese_010_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/06"
	sese_010_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/010/001/07"
	sese_011_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/02"
	sese_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/03"
	sese_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/04"
	sese_011_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/05"
	sese_011_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/06"
	sese_011_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/07"
	sese_011_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/011/001/08"
	sese_012_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/02"
	sese_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/03"
	sese_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/04"
	sese_012_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/05"
	sese_012_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/06"
	sese_012_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/07"
	sese_012_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/08"
	sese_012_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/09"
	sese_012_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/012/001/10"
	sese_013_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/02"
	sese_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/03"
	sese_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/04"
	sese_013_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/05"
	sese_013_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/06"
	sese_013_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/07"
	sese_013_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/08"
	sese_013_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/09"
	sese_013_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/013/001/10"
	sese_014_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/02"
	sese_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/03"
	sese_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/04"
	sese_014_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/05"
	sese_014_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/06"
	sese_014_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/07"
	sese_014_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/08"
	sese_014_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/014/001/09"
	sese_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/01"
	sese_018_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/02"
	sese_018_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/03"
	sese_018_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/04"
	sese_018_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/05"
	sese_018_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/06"
	sese_018_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/018/001/07"
	sese_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/01"
	sese_019_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/02"
	sese_019_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/03"
	sese_019_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/04"
	sese_019_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/05"
	sese_019_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/06"
	sese_019_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/019/001/07"
	sese_020_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/01"
	sese_020_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/02"
	sese_020_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/03"
	sese_020_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/04"
	sese_020_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/05"
	sese_020_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/001/06"
	sese_020_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/002/05"
	sese_020_002_06_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/020/002/06_0"
	sese_021_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/001/01"
	sese_021_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/001/02"
	sese_021_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/001/03"
	sese_021_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/001/04"
	sese_021_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/001/05"
	sese_021_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/002/04"
	sese_021_002_05_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/021/002/05_0"
	sese_022_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/001/01"
	sese_022_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/001/02"
	sese_022_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/001/03"
	sese_022_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/001/04"
	sese_022_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/001/05"
	sese_022_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/002/04"
	sese_022_002_05_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/022/002/05_0"
	sese_023_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/01"
	sese_023_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/02"
	sese_023_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/04"
	sese_023_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/05"
	sese_023_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/06"
	sese_023_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/07"
	sese_023_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/08"
	sese_023_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/001/09"
	sese_023_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/002/08"
	sese_023_002_09_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/023/002/09_0"
	sese_024_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/01"
	sese_024_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/02"
	sese_024_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/04"
	sese_024_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/05"
	sese_024_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/06"
	sese_024_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/07"
	sese_024_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/08"
	sese_024_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/09"
	sese_024_001_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/001/10"
	sese_024_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/002/09"
	sese_024_002_10 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/024/002/10"
	sese_025_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/01"
	sese_025_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/02"
	sese_025_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/04"
	sese_025_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/05"
	sese_025_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/06"
	sese_025_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/07"
	sese_025_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/08"
	sese_025_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/001/09"
	sese_025_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/002/08"
	sese_025_002_09_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/025/002/09_0"
	sese_026_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/01"
	sese_026_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/02"
	sese_026_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/03"
	sese_026_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/04"
	sese_026_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/05"
	sese_026_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/06"
	sese_026_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/07"
	sese_026_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/001/08"
	sese_026_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/002/07"
	sese_026_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/026/002/08"
	sese_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/001/01"
	sese_027_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/001/02"
	sese_027_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/001/03"
	sese_027_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/001/04"
	sese_027_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/001/05"
	sese_027_002_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/027/002/05"
	sese_028_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/01"
	sese_028_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/02"
	sese_028_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/03"
	sese_028_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/04"
	sese_028_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/05"
	sese_028_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/06"
	sese_028_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/07"
	sese_028_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/001/08"
	sese_028_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/002/07"
	sese_028_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/028/002/08"
	sese_029_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/029/001/01"
	sese_029_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/029/001/02"
	sese_029_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/029/001/03"
	sese_029_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/029/001/04"
	sese_029_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/029/002/04"
	sese_030_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/01"
	sese_030_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/02"
	sese_030_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/04"
	sese_030_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/05"
	sese_030_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/06"
	sese_030_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/07"
	sese_030_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/001/08"
	sese_030_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/002/07"
	sese_030_002_08_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/030/002/08_0"
	sese_031_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/01"
	sese_031_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/02"
	sese_031_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/04"
	sese_031_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/05"
	sese_031_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/06"
	sese_031_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/07"
	sese_031_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/001/08"
	sese_031_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/002/07"
	sese_031_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/031/002/08"
	sese_032_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/01"
	sese_032_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/02"
	sese_032_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/04"
	sese_032_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/05"
	sese_032_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/06"
	sese_032_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/07"
	sese_032_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/08"
	sese_032_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/001/09"
	sese_032_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/002/08"
	sese_032_002_09_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/032/002/09_0"
	sese_033_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/01"
	sese_033_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/02"
	sese_033_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/04"
	sese_033_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/05"
	sese_033_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/06"
	sese_033_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/07"
	sese_033_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/08"
	sese_033_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/001/09"
	sese_033_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/002/08"
	sese_033_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/033/002/09"
	sese_034_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/01"
	sese_034_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/02"
	sese_034_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/03"
	sese_034_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/04"
	sese_034_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/05"
	sese_034_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/06"
	sese_034_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/07"
	sese_034_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/001/08"
	sese_034_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/002/07"
	sese_034_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/034/002/08"
	sese_035_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/01"
	sese_035_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/02"
	sese_035_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/04"
	sese_035_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/05"
	sese_035_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/06"
	sese_035_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/07"
	sese_035_001_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/08"
	sese_035_001_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/001/09"
	sese_035_002_08 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/002/08"
	sese_035_002_09 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/035/002/09"
	sese_036_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/01"
	sese_036_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/02"
	sese_036_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/03"
	sese_036_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/04"
	sese_036_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/05"
	sese_036_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/06"
	sese_036_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/001/07"
	sese_036_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/002/06"
	sese_036_002_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/036/002/07"
	sese_037_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/01"
	sese_037_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/02"
	sese_037_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/03"
	sese_037_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/04"
	sese_037_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/05"
	sese_037_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/001/06"
	sese_037_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/037/002/06"
	sese_038_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/02"
	sese_038_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/03"
	sese_038_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/04"
	sese_038_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/05"
	sese_038_001_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/06"
	sese_038_001_07 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/001/07"
	sese_038_002_06 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/002/06"
	sese_038_002_07_0 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/038/002/07_0"
	sese_039_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/039/001/01"
	sese_039_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/039/001/02"
	sese_039_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/039/001/03"
	sese_039_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/039/001/04"
	sese_039_002_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/039/002/04"
	sese_040_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/040/001/01"
	sese_040_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/040/001/02"
	sese_040_002_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/sese/040/002/02"
	setr_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/001/001/03"
	setr_001_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/001/001/04"
	setr_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/002/001/03"
	setr_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/002/001/04"
	setr_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/003/001/03"
	setr_003_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/003/001/04"
	setr_004_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/004/001/03"
	setr_004_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/004/001/04"
	setr_005_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/005/001/03"
	setr_005_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/005/001/04"
	setr_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/006/001/03"
	setr_006_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/006/001/04"
	setr_007_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/007/001/03"
	setr_007_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/007/001/04"
	setr_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/008/001/03"
	setr_008_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/008/001/04"
	setr_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/009/001/03"
	setr_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/009/001/04"
	setr_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/010/001/03"
	setr_010_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/010/001/04"
	setr_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/011/001/03"
	setr_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/011/001/04"
	setr_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/012/001/03"
	setr_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/012/001/04"
	setr_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/013/001/03"
	setr_013_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/013/001/04"
	setr_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/014/001/03"
	setr_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/014/001/04"
	setr_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/015/001/03"
	setr_015_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/015/001/04"
	setr_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/016/001/03"
	setr_016_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/016/001/04"
	setr_017_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/017/001/03"
	setr_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/017/001/04"
	setr_018_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/018/001/03"
	setr_018_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/018/001/04"
	setr_027_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/027/001/01"
	setr_027_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/027/001/02"
	setr_027_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/027/001/03"
	setr_029_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/029/001/01"
	setr_030_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/030/001/01"
	setr_044_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/044/001/01"
	setr_044_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/044/001/02"
	setr_047_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/047/001/01"
	setr_047_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/047/001/02"
	setr_048_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/048/001/01"
	setr_049_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/049/001/01"
	setr_049_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/049/001/02"
	setr_050_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/050/001/01"
	setr_051_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/051/001/01"
	setr_051_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/051/001/02"
	setr_052_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/052/001/01"
	setr_053_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/053/001/01"
	setr_053_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/053/001/02"
	setr_054_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/054/001/01"
	setr_055_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/055/001/01"
	setr_055_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/055/001/02"
	setr_056_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/056/001/01"
	setr_057_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/057/001/01"
	setr_057_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/057/001/02"
	setr_058_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/058/001/01"
	setr_058_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/setr/058/001/02"
	tsin_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/001/001/01"
	tsin_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/002/001/01"
	tsin_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/003/001/01"
	tsin_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/004/001/01"
	tsin_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/005/001/01"
	tsin_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/006/001/01"
	tsin_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/007/001/01"
	tsin_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/008/001/01"
	tsin_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/009/001/01"
	tsin_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/010/001/01"
	tsin_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/011/001/01"
	tsin_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/012/001/01"
	tsin_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsin/013/001/01"
	tsmt_001_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/001/001/03"
	tsmt_002_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/002/001/03"
	tsmt_002_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/002/001/04"
	tsmt_003_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/003/001/03"
	tsmt_004_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/004/001/02"
	tsmt_005_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/005/001/02"
	tsmt_006_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/006/001/03"
	tsmt_007_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/007/001/02"
	tsmt_008_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/008/001/03"
	tsmt_009_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/009/001/03"
	tsmt_009_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/009/001/04"
	tsmt_009_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/009/001/05"
	tsmt_010_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/010/001/03"
	tsmt_011_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/011/001/03"
	tsmt_011_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/011/001/04"
	tsmt_012_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/012/001/03"
	tsmt_012_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/012/001/04"
	tsmt_012_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/012/001/05"
	tsmt_013_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/013/001/03"
	tsmt_014_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/014/001/03"
	tsmt_014_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/014/001/04"
	tsmt_014_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/014/001/05"
	tsmt_015_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/015/001/03"
	tsmt_016_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/016/001/03"
	tsmt_017_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/017/001/03"
	tsmt_017_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/017/001/04"
	tsmt_017_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/017/001/05"
	tsmt_018_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/018/001/03"
	tsmt_018_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/018/001/04"
	tsmt_018_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/018/001/05"
	tsmt_019_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/019/001/03"
	tsmt_019_001_04 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/019/001/04"
	tsmt_019_001_05 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/019/001/05"
	tsmt_020_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/020/001/02"
	tsmt_021_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/021/001/03"
	tsmt_022_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/022/001/02"
	tsmt_023_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/023/001/03"
	tsmt_024_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/024/001/03"
	tsmt_025_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/025/001/03"
	tsmt_026_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/026/001/02"
	tsmt_027_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/027/001/02"
	tsmt_028_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/028/001/03"
	tsmt_029_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/029/001/02"
	tsmt_030_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/030/001/03"
	tsmt_031_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/031/001/03"
	tsmt_032_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/032/001/03"
	tsmt_033_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/033/001/03"
	tsmt_034_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/034/001/03"
	tsmt_035_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/035/001/03"
	tsmt_036_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/036/001/03"
	tsmt_037_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/037/001/03"
	tsmt_038_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/038/001/03"
	tsmt_040_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/040/001/03"
	tsmt_041_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/041/001/03"
	tsmt_042_001_03 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/042/001/03"
	tsmt_044_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/044/001/01"
	tsmt_044_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/044/001/02"
	tsmt_045_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/045/001/01"
	tsmt_045_001_02 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/045/001/02"
	tsmt_046_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/046/001/01"
	tsmt_047_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/047/001/01"
	tsmt_048_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/048/001/01"
	tsmt_049_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/049/001/01"
	tsmt_050_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/050/001/01"
	tsmt_051_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/051/001/01"
	tsmt_052_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/052/001/01"
	tsmt_053_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/053/001/01"
	tsmt_054_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/054/001/01"
	tsmt_055_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsmt/055/001/01"
	tsrv_001_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/001/001/01"
	tsrv_002_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/002/001/01"
	tsrv_003_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/003/001/01"
	tsrv_004_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/004/001/01"
	tsrv_005_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/005/001/01"
	tsrv_006_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/006/001/01"
	tsrv_007_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/007/001/01"
	tsrv_008_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/008/001/01"
	tsrv_009_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/009/001/01"
	tsrv_010_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/010/001/01"
	tsrv_011_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/011/001/01"
	tsrv_012_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/012/001/01"
	tsrv_013_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/013/001/01"
	tsrv_014_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/014/001/01"
	tsrv_015_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/015/001/01"
	tsrv_016_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/016/001/01"
	tsrv_017_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/017/001/01"
	tsrv_018_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/018/001/01"
	tsrv_019_001_01 "github.com/mgruener/iso20022tocsv/internal/iso20022/tsrv/019/001/01"
	"io"
	"io/ioutil"
	"os"
)

func New(file string) (interface{}, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	return NewFromReader(f)
}

func NewFromReader(reader io.Reader) (interface{}, error) {
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}

	var base xmlbase

	if err := xml.Unmarshal(data, &base); err != nil {
		return nil, err
	}

	return load(base.XMLName.Space, data)
}

func load(space string, data []byte) (interface{}, error) {
	var globalErr error
	var doc interface{}
	switch space {
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.02":
		var isoDoc acmt_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.03":
		var isoDoc acmt_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.04":
		var isoDoc acmt_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.05":
		var isoDoc acmt_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.06":
		var isoDoc acmt_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.07":
		var isoDoc acmt_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.001.001.08":
		var isoDoc acmt_001_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_001_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.02":
		var isoDoc acmt_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.03":
		var isoDoc acmt_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.04":
		var isoDoc acmt_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.05":
		var isoDoc acmt_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.06":
		var isoDoc acmt_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.07":
		var isoDoc acmt_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.002.001.08":
		var isoDoc acmt_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.02":
		var isoDoc acmt_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.03":
		var isoDoc acmt_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.04":
		var isoDoc acmt_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.05":
		var isoDoc acmt_003_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.06":
		var isoDoc acmt_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.07":
		var isoDoc acmt_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.08":
		var isoDoc acmt_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.005.001.02":
		var isoDoc acmt_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.005.001.03":
		var isoDoc acmt_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.005.001.04":
		var isoDoc acmt_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.005.001.05":
		var isoDoc acmt_005_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_005_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.005.001.06":
		var isoDoc acmt_005_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_005_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.02":
		var isoDoc acmt_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.03":
		var isoDoc acmt_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.04":
		var isoDoc acmt_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.05":
		var isoDoc acmt_006_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.06":
		var isoDoc acmt_006_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07":
		var isoDoc acmt_006_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_006_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.007.001.01":
		var isoDoc acmt_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.007.001.02":
		var isoDoc acmt_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.007.001.03":
		var isoDoc acmt_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.008.001.01":
		var isoDoc acmt_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.008.001.02":
		var isoDoc acmt_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.008.001.03":
		var isoDoc acmt_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.009.001.01":
		var isoDoc acmt_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.009.001.02":
		var isoDoc acmt_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.009.001.03":
		var isoDoc acmt_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.010.001.01":
		var isoDoc acmt_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.010.001.02":
		var isoDoc acmt_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.010.001.03":
		var isoDoc acmt_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.011.001.01":
		var isoDoc acmt_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.011.001.02":
		var isoDoc acmt_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.011.001.03":
		var isoDoc acmt_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.012.001.01":
		var isoDoc acmt_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.012.001.02":
		var isoDoc acmt_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.012.001.03":
		var isoDoc acmt_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.013.001.01":
		var isoDoc acmt_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.013.001.02":
		var isoDoc acmt_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.013.001.03":
		var isoDoc acmt_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.014.001.01":
		var isoDoc acmt_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.014.001.02":
		var isoDoc acmt_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.014.001.03":
		var isoDoc acmt_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.015.001.01":
		var isoDoc acmt_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.015.001.02":
		var isoDoc acmt_015_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_015_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.015.001.03":
		var isoDoc acmt_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.016.001.01":
		var isoDoc acmt_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.016.001.02":
		var isoDoc acmt_016_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_016_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.016.001.03":
		var isoDoc acmt_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.017.001.01":
		var isoDoc acmt_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.017.001.02":
		var isoDoc acmt_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.017.001.03":
		var isoDoc acmt_017_001_03_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_017_001_03_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.018.001.01":
		var isoDoc acmt_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.018.001.02":
		var isoDoc acmt_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.018.001.03":
		var isoDoc acmt_018_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_018_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.019.001.01":
		var isoDoc acmt_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.019.001.02":
		var isoDoc acmt_019_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_019_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.019.001.03":
		var isoDoc acmt_019_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_019_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.020.001.01":
		var isoDoc acmt_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.020.001.02":
		var isoDoc acmt_020_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_020_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.020.001.03":
		var isoDoc acmt_020_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_020_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.021.001.01":
		var isoDoc acmt_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.021.001.02":
		var isoDoc acmt_021_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_021_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.021.001.03":
		var isoDoc acmt_021_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_021_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.022.001.01":
		var isoDoc acmt_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.022.001.02":
		var isoDoc acmt_022_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_022_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.023.001.01":
		var isoDoc acmt_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.023.001.02":
		var isoDoc acmt_023_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_023_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.024.001.01":
		var isoDoc acmt_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.024.001.02":
		var isoDoc acmt_024_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_024_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.027.001.01":
		var isoDoc acmt_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.027.001.02":
		var isoDoc acmt_027_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_027_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.027.001.03":
		var isoDoc acmt_027_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_027_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.028.001.01":
		var isoDoc acmt_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.028.001.02":
		var isoDoc acmt_028_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_028_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.028.001.03":
		var isoDoc acmt_028_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_028_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.029.001.01":
		var isoDoc acmt_029_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_029_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.029.001.02":
		var isoDoc acmt_029_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_029_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.029.001.03":
		var isoDoc acmt_029_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_029_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.030.001.01":
		var isoDoc acmt_030_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_030_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.030.001.02":
		var isoDoc acmt_030_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_030_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.031.001.01":
		var isoDoc acmt_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.031.001.02":
		var isoDoc acmt_031_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_031_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.031.001.03":
		var isoDoc acmt_031_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_031_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.032.001.01":
		var isoDoc acmt_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.032.001.02":
		var isoDoc acmt_032_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_032_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.032.001.03":
		var isoDoc acmt_032_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_032_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.033.001.01":
		var isoDoc acmt_033_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_033_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.033.001.02":
		var isoDoc acmt_033_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_033_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.034.001.01":
		var isoDoc acmt_034_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_034_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.034.001.02":
		var isoDoc acmt_034_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_034_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.034.001.03":
		var isoDoc acmt_034_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_034_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.035.001.01":
		var isoDoc acmt_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.035.001.02":
		var isoDoc acmt_035_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_035_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.036.001.01":
		var isoDoc acmt_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.037.001.01":
		var isoDoc acmt_037_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_037_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:acmt.037.001.02":
		var isoDoc acmt_037_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as acmt_037_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.004.001.02":
		var isoDoc admi_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.005.001.01":
		var isoDoc admi_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.006.001.01":
		var isoDoc admi_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.007.001.01":
		var isoDoc admi_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.009.001.02":
		var isoDoc admi_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.010.001.02":
		var isoDoc admi_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.011.001.01":
		var isoDoc admi_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:admi.017.001.01":
		var isoDoc admi_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as admi_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.001.001.01":
		var isoDoc auth_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.002.001.01":
		var isoDoc auth_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.003.001.01":
		var isoDoc auth_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.008.001.02":
		var isoDoc auth_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.009.001.02":
		var isoDoc auth_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.010.001.01":
		var isoDoc auth_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.011.001.01":
		var isoDoc auth_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.012.001.01":
		var isoDoc auth_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.012.001.02":
		var isoDoc auth_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.013.001.01":
		var isoDoc auth_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.013.001.02":
		var isoDoc auth_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.014.001.01":
		var isoDoc auth_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.014.001.02":
		var isoDoc auth_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.015.001.01":
		var isoDoc auth_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.015.001.02":
		var isoDoc auth_015_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_015_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.016.001.01":
		var isoDoc auth_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.017.001.01":
		var isoDoc auth_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.017.001.02":
		var isoDoc auth_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.018.001.01":
		var isoDoc auth_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.018.001.02":
		var isoDoc auth_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.019.001.01":
		var isoDoc auth_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.019.001.02":
		var isoDoc auth_019_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_019_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.020.001.01":
		var isoDoc auth_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.020.001.02":
		var isoDoc auth_020_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_020_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.021.001.01":
		var isoDoc auth_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.021.001.02":
		var isoDoc auth_021_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_021_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.022.001.01":
		var isoDoc auth_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.022.001.02":
		var isoDoc auth_022_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_022_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.023.001.01":
		var isoDoc auth_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.023.001.02":
		var isoDoc auth_023_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_023_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.024.001.01":
		var isoDoc auth_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.024.001.02":
		var isoDoc auth_024_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_024_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.025.001.01":
		var isoDoc auth_025_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_025_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.025.001.02":
		var isoDoc auth_025_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_025_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.026.001.02":
		var isoDoc auth_026_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_026_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.027.001.01":
		var isoDoc auth_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.027.001.02":
		var isoDoc auth_027_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_027_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.028.001.01":
		var isoDoc auth_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.029.001.01":
		var isoDoc auth_029_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_029_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.029.001.02":
		var isoDoc auth_029_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_029_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.030.001.01":
		var isoDoc auth_030_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_030_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.031.001.01":
		var isoDoc auth_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.032.001.01":
		var isoDoc auth_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.033.001.01":
		var isoDoc auth_033_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_033_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.033.001.02":
		var isoDoc auth_033_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_033_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.034.001.01":
		var isoDoc auth_034_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_034_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.035.001.01":
		var isoDoc auth_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.036.001.01":
		var isoDoc auth_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.036.001.02":
		var isoDoc auth_036_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_036_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.038.001.01":
		var isoDoc auth_038_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_038_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.039.001.01":
		var isoDoc auth_039_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_039_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.040.001.01":
		var isoDoc auth_040_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_040_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.041.001.01":
		var isoDoc auth_041_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_041_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.042.001.01":
		var isoDoc auth_042_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_042_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.042.001.02":
		var isoDoc auth_042_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_042_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.043.001.01":
		var isoDoc auth_043_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_043_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.044.001.01":
		var isoDoc auth_044_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_044_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.044.001.02":
		var isoDoc auth_044_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_044_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.045.001.01":
		var isoDoc auth_045_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_045_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.045.001.02":
		var isoDoc auth_045_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_045_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.047.001.01":
		var isoDoc auth_047_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_047_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.048.001.01":
		var isoDoc auth_048_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_048_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.049.001.01":
		var isoDoc auth_049_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_049_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.049.001.02":
		var isoDoc auth_049_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_049_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.050.001.01":
		var isoDoc auth_050_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_050_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.052.001.01":
		var isoDoc auth_052_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_052_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.054.001.01":
		var isoDoc auth_054_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_054_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.055.001.01":
		var isoDoc auth_055_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_055_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.056.001.01":
		var isoDoc auth_056_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_056_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.057.001.01":
		var isoDoc auth_057_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_057_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.058.001.01":
		var isoDoc auth_058_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_058_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.059.001.01":
		var isoDoc auth_059_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_059_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.060.001.01":
		var isoDoc auth_060_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_060_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.061.001.01":
		var isoDoc auth_061_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_061_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.062.001.01":
		var isoDoc auth_062_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_062_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.063.001.01":
		var isoDoc auth_063_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_063_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.064.001.01":
		var isoDoc auth_064_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_064_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.065.001.01":
		var isoDoc auth_065_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_065_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.066.001.01":
		var isoDoc auth_066_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_066_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.067.001.01":
		var isoDoc auth_067_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_067_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.068.001.01":
		var isoDoc auth_068_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_068_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.069.001.01":
		var isoDoc auth_069_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_069_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.070.001.01":
		var isoDoc auth_070_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_070_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.071.001.01":
		var isoDoc auth_071_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_071_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.072.001.01":
		var isoDoc auth_072_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_072_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.076.001.01":
		var isoDoc auth_076_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_076_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.077.001.01":
		var isoDoc auth_077_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_077_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.078.001.01":
		var isoDoc auth_078_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_078_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.079.001.01":
		var isoDoc auth_079_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_079_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.080.001.01":
		var isoDoc auth_080_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_080_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.083.001.01":
		var isoDoc auth_083_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_083_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.084.001.01":
		var isoDoc auth_084_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_084_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.085.001.01":
		var isoDoc auth_085_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_085_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.086.001.01":
		var isoDoc auth_086_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_086_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.090.001.01":
		var isoDoc auth_090_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_090_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.091.001.01":
		var isoDoc auth_091_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_091_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.092.001.01":
		var isoDoc auth_092_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_092_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.092.001.02":
		var isoDoc auth_092_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_092_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.094.001.01":
		var isoDoc auth_094_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_094_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.100.001.01":
		var isoDoc auth_100_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_100_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:auth.101.001.01":
		var isoDoc auth_101_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as auth_101_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.01":
		var isoDoc caaa_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.02":
		var isoDoc caaa_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.03":
		var isoDoc caaa_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.04":
		var isoDoc caaa_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.05":
		var isoDoc caaa_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.06":
		var isoDoc caaa_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.07":
		var isoDoc caaa_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.08":
		var isoDoc caaa_001_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.001.001.09":
		var isoDoc caaa_001_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_001_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.01":
		var isoDoc caaa_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.02":
		var isoDoc caaa_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.03":
		var isoDoc caaa_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.04":
		var isoDoc caaa_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.05":
		var isoDoc caaa_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.06":
		var isoDoc caaa_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.07":
		var isoDoc caaa_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.08":
		var isoDoc caaa_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.002.001.09":
		var isoDoc caaa_002_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_002_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.01":
		var isoDoc caaa_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.02":
		var isoDoc caaa_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.03":
		var isoDoc caaa_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.04":
		var isoDoc caaa_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.05":
		var isoDoc caaa_003_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.06":
		var isoDoc caaa_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.07":
		var isoDoc caaa_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.08":
		var isoDoc caaa_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.003.001.09":
		var isoDoc caaa_003_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_003_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.01":
		var isoDoc caaa_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.02":
		var isoDoc caaa_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.03":
		var isoDoc caaa_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.04":
		var isoDoc caaa_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.05":
		var isoDoc caaa_004_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.06":
		var isoDoc caaa_004_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.07":
		var isoDoc caaa_004_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.004.001.08":
		var isoDoc caaa_004_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_004_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.01":
		var isoDoc caaa_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.02":
		var isoDoc caaa_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.03":
		var isoDoc caaa_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.04":
		var isoDoc caaa_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.05":
		var isoDoc caaa_005_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.06":
		var isoDoc caaa_005_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.07":
		var isoDoc caaa_005_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.08":
		var isoDoc caaa_005_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.005.001.09":
		var isoDoc caaa_005_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_005_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.01":
		var isoDoc caaa_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.02":
		var isoDoc caaa_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.03":
		var isoDoc caaa_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.04":
		var isoDoc caaa_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.05":
		var isoDoc caaa_006_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.06":
		var isoDoc caaa_006_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.07":
		var isoDoc caaa_006_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.006.001.08":
		var isoDoc caaa_006_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_006_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.01":
		var isoDoc caaa_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.02":
		var isoDoc caaa_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.03":
		var isoDoc caaa_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.04":
		var isoDoc caaa_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.05":
		var isoDoc caaa_007_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.06":
		var isoDoc caaa_007_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.07":
		var isoDoc caaa_007_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.08":
		var isoDoc caaa_007_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.007.001.09":
		var isoDoc caaa_007_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_007_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.01":
		var isoDoc caaa_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.02":
		var isoDoc caaa_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.03":
		var isoDoc caaa_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.04":
		var isoDoc caaa_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.05":
		var isoDoc caaa_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.06":
		var isoDoc caaa_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.07":
		var isoDoc caaa_008_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.008.001.08":
		var isoDoc caaa_008_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_008_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.01":
		var isoDoc caaa_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.02":
		var isoDoc caaa_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.03":
		var isoDoc caaa_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.04":
		var isoDoc caaa_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.05":
		var isoDoc caaa_009_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.06":
		var isoDoc caaa_009_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.07":
		var isoDoc caaa_009_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.009.001.08":
		var isoDoc caaa_009_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_009_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.01":
		var isoDoc caaa_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.02":
		var isoDoc caaa_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.03":
		var isoDoc caaa_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.04":
		var isoDoc caaa_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.05":
		var isoDoc caaa_010_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.06":
		var isoDoc caaa_010_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.010.001.07":
		var isoDoc caaa_010_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_010_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.01":
		var isoDoc caaa_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.02":
		var isoDoc caaa_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.03":
		var isoDoc caaa_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.04":
		var isoDoc caaa_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.05":
		var isoDoc caaa_011_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.06":
		var isoDoc caaa_011_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.07":
		var isoDoc caaa_011_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.08":
		var isoDoc caaa_011_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.011.001.09":
		var isoDoc caaa_011_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_011_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.01":
		var isoDoc caaa_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.02":
		var isoDoc caaa_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.03":
		var isoDoc caaa_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.04":
		var isoDoc caaa_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.05":
		var isoDoc caaa_012_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.06":
		var isoDoc caaa_012_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.07":
		var isoDoc caaa_012_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.012.001.08":
		var isoDoc caaa_012_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_012_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.01":
		var isoDoc caaa_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.02":
		var isoDoc caaa_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.03":
		var isoDoc caaa_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.04":
		var isoDoc caaa_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.05":
		var isoDoc caaa_013_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.06":
		var isoDoc caaa_013_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.07":
		var isoDoc caaa_013_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.013.001.08":
		var isoDoc caaa_013_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_013_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.01":
		var isoDoc caaa_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.02":
		var isoDoc caaa_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.03":
		var isoDoc caaa_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.04":
		var isoDoc caaa_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.05":
		var isoDoc caaa_014_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.06":
		var isoDoc caaa_014_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.014.001.07":
		var isoDoc caaa_014_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_014_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.01":
		var isoDoc caaa_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.02":
		var isoDoc caaa_015_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.03":
		var isoDoc caaa_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.04":
		var isoDoc caaa_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.05":
		var isoDoc caaa_015_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.015.001.06":
		var isoDoc caaa_015_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_015_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.01":
		var isoDoc caaa_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.02":
		var isoDoc caaa_016_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.03":
		var isoDoc caaa_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.04":
		var isoDoc caaa_016_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.05":
		var isoDoc caaa_016_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.016.001.06":
		var isoDoc caaa_016_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_016_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.01":
		var isoDoc caaa_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.02":
		var isoDoc caaa_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.03":
		var isoDoc caaa_017_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.04":
		var isoDoc caaa_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.05":
		var isoDoc caaa_017_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.06":
		var isoDoc caaa_017_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.017.001.07":
		var isoDoc caaa_017_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_017_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.018.001.01":
		var isoDoc caaa_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.018.001.02":
		var isoDoc caaa_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.018.001.03":
		var isoDoc caaa_018_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_018_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.018.001.04":
		var isoDoc caaa_018_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_018_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.019.001.01":
		var isoDoc caaa_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.019.001.02":
		var isoDoc caaa_019_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_019_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.019.001.03":
		var isoDoc caaa_019_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_019_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.020.001.01":
		var isoDoc caaa_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caaa.021.001.01":
		var isoDoc caaa_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caaa_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.001.001.01":
		var isoDoc caad_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.002.001.01":
		var isoDoc caad_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.003.001.01":
		var isoDoc caad_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.004.001.01":
		var isoDoc caad_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.005.001.02":
		var isoDoc caad_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.006.001.02":
		var isoDoc caad_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caad.007.001.02":
		var isoDoc caad_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caad_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.001.001.01":
		var isoDoc caam_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.001.001.02":
		var isoDoc caam_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.001.001.03":
		var isoDoc caam_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.002.001.01":
		var isoDoc caam_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.002.001.02":
		var isoDoc caam_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.002.001.03":
		var isoDoc caam_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.003.001.01":
		var isoDoc caam_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.003.001.02":
		var isoDoc caam_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.003.001.03":
		var isoDoc caam_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.004.001.01":
		var isoDoc caam_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.004.001.02":
		var isoDoc caam_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.004.001.03":
		var isoDoc caam_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.005.001.01":
		var isoDoc caam_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.005.001.02":
		var isoDoc caam_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.006.001.01":
		var isoDoc caam_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.006.001.02":
		var isoDoc caam_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.007.001.01":
		var isoDoc caam_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.008.001.01":
		var isoDoc caam_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.009.001.01":
		var isoDoc caam_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.009.001.02":
		var isoDoc caam_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.010.001.01":
		var isoDoc caam_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.010.001.02":
		var isoDoc caam_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.011.001.01":
		var isoDoc caam_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:caam.012.001.01":
		var isoDoc caam_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as caam_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafc.001.001.01":
		var isoDoc cafc_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafc_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafc.002.001.01":
		var isoDoc cafc_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafc_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafm.001.001.01":
		var isoDoc cafm_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafm_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafm.002.001.01":
		var isoDoc cafm_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafm_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafr.001.001.01":
		var isoDoc cafr_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafr_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafr.002.001.01":
		var isoDoc cafr_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafr_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafr.003.001.01":
		var isoDoc cafr_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafr_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cafr.004.001.01":
		var isoDoc cafr_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cafr_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.001.001.01":
		var isoDoc cain_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.001.001.02":
		var isoDoc cain_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.002.001.01":
		var isoDoc cain_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.002.001.02":
		var isoDoc cain_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.003.001.01":
		var isoDoc cain_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.003.001.02":
		var isoDoc cain_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.004.001.02":
		var isoDoc cain_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.005.001.01":
		var isoDoc cain_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.005.001.02":
		var isoDoc cain_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.006.001.01":
		var isoDoc cain_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.006.001.02":
		var isoDoc cain_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.007.001.01":
		var isoDoc cain_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.008.001.01":
		var isoDoc cain_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.009.001.01":
		var isoDoc cain_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.010.001.01":
		var isoDoc cain_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.011.001.01":
		var isoDoc cain_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.012.001.01":
		var isoDoc cain_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.013.001.01":
		var isoDoc cain_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.014.001.01":
		var isoDoc cain_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.015.001.01":
		var isoDoc cain_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.016.001.01":
		var isoDoc cain_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.017.001.01":
		var isoDoc cain_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.018.001.01":
		var isoDoc cain_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.019.001.01":
		var isoDoc cain_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.020.001.01":
		var isoDoc cain_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.021.001.01":
		var isoDoc cain_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.022.001.01":
		var isoDoc cain_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.023.001.01":
		var isoDoc cain_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.024.001.01":
		var isoDoc cain_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.025.001.01":
		var isoDoc cain_025_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_025_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.026.001.01":
		var isoDoc cain_026_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_026_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.027.001.01":
		var isoDoc cain_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:cain.028.001.01":
		var isoDoc cain_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as cain_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.003.001.07":
		var isoDoc camt_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.004.001.08":
		var isoDoc camt_004_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_004_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.005.001.08":
		var isoDoc camt_005_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_005_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.006.001.08":
		var isoDoc camt_006_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_006_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.007.001.08":
		var isoDoc camt_007_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_007_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.008.001.08":
		var isoDoc camt_008_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_008_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.009.001.07":
		var isoDoc camt_009_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_009_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.010.001.08":
		var isoDoc camt_010_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_010_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.011.001.07":
		var isoDoc camt_011_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_011_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.012.001.07":
		var isoDoc camt_012_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_012_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.013.001.04":
		var isoDoc camt_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.014.001.04":
		var isoDoc camt_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.015.001.04":
		var isoDoc camt_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.016.001.04":
		var isoDoc camt_016_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_016_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.017.001.04":
		var isoDoc camt_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.018.001.05":
		var isoDoc camt_018_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_018_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.019.001.07":
		var isoDoc camt_019_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_019_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.020.001.04":
		var isoDoc camt_020_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_020_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.021.001.06":
		var isoDoc camt_021_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_021_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.023.001.07":
		var isoDoc camt_023_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_023_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.024.001.06":
		var isoDoc camt_024_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_024_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.025.001.05":
		var isoDoc camt_025_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_025_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.03":
		var isoDoc camt_026_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.04":
		var isoDoc camt_026_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.05":
		var isoDoc camt_026_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.06":
		var isoDoc camt_026_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.07":
		var isoDoc camt_026_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.026.001.08":
		var isoDoc camt_026_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_026_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.03":
		var isoDoc camt_027_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.04":
		var isoDoc camt_027_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.05":
		var isoDoc camt_027_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.06":
		var isoDoc camt_027_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.07":
		var isoDoc camt_027_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.027.001.08":
		var isoDoc camt_027_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_027_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.03":
		var isoDoc camt_028_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.04":
		var isoDoc camt_028_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.05":
		var isoDoc camt_028_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.06":
		var isoDoc camt_028_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.07":
		var isoDoc camt_028_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.08":
		var isoDoc camt_028_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.09":
		var isoDoc camt_028_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.028.001.10":
		var isoDoc camt_028_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_028_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.03":
		var isoDoc camt_029_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.04":
		var isoDoc camt_029_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.05":
		var isoDoc camt_029_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.06":
		var isoDoc camt_029_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.07":
		var isoDoc camt_029_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.08":
		var isoDoc camt_029_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.09":
		var isoDoc camt_029_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.029.001.10":
		var isoDoc camt_029_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_029_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.030.001.03":
		var isoDoc camt_030_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_030_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.030.001.04":
		var isoDoc camt_030_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_030_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.030.001.05":
		var isoDoc camt_030_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_030_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.031.001.03":
		var isoDoc camt_031_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_031_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.031.001.04":
		var isoDoc camt_031_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_031_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.031.001.05":
		var isoDoc camt_031_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_031_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.031.001.06":
		var isoDoc camt_031_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_031_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.032.001.02":
		var isoDoc camt_032_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_032_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.032.001.03":
		var isoDoc camt_032_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_032_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.032.001.04":
		var isoDoc camt_032_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_032_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.033.001.03":
		var isoDoc camt_033_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_033_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.033.001.04":
		var isoDoc camt_033_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_033_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.033.001.05":
		var isoDoc camt_033_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_033_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.033.001.06":
		var isoDoc camt_033_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_033_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.034.001.03":
		var isoDoc camt_034_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_034_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.034.001.04":
		var isoDoc camt_034_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_034_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.034.001.05":
		var isoDoc camt_034_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_034_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.034.001.06":
		var isoDoc camt_034_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_034_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.035.001.02":
		var isoDoc camt_035_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_035_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.035.001.03":
		var isoDoc camt_035_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_035_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.035.001.04":
		var isoDoc camt_035_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_035_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.035.001.05":
		var isoDoc camt_035_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_035_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.036.001.02":
		var isoDoc camt_036_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_036_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.036.001.03":
		var isoDoc camt_036_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_036_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.036.001.04":
		var isoDoc camt_036_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_036_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.036.001.05":
		var isoDoc camt_036_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_036_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.03":
		var isoDoc camt_037_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.04":
		var isoDoc camt_037_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.05":
		var isoDoc camt_037_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.06":
		var isoDoc camt_037_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.07":
		var isoDoc camt_037_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.037.001.08":
		var isoDoc camt_037_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_037_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.038.001.02":
		var isoDoc camt_038_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_038_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.038.001.03":
		var isoDoc camt_038_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_038_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.038.001.04":
		var isoDoc camt_038_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_038_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.039.001.03":
		var isoDoc camt_039_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_039_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.039.001.04":
		var isoDoc camt_039_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_039_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.039.001.05":
		var isoDoc camt_039_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_039_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.040.001.03":
		var isoDoc camt_040_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_040_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.040.001.04":
		var isoDoc camt_040_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_040_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.041.001.03":
		var isoDoc camt_041_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_041_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.041.001.04":
		var isoDoc camt_041_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_041_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.042.001.03":
		var isoDoc camt_042_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_042_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.042.001.04":
		var isoDoc camt_042_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_042_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.043.001.03":
		var isoDoc camt_043_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_043_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.043.001.04":
		var isoDoc camt_043_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_043_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.044.001.02":
		var isoDoc camt_044_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_044_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.044.001.03":
		var isoDoc camt_044_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_044_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.045.001.02":
		var isoDoc camt_045_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_045_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:camt.045.001.03":
		var isoDoc camt_045_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_045_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.046.001.05":
		var isoDoc camt_046_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_046_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.047.001.06":
		var isoDoc camt_047_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_047_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.048.001.05":
		var isoDoc camt_048_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_048_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.049.001.05":
		var isoDoc camt_049_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_049_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.050.001.05":
		var isoDoc camt_050_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_050_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.051.001.05":
		var isoDoc camt_051_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_051_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.01":
		var isoDoc camt_052_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.02":
		var isoDoc camt_052_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.03":
		var isoDoc camt_052_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.04":
		var isoDoc camt_052_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.05":
		var isoDoc camt_052_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.06":
		var isoDoc camt_052_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.07":
		var isoDoc camt_052_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.052.001.08":
		var isoDoc camt_052_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_052_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.01":
		var isoDoc camt_053_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.02":
		var isoDoc camt_053_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.03":
		var isoDoc camt_053_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.04":
		var isoDoc camt_053_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.05":
		var isoDoc camt_053_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.06":
		var isoDoc camt_053_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.07":
		var isoDoc camt_053_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.053.001.08":
		var isoDoc camt_053_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_053_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.01":
		var isoDoc camt_054_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.02":
		var isoDoc camt_054_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.03":
		var isoDoc camt_054_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.05":
		var isoDoc camt_054_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.06":
		var isoDoc camt_054_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07":
		var isoDoc camt_054_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.054.001.08":
		var isoDoc camt_054_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_054_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.01":
		var isoDoc camt_055_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.02":
		var isoDoc camt_055_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.03":
		var isoDoc camt_055_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.04":
		var isoDoc camt_055_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.05":
		var isoDoc camt_055_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.06":
		var isoDoc camt_055_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.07":
		var isoDoc camt_055_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.08":
		var isoDoc camt_055_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.055.001.09":
		var isoDoc camt_055_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_055_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.01":
		var isoDoc camt_056_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.02":
		var isoDoc camt_056_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.03":
		var isoDoc camt_056_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.04":
		var isoDoc camt_056_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.05":
		var isoDoc camt_056_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.06":
		var isoDoc camt_056_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.07":
		var isoDoc camt_056_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.08":
		var isoDoc camt_056_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.056.001.09":
		var isoDoc camt_056_001_09_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_056_001_09_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.057.001.02":
		var isoDoc camt_057_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_057_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.057.001.03":
		var isoDoc camt_057_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_057_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.057.001.04":
		var isoDoc camt_057_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_057_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.057.001.05":
		var isoDoc camt_057_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_057_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.057.001.06":
		var isoDoc camt_057_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_057_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.058.001.02":
		var isoDoc camt_058_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_058_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.058.001.03":
		var isoDoc camt_058_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_058_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.058.001.04":
		var isoDoc camt_058_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_058_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.058.001.05":
		var isoDoc camt_058_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_058_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.058.001.06":
		var isoDoc camt_058_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_058_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.059.001.02":
		var isoDoc camt_059_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_059_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.059.001.03":
		var isoDoc camt_059_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_059_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.059.001.04":
		var isoDoc camt_059_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_059_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.059.001.05":
		var isoDoc camt_059_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_059_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.059.001.06":
		var isoDoc camt_059_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_059_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.060.001.02":
		var isoDoc camt_060_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_060_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.060.001.03":
		var isoDoc camt_060_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_060_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.060.001.04":
		var isoDoc camt_060_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_060_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.060.001.05":
		var isoDoc camt_060_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_060_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.061.001.02":
		var isoDoc camt_061_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_061_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.062.001.03":
		var isoDoc camt_062_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_062_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.063.001.02":
		var isoDoc camt_063_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_063_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.066.001.01":
		var isoDoc camt_066_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_066_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.067.001.01":
		var isoDoc camt_067_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_067_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.068.001.01":
		var isoDoc camt_068_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_068_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.069.001.03":
		var isoDoc camt_069_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_069_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.070.001.04":
		var isoDoc camt_070_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_070_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.071.001.03":
		var isoDoc camt_071_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_071_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.072.001.01":
		var isoDoc camt_072_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_072_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.073.001.01":
		var isoDoc camt_073_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_073_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.074.001.01":
		var isoDoc camt_074_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_074_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.075.001.01":
		var isoDoc camt_075_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_075_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.078.001.01":
		var isoDoc camt_078_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_078_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.079.001.01":
		var isoDoc camt_079_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_079_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.080.001.01":
		var isoDoc camt_080_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_080_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.081.001.01":
		var isoDoc camt_081_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_081_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.082.001.01":
		var isoDoc camt_082_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_082_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.083.001.01":
		var isoDoc camt_083_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_083_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.084.001.01":
		var isoDoc camt_084_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_084_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.085.001.01":
		var isoDoc camt_085_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_085_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.086.001.01":
		var isoDoc camt_086_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_086_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.086.001.02":
		var isoDoc camt_086_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_086_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.086.001.03":
		var isoDoc camt_086_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_086_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.01":
		var isoDoc camt_087_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.02":
		var isoDoc camt_087_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.03":
		var isoDoc camt_087_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.04":
		var isoDoc camt_087_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.05":
		var isoDoc camt_087_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.06":
		var isoDoc camt_087_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.087.001.07":
		var isoDoc camt_087_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_087_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.088.001.01":
		var isoDoc camt_088_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_088_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.101.001.01":
		var isoDoc camt_101_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_101_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.102.001.01":
		var isoDoc camt_102_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_102_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.103.001.01":
		var isoDoc camt_103_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_103_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:camt.104.001.01":
		var isoDoc camt_104_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as camt_104_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:canm.001.001.02":
		var isoDoc canm_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as canm_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:canm.002.001.02":
		var isoDoc canm_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as canm_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:canm.003.001.02":
		var isoDoc canm_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as canm_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:canm.004.001.02":
		var isoDoc canm_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as canm_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.001.001.01":
		var isoDoc casp_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.001.001.02":
		var isoDoc casp_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.002.001.01":
		var isoDoc casp_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.002.001.02":
		var isoDoc casp_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.003.001.01":
		var isoDoc casp_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.003.001.02":
		var isoDoc casp_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.004.001.01":
		var isoDoc casp_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.004.001.02":
		var isoDoc casp_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.005.001.01":
		var isoDoc casp_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.005.001.02":
		var isoDoc casp_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.006.001.01":
		var isoDoc casp_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.006.001.02":
		var isoDoc casp_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.007.001.01":
		var isoDoc casp_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.007.001.02":
		var isoDoc casp_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.008.001.01":
		var isoDoc casp_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.008.001.02":
		var isoDoc casp_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.009.001.01":
		var isoDoc casp_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.009.001.02":
		var isoDoc casp_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.010.001.01":
		var isoDoc casp_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.010.001.02":
		var isoDoc casp_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.011.001.01":
		var isoDoc casp_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.011.001.02":
		var isoDoc casp_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.012.001.01":
		var isoDoc casp_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.012.001.02":
		var isoDoc casp_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.013.001.01":
		var isoDoc casp_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.013.001.02":
		var isoDoc casp_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.014.001.01":
		var isoDoc casp_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.014.001.02":
		var isoDoc casp_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.015.001.01":
		var isoDoc casp_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.015.001.02":
		var isoDoc casp_015_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_015_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.016.001.01":
		var isoDoc casp_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.016.001.02":
		var isoDoc casp_016_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_016_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.017.001.01":
		var isoDoc casp_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casp.017.001.02":
		var isoDoc casp_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casp_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casr.001.001.01":
		var isoDoc casr_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casr_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:casr.002.001.01":
		var isoDoc casr_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as casr_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.01":
		var isoDoc catm_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.02":
		var isoDoc catm_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.03":
		var isoDoc catm_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.04":
		var isoDoc catm_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.05":
		var isoDoc catm_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.06":
		var isoDoc catm_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.07":
		var isoDoc catm_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.08":
		var isoDoc catm_001_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.001.001.09":
		var isoDoc catm_001_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_001_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.01":
		var isoDoc catm_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.02":
		var isoDoc catm_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.03":
		var isoDoc catm_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.04":
		var isoDoc catm_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.05":
		var isoDoc catm_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.06":
		var isoDoc catm_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.07":
		var isoDoc catm_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.002.001.08":
		var isoDoc catm_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.01":
		var isoDoc catm_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.02":
		var isoDoc catm_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.03":
		var isoDoc catm_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.04":
		var isoDoc catm_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.05":
		var isoDoc catm_003_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.06":
		var isoDoc catm_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.07":
		var isoDoc catm_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.08":
		var isoDoc catm_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.003.001.09":
		var isoDoc catm_003_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_003_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.004.001.01":
		var isoDoc catm_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.004.001.02":
		var isoDoc catm_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.004.001.03":
		var isoDoc catm_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.004.001.04":
		var isoDoc catm_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.004.001.05":
		var isoDoc catm_004_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_004_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.01":
		var isoDoc catm_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.02":
		var isoDoc catm_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.03":
		var isoDoc catm_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.04":
		var isoDoc catm_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.05":
		var isoDoc catm_005_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.005.001.06":
		var isoDoc catm_005_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_005_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.006.001.01":
		var isoDoc catm_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.006.001.02":
		var isoDoc catm_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.006.001.03":
		var isoDoc catm_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.006.001.04":
		var isoDoc catm_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.007.001.01":
		var isoDoc catm_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.007.001.02":
		var isoDoc catm_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.007.001.03":
		var isoDoc catm_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.008.001.01":
		var isoDoc catm_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.008.001.02":
		var isoDoc catm_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catm.008.001.03":
		var isoDoc catm_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catm_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.001.001.01":
		var isoDoc catp_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.001.001.02":
		var isoDoc catp_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.002.001.01":
		var isoDoc catp_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.002.001.02":
		var isoDoc catp_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.003.001.01":
		var isoDoc catp_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.003.001.02":
		var isoDoc catp_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.004.001.01":
		var isoDoc catp_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.004.001.02":
		var isoDoc catp_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.005.001.01":
		var isoDoc catp_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.005.001.02":
		var isoDoc catp_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.006.001.01":
		var isoDoc catp_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.006.001.02":
		var isoDoc catp_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.007.001.01":
		var isoDoc catp_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.007.001.02":
		var isoDoc catp_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.008.001.01":
		var isoDoc catp_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.008.001.02":
		var isoDoc catp_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.009.001.01":
		var isoDoc catp_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.009.001.02":
		var isoDoc catp_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.010.001.01":
		var isoDoc catp_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.010.001.02":
		var isoDoc catp_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.011.001.01":
		var isoDoc catp_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.011.001.02":
		var isoDoc catp_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.012.001.01":
		var isoDoc catp_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.013.001.01":
		var isoDoc catp_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.014.001.01":
		var isoDoc catp_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.015.001.01":
		var isoDoc catp_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.016.001.01":
		var isoDoc catp_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:catp.017.001.01":
		var isoDoc catp_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as catp_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.001.001.01":
		var isoDoc colr_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.002.001.01":
		var isoDoc colr_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.003.001.03":
		var isoDoc colr_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.003.001.04":
		var isoDoc colr_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.004.001.03":
		var isoDoc colr_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.004.001.04":
		var isoDoc colr_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.005.001.03":
		var isoDoc colr_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.005.001.04":
		var isoDoc colr_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.006.001.03":
		var isoDoc colr_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.006.001.04":
		var isoDoc colr_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.007.001.03":
		var isoDoc colr_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.007.001.04":
		var isoDoc colr_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.007.001.05":
		var isoDoc colr_007_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_007_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.008.001.03":
		var isoDoc colr_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.008.001.04":
		var isoDoc colr_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.008.001.05":
		var isoDoc colr_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.009.001.03":
		var isoDoc colr_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.009.001.04":
		var isoDoc colr_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_009_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.010.001.03":
		var isoDoc colr_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.010.001.04":
		var isoDoc colr_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_010_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.011.001.03":
		var isoDoc colr_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.011.001.04":
		var isoDoc colr_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_011_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.012.001.03":
		var isoDoc colr_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.012.001.04":
		var isoDoc colr_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.013.001.03":
		var isoDoc colr_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.013.001.04":
		var isoDoc colr_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.014.001.03":
		var isoDoc colr_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.014.001.04":
		var isoDoc colr_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.015.001.03":
		var isoDoc colr_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.015.001.04":
		var isoDoc colr_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.016.001.02":
		var isoDoc colr_016_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_016_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:colr.016.001.03":
		var isoDoc colr_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as colr_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.008.001.05":
		var isoDoc fxtr_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.008.001.06":
		var isoDoc fxtr_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_008_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.013.001.03":
		var isoDoc fxtr_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.014.001.03":
		var isoDoc fxtr_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.014.001.04":
		var isoDoc fxtr_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.015.001.03":
		var isoDoc fxtr_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.015.001.04":
		var isoDoc fxtr_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.016.001.03":
		var isoDoc fxtr_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.016.001.04":
		var isoDoc fxtr_016_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_016_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.03":
		var isoDoc fxtr_017_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_017_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.017.001.04":
		var isoDoc fxtr_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.030.001.03":
		var isoDoc fxtr_030_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_030_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.030.001.04":
		var isoDoc fxtr_030_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_030_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.031.001.01":
		var isoDoc fxtr_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01":
		var isoDoc fxtr_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.033.001.01":
		var isoDoc fxtr_033_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_033_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.034.001.01":
		var isoDoc fxtr_034_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_034_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.035.001.01":
		var isoDoc fxtr_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01":
		var isoDoc fxtr_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.037.001.01":
		var isoDoc fxtr_037_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_037_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:fxtr.038.001.01":
		var isoDoc fxtr_038_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as fxtr_038_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.03":
		var isoDoc pacs_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.07":
		var isoDoc pacs_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.08":
		var isoDoc pacs_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.09":
		var isoDoc pacs_002_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.10":
		var isoDoc pacs_002_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.002.001.11":
		var isoDoc pacs_002_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_002_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.02":
		var isoDoc pacs_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.06":
		var isoDoc pacs_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.07":
		var isoDoc pacs_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.003.001.08":
		var isoDoc pacs_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.02":
		var isoDoc pacs_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.06":
		var isoDoc pacs_004_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.07":
		var isoDoc pacs_004_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.08":
		var isoDoc pacs_004_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.09":
		var isoDoc pacs_004_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.004.001.10":
		var isoDoc pacs_004_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_004_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.02":
		var isoDoc pacs_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.06":
		var isoDoc pacs_007_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.07":
		var isoDoc pacs_007_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.08":
		var isoDoc pacs_007_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.09":
		var isoDoc pacs_007_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.007.001.10":
		var isoDoc pacs_007_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_007_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.02":
		var isoDoc pacs_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.05":
		var isoDoc pacs_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.06":
		var isoDoc pacs_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.07":
		var isoDoc pacs_008_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.08":
		var isoDoc pacs_008_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.008.001.09":
		var isoDoc pacs_008_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_008_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.02":
		var isoDoc pacs_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.06":
		var isoDoc pacs_009_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_009_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.07":
		var isoDoc pacs_009_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_009_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.08":
		var isoDoc pacs_009_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_009_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.009.001.09":
		var isoDoc pacs_009_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_009_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.010.001.02":
		var isoDoc pacs_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.010.001.03":
		var isoDoc pacs_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.010.001.04":
		var isoDoc pacs_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_010_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.01":
		var isoDoc pacs_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.02":
		var isoDoc pacs_028_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_028_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.03":
		var isoDoc pacs_028_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_028_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pacs.028.001.04":
		var isoDoc pacs_028_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pacs_028_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.03":
		var isoDoc pain_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.04":
		var isoDoc pain_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.05":
		var isoDoc pain_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.06":
		var isoDoc pain_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.07":
		var isoDoc pain_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.08":
		var isoDoc pain_001_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.09":
		var isoDoc pain_001_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.001.001.10":
		var isoDoc pain_001_001_10_1.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_001_001_10_1 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.03":
		var isoDoc pain_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.04":
		var isoDoc pain_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.05":
		var isoDoc pain_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.06":
		var isoDoc pain_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.07":
		var isoDoc pain_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.08":
		var isoDoc pain_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09":
		var isoDoc pain_002_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.10":
		var isoDoc pain_002_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.002.001.11":
		var isoDoc pain_002_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_002_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.02":
		var isoDoc pain_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.03":
		var isoDoc pain_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.04":
		var isoDoc pain_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.05":
		var isoDoc pain_007_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.06":
		var isoDoc pain_007_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.07":
		var isoDoc pain_007_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.08":
		var isoDoc pain_007_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.09":
		var isoDoc pain_007_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.007.001.10":
		var isoDoc pain_007_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_007_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.02":
		var isoDoc pain_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.03":
		var isoDoc pain_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.04":
		var isoDoc pain_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.05":
		var isoDoc pain_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.06":
		var isoDoc pain_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.07":
		var isoDoc pain_008_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.08":
		var isoDoc pain_008_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.008.001.09":
		var isoDoc pain_008_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_008_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.01":
		var isoDoc pain_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.02":
		var isoDoc pain_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.03":
		var isoDoc pain_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.04":
		var isoDoc pain_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.05":
		var isoDoc pain_009_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.009.001.06":
		var isoDoc pain_009_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_009_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.01":
		var isoDoc pain_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.02":
		var isoDoc pain_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.03":
		var isoDoc pain_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.04":
		var isoDoc pain_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.05":
		var isoDoc pain_010_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.010.001.06":
		var isoDoc pain_010_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_010_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.01":
		var isoDoc pain_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.02":
		var isoDoc pain_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.03":
		var isoDoc pain_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.04":
		var isoDoc pain_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.05":
		var isoDoc pain_011_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.011.001.06":
		var isoDoc pain_011_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_011_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.01":
		var isoDoc pain_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.02":
		var isoDoc pain_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.03":
		var isoDoc pain_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.04":
		var isoDoc pain_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.05":
		var isoDoc pain_012_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.012.001.06":
		var isoDoc pain_012_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_012_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.01":
		var isoDoc pain_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.02":
		var isoDoc pain_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.03":
		var isoDoc pain_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.04":
		var isoDoc pain_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.05":
		var isoDoc pain_013_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.06":
		var isoDoc pain_013_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.07":
		var isoDoc pain_013_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.013.001.08":
		var isoDoc pain_013_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_013_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.01":
		var isoDoc pain_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.02":
		var isoDoc pain_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.03":
		var isoDoc pain_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.04":
		var isoDoc pain_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.05":
		var isoDoc pain_014_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.06":
		var isoDoc pain_014_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.07":
		var isoDoc pain_014_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.014.001.08":
		var isoDoc pain_014_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_014_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.017.001.01":
		var isoDoc pain_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.017.001.02":
		var isoDoc pain_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.018.001.01":
		var isoDoc pain_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:pain.018.001.02":
		var isoDoc pain_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as pain_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.001.001.03":
		var isoDoc reda_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_001_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:reda.001.001.04":
		var isoDoc reda_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.002.001.03":
		var isoDoc reda_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_002_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:reda.002.001.04":
		var isoDoc reda_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.003.001.03":
		var isoDoc reda_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.004.001.02":
		var isoDoc reda_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.004.001.03":
		var isoDoc reda_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.004.001.04":
		var isoDoc reda_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.005.001.02":
		var isoDoc reda_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.005.001.03":
		var isoDoc reda_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.014.001.01":
		var isoDoc reda_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.015.001.01":
		var isoDoc reda_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.016.001.01":
		var isoDoc reda_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.017.001.01":
		var isoDoc reda_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.018.001.01":
		var isoDoc reda_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.019.001.01":
		var isoDoc reda_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.020.001.01":
		var isoDoc reda_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.021.001.01":
		var isoDoc reda_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.022.001.01":
		var isoDoc reda_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.023.001.01":
		var isoDoc reda_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.031.001.01":
		var isoDoc reda_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.032.001.01":
		var isoDoc reda_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.035.001.01":
		var isoDoc reda_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.036.001.01":
		var isoDoc reda_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.037.001.01":
		var isoDoc reda_037_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_037_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.041.001.01":
		var isoDoc reda_041_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_041_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.042.001.01":
		var isoDoc reda_042_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_042_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.043.001.01":
		var isoDoc reda_043_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_043_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.056.001.01":
		var isoDoc reda_056_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_056_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.057.001.01":
		var isoDoc reda_057_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_057_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.058.001.01":
		var isoDoc reda_058_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_058_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.059.001.01":
		var isoDoc reda_059_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_059_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.060.001.01":
		var isoDoc reda_060_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_060_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.061.001.01":
		var isoDoc reda_061_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_061_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.066.001.01":
		var isoDoc reda_066_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_066_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.067.001.01":
		var isoDoc reda_067_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_067_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.068.001.01":
		var isoDoc reda_068_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_068_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.069.001.01":
		var isoDoc reda_069_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_069_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.070.001.01":
		var isoDoc reda_070_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_070_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.071.001.01":
		var isoDoc reda_071_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_071_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.072.001.01":
		var isoDoc reda_072_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_072_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:reda.073.001.01":
		var isoDoc reda_073_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as reda_073_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.001.001.01":
		var isoDoc remt_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.001.001.02":
		var isoDoc remt_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.001.001.03":
		var isoDoc remt_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.001.001.04":
		var isoDoc remt_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.002.001.01":
		var isoDoc remt_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:remt.002.001.02":
		var isoDoc remt_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as remt_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.001.001.03":
		var isoDoc secl_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.002.001.03":
		var isoDoc secl_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.003.001.03":
		var isoDoc secl_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.004.001.03":
		var isoDoc secl_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.005.001.02":
		var isoDoc secl_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.006.001.02":
		var isoDoc secl_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.007.001.03":
		var isoDoc secl_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.008.001.03":
		var isoDoc secl_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.009.001.03":
		var isoDoc secl_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:secl.010.001.03":
		var isoDoc secl_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as secl_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.02":
		var isoDoc seev_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.03":
		var isoDoc seev_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.04":
		var isoDoc seev_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.05":
		var isoDoc seev_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.06":
		var isoDoc seev_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.001.001.07":
		var isoDoc seev_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.002.001.02":
		var isoDoc seev_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.002.001.03":
		var isoDoc seev_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.002.001.04":
		var isoDoc seev_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.002.001.05":
		var isoDoc seev_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.002.001.06":
		var isoDoc seev_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.003.001.02":
		var isoDoc seev_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.003.001.03":
		var isoDoc seev_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.003.001.04":
		var isoDoc seev_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.003.001.05":
		var isoDoc seev_003_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_003_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.003.001.06":
		var isoDoc seev_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.004.001.02":
		var isoDoc seev_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.004.001.03":
		var isoDoc seev_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.004.001.04":
		var isoDoc seev_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.004.001.05":
		var isoDoc seev_004_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_004_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.004.001.06":
		var isoDoc seev_004_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_004_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.005.001.02":
		var isoDoc seev_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.005.001.03":
		var isoDoc seev_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.005.001.04":
		var isoDoc seev_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.005.001.05":
		var isoDoc seev_005_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_005_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.005.001.06":
		var isoDoc seev_005_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_005_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.006.001.02":
		var isoDoc seev_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.006.001.03":
		var isoDoc seev_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.006.001.04":
		var isoDoc seev_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.006.001.05":
		var isoDoc seev_006_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_006_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.006.001.06":
		var isoDoc seev_006_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_006_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.007.001.02":
		var isoDoc seev_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.007.001.03":
		var isoDoc seev_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.007.001.04":
		var isoDoc seev_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.007.001.05":
		var isoDoc seev_007_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_007_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.007.001.06":
		var isoDoc seev_007_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_007_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.008.001.02":
		var isoDoc seev_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.008.001.03":
		var isoDoc seev_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.008.001.04":
		var isoDoc seev_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.008.001.05":
		var isoDoc seev_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.008.001.06":
		var isoDoc seev_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_008_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.009.001.01":
		var isoDoc seev_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.010.001.01":
		var isoDoc seev_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.011.001.01":
		var isoDoc seev_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.012.001.01":
		var isoDoc seev_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.013.001.01":
		var isoDoc seev_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.014.001.01":
		var isoDoc seev_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.015.001.01":
		var isoDoc seev_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.016.001.01":
		var isoDoc seev_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.017.001.01":
		var isoDoc seev_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.018.001.01":
		var isoDoc seev_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.019.001.01":
		var isoDoc seev_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.020.001.01":
		var isoDoc seev_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.021.001.01":
		var isoDoc seev_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.022.001.01":
		var isoDoc seev_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.023.001.01":
		var isoDoc seev_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.024.001.01":
		var isoDoc seev_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.025.001.01":
		var isoDoc seev_025_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_025_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.026.001.01":
		var isoDoc seev_026_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_026_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.027.001.01":
		var isoDoc seev_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.028.001.01":
		var isoDoc seev_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.029.001.01":
		var isoDoc seev_029_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_029_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.030.001.01":
		var isoDoc seev_030_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_030_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.01":
		var isoDoc seev_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.02":
		var isoDoc seev_031_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.03":
		var isoDoc seev_031_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.04":
		var isoDoc seev_031_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.05":
		var isoDoc seev_031_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.06":
		var isoDoc seev_031_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.07":
		var isoDoc seev_031_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.08":
		var isoDoc seev_031_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.09":
		var isoDoc seev_031_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.001.10":
		var isoDoc seev_031_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.002.06":
		var isoDoc seev_031_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.002.07":
		var isoDoc seev_031_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.002.08":
		var isoDoc seev_031_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.002.09":
		var isoDoc seev_031_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.031.002.10":
		var isoDoc seev_031_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_031_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.01":
		var isoDoc seev_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.02":
		var isoDoc seev_032_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.03":
		var isoDoc seev_032_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.04":
		var isoDoc seev_032_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.05":
		var isoDoc seev_032_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.06":
		var isoDoc seev_032_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.001.07":
		var isoDoc seev_032_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.002.05":
		var isoDoc seev_032_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.002.06":
		var isoDoc seev_032_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.032.002.07":
		var isoDoc seev_032_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_032_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.01":
		var isoDoc seev_033_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.02":
		var isoDoc seev_033_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.03":
		var isoDoc seev_033_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.04":
		var isoDoc seev_033_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.05":
		var isoDoc seev_033_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.06":
		var isoDoc seev_033_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.07":
		var isoDoc seev_033_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.08":
		var isoDoc seev_033_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.09":
		var isoDoc seev_033_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.001.10":
		var isoDoc seev_033_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.002.06":
		var isoDoc seev_033_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.002.07":
		var isoDoc seev_033_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.002.08":
		var isoDoc seev_033_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.002.09":
		var isoDoc seev_033_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.033.002.10":
		var isoDoc seev_033_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_033_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.01":
		var isoDoc seev_034_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.02":
		var isoDoc seev_034_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.03":
		var isoDoc seev_034_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.04":
		var isoDoc seev_034_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.05":
		var isoDoc seev_034_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.06":
		var isoDoc seev_034_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.07":
		var isoDoc seev_034_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.08":
		var isoDoc seev_034_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.09":
		var isoDoc seev_034_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.10":
		var isoDoc seev_034_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.001.11":
		var isoDoc seev_034_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.002.07":
		var isoDoc seev_034_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.002.08":
		var isoDoc seev_034_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.002.09":
		var isoDoc seev_034_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.002.10":
		var isoDoc seev_034_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.034.002.11":
		var isoDoc seev_034_002_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_034_002_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.01":
		var isoDoc seev_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.02":
		var isoDoc seev_035_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.03":
		var isoDoc seev_035_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.04":
		var isoDoc seev_035_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.05":
		var isoDoc seev_035_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.06":
		var isoDoc seev_035_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.07":
		var isoDoc seev_035_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.08":
		var isoDoc seev_035_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.09":
		var isoDoc seev_035_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.10":
		var isoDoc seev_035_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.001.11":
		var isoDoc seev_035_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.002.07":
		var isoDoc seev_035_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.002.08":
		var isoDoc seev_035_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.002.09":
		var isoDoc seev_035_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.002.10":
		var isoDoc seev_035_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.035.002.11":
		var isoDoc seev_035_002_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_035_002_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.01":
		var isoDoc seev_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.02":
		var isoDoc seev_036_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.03":
		var isoDoc seev_036_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.04":
		var isoDoc seev_036_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.05":
		var isoDoc seev_036_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.06":
		var isoDoc seev_036_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.07":
		var isoDoc seev_036_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.08":
		var isoDoc seev_036_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.09":
		var isoDoc seev_036_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.10":
		var isoDoc seev_036_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.001.11":
		var isoDoc seev_036_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.002.07":
		var isoDoc seev_036_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.002.08":
		var isoDoc seev_036_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.002.09":
		var isoDoc seev_036_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.002.10":
		var isoDoc seev_036_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.036.002.11":
		var isoDoc seev_036_002_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_036_002_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.01":
		var isoDoc seev_037_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.02":
		var isoDoc seev_037_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.03":
		var isoDoc seev_037_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.04":
		var isoDoc seev_037_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.05":
		var isoDoc seev_037_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.06":
		var isoDoc seev_037_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.07":
		var isoDoc seev_037_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.08":
		var isoDoc seev_037_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.09":
		var isoDoc seev_037_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.10":
		var isoDoc seev_037_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.001.11":
		var isoDoc seev_037_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.002.07":
		var isoDoc seev_037_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.002.08":
		var isoDoc seev_037_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.002.09":
		var isoDoc seev_037_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.002.10":
		var isoDoc seev_037_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.037.002.11":
		var isoDoc seev_037_002_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_037_002_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.001.01":
		var isoDoc seev_038_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.001.02":
		var isoDoc seev_038_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.001.03":
		var isoDoc seev_038_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.001.04":
		var isoDoc seev_038_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.001.05":
		var isoDoc seev_038_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.002.04":
		var isoDoc seev_038_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.038.002.05":
		var isoDoc seev_038_002_05_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_038_002_05_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.01":
		var isoDoc seev_039_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.02":
		var isoDoc seev_039_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.03":
		var isoDoc seev_039_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.04":
		var isoDoc seev_039_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.05":
		var isoDoc seev_039_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.06":
		var isoDoc seev_039_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.07":
		var isoDoc seev_039_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.08":
		var isoDoc seev_039_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.09":
		var isoDoc seev_039_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.001.10":
		var isoDoc seev_039_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.002.06":
		var isoDoc seev_039_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.002.07":
		var isoDoc seev_039_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.002.08":
		var isoDoc seev_039_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.002.09":
		var isoDoc seev_039_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.039.002.10":
		var isoDoc seev_039_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_039_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.01":
		var isoDoc seev_040_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.02":
		var isoDoc seev_040_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.03":
		var isoDoc seev_040_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.04":
		var isoDoc seev_040_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.05":
		var isoDoc seev_040_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.06":
		var isoDoc seev_040_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.07":
		var isoDoc seev_040_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.08":
		var isoDoc seev_040_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.001.09":
		var isoDoc seev_040_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.002.06":
		var isoDoc seev_040_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.002.07":
		var isoDoc seev_040_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.002.08":
		var isoDoc seev_040_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.040.002.09":
		var isoDoc seev_040_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_040_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.01":
		var isoDoc seev_041_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.02":
		var isoDoc seev_041_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.03":
		var isoDoc seev_041_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.04":
		var isoDoc seev_041_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.05":
		var isoDoc seev_041_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.06":
		var isoDoc seev_041_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.07":
		var isoDoc seev_041_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.08":
		var isoDoc seev_041_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.09":
		var isoDoc seev_041_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.001.10":
		var isoDoc seev_041_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.002.06":
		var isoDoc seev_041_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.002.07":
		var isoDoc seev_041_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.002.08":
		var isoDoc seev_041_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.002.09":
		var isoDoc seev_041_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.041.002.10":
		var isoDoc seev_041_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_041_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.01":
		var isoDoc seev_042_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.02":
		var isoDoc seev_042_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.03":
		var isoDoc seev_042_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.04":
		var isoDoc seev_042_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.05":
		var isoDoc seev_042_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.06":
		var isoDoc seev_042_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.07":
		var isoDoc seev_042_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.08":
		var isoDoc seev_042_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.001.09":
		var isoDoc seev_042_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.002.05":
		var isoDoc seev_042_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.002.06":
		var isoDoc seev_042_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.002.07":
		var isoDoc seev_042_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.002.08":
		var isoDoc seev_042_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.042.002.09":
		var isoDoc seev_042_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_042_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.01":
		var isoDoc seev_044_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.02":
		var isoDoc seev_044_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.03":
		var isoDoc seev_044_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.04":
		var isoDoc seev_044_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.05":
		var isoDoc seev_044_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.06":
		var isoDoc seev_044_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.07":
		var isoDoc seev_044_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.08":
		var isoDoc seev_044_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.09":
		var isoDoc seev_044_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.001.10":
		var isoDoc seev_044_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.002.06":
		var isoDoc seev_044_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.002.07":
		var isoDoc seev_044_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.002.08":
		var isoDoc seev_044_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.002.09":
		var isoDoc seev_044_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.044.002.10":
		var isoDoc seev_044_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_044_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.045.001.01":
		var isoDoc seev_045_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_045_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.045.001.02":
		var isoDoc seev_045_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_045_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.046.001.01":
		var isoDoc seev_046_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_046_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.047.001.01":
		var isoDoc seev_047_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_047_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.048.001.01":
		var isoDoc seev_048_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_048_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:seev.049.001.01":
		var isoDoc seev_049_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as seev_049_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.001.001.02":
		var isoDoc semt_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_001_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:semt.001.001.03":
		var isoDoc semt_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.02":
		var isoDoc semt_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.03":
		var isoDoc semt_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.04":
		var isoDoc semt_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.06":
		var isoDoc semt_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.07":
		var isoDoc semt_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.08":
		var isoDoc semt_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.09":
		var isoDoc semt_002_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.001.10":
		var isoDoc semt_002_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.002.09":
		var isoDoc semt_002_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.002.002.10":
		var isoDoc semt_002_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_002_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.02":
		var isoDoc semt_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.03":
		var isoDoc semt_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.04":
		var isoDoc semt_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.06":
		var isoDoc semt_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.07":
		var isoDoc semt_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.08":
		var isoDoc semt_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.09":
		var isoDoc semt_003_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.001.10":
		var isoDoc semt_003_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.002.09":
		var isoDoc semt_003_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.003.002.10":
		var isoDoc semt_003_002_10_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_003_002_10_0 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:semt.004.001.02":
		var isoDoc semt_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_004_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:semt.005.001.02":
		var isoDoc semt_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.006.001.02":
		var isoDoc semt_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_006_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:semt.006.001.03":
		var isoDoc semt_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.007.001.02":
		var isoDoc semt_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_007_001_02 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:semt.007.001.03":
		var isoDoc semt_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.013.001.01":
		var isoDoc semt_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.013.001.02":
		var isoDoc semt_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.013.001.03":
		var isoDoc semt_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.013.001.04":
		var isoDoc semt_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.013.002.04":
		var isoDoc semt_013_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_013_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.01":
		var isoDoc semt_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.02":
		var isoDoc semt_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.03":
		var isoDoc semt_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.04":
		var isoDoc semt_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.05":
		var isoDoc semt_014_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.001.06":
		var isoDoc semt_014_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.002.05":
		var isoDoc semt_014_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.014.002.06":
		var isoDoc semt_014_002_06_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_014_002_06_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.01":
		var isoDoc semt_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.02":
		var isoDoc semt_015_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.03":
		var isoDoc semt_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.04":
		var isoDoc semt_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.05":
		var isoDoc semt_015_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.06":
		var isoDoc semt_015_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.07":
		var isoDoc semt_015_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.001.08":
		var isoDoc semt_015_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.015.002.08":
		var isoDoc semt_015_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_015_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.01":
		var isoDoc semt_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.02":
		var isoDoc semt_016_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.04":
		var isoDoc semt_016_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.05":
		var isoDoc semt_016_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.06":
		var isoDoc semt_016_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.07":
		var isoDoc semt_016_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.001.08":
		var isoDoc semt_016_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.016.002.08":
		var isoDoc semt_016_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_016_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.01":
		var isoDoc semt_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.02":
		var isoDoc semt_017_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.04":
		var isoDoc semt_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.05":
		var isoDoc semt_017_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.06":
		var isoDoc semt_017_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.07":
		var isoDoc semt_017_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.08":
		var isoDoc semt_017_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.09":
		var isoDoc semt_017_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.001.10":
		var isoDoc semt_017_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.002.08":
		var isoDoc semt_017_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.017.002.10":
		var isoDoc semt_017_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_017_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.01":
		var isoDoc semt_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.02":
		var isoDoc semt_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.04":
		var isoDoc semt_018_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.05":
		var isoDoc semt_018_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.06":
		var isoDoc semt_018_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.07":
		var isoDoc semt_018_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.08":
		var isoDoc semt_018_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.09":
		var isoDoc semt_018_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.10":
		var isoDoc semt_018_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.001.11":
		var isoDoc semt_018_001_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_001_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.002.09":
		var isoDoc semt_018_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.018.002.11":
		var isoDoc semt_018_002_11.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_018_002_11 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.01":
		var isoDoc semt_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.02":
		var isoDoc semt_019_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.03":
		var isoDoc semt_019_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.04":
		var isoDoc semt_019_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.05":
		var isoDoc semt_019_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.06":
		var isoDoc semt_019_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.07":
		var isoDoc semt_019_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.001.08":
		var isoDoc semt_019_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.002.07":
		var isoDoc semt_019_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.019.002.08":
		var isoDoc semt_019_002_08_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_019_002_08_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.001.01":
		var isoDoc semt_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.001.02":
		var isoDoc semt_020_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.001.03":
		var isoDoc semt_020_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.001.04":
		var isoDoc semt_020_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.001.05":
		var isoDoc semt_020_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.020.002.05":
		var isoDoc semt_020_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_020_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.01":
		var isoDoc semt_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.02":
		var isoDoc semt_021_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.03":
		var isoDoc semt_021_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.04":
		var isoDoc semt_021_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.05":
		var isoDoc semt_021_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.001.06":
		var isoDoc semt_021_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.021.002.06":
		var isoDoc semt_021_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_021_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.001.01":
		var isoDoc semt_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.001.02":
		var isoDoc semt_022_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.001.03":
		var isoDoc semt_022_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.001.04":
		var isoDoc semt_022_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.002.03":
		var isoDoc semt_022_002_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_002_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.022.002.04":
		var isoDoc semt_022_002_04_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_022_002_04_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.023.001.01":
		var isoDoc semt_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.024.001.01":
		var isoDoc semt_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.041.001.01":
		var isoDoc semt_041_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_041_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.041.001.02":
		var isoDoc semt_041_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_041_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:semt.042.001.01":
		var isoDoc semt_042_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as semt_042_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.02":
		var isoDoc sese_001_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.03":
		var isoDoc sese_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.04":
		var isoDoc sese_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.05":
		var isoDoc sese_001_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.06":
		var isoDoc sese_001_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.001.001.07":
		var isoDoc sese_001_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.08":
		var isoDoc sese_001_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.001.001.09":
		var isoDoc sese_001_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_001_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.02":
		var isoDoc sese_002_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.03":
		var isoDoc sese_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.04":
		var isoDoc sese_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.05":
		var isoDoc sese_002_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.06":
		var isoDoc sese_002_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.002.001.07":
		var isoDoc sese_002_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.08":
		var isoDoc sese_002_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.002.001.09":
		var isoDoc sese_002_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_002_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.02":
		var isoDoc sese_003_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.03":
		var isoDoc sese_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.04":
		var isoDoc sese_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.05":
		var isoDoc sese_003_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.06":
		var isoDoc sese_003_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.003.001.07":
		var isoDoc sese_003_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.08":
		var isoDoc sese_003_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.003.001.09":
		var isoDoc sese_003_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_003_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.02":
		var isoDoc sese_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.03":
		var isoDoc sese_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.04":
		var isoDoc sese_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.05":
		var isoDoc sese_004_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.06":
		var isoDoc sese_004_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.004.001.07":
		var isoDoc sese_004_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.08":
		var isoDoc sese_004_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.004.001.09":
		var isoDoc sese_004_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_004_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.02":
		var isoDoc sese_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.03":
		var isoDoc sese_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.04":
		var isoDoc sese_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.05":
		var isoDoc sese_005_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.06":
		var isoDoc sese_005_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.005.001.07":
		var isoDoc sese_005_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.08":
		var isoDoc sese_005_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.005.001.09":
		var isoDoc sese_005_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_005_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.02":
		var isoDoc sese_006_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.03":
		var isoDoc sese_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.04":
		var isoDoc sese_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.05":
		var isoDoc sese_006_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.06":
		var isoDoc sese_006_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.006.001.07":
		var isoDoc sese_006_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.08":
		var isoDoc sese_006_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.006.001.09":
		var isoDoc sese_006_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_006_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.02":
		var isoDoc sese_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.03":
		var isoDoc sese_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.04":
		var isoDoc sese_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.05":
		var isoDoc sese_007_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.06":
		var isoDoc sese_007_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.007.001.07":
		var isoDoc sese_007_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.08":
		var isoDoc sese_007_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.007.001.09":
		var isoDoc sese_007_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_007_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.02":
		var isoDoc sese_008_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.03":
		var isoDoc sese_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.04":
		var isoDoc sese_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.05":
		var isoDoc sese_008_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.06":
		var isoDoc sese_008_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.008.001.07":
		var isoDoc sese_008_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.08":
		var isoDoc sese_008_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.008.001.09":
		var isoDoc sese_008_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_008_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.009.001.02":
		var isoDoc sese_009_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.009.001.03":
		var isoDoc sese_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.009.001.04":
		var isoDoc sese_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_04 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.009.001.05":
		var isoDoc sese_009_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.009.001.06":
		var isoDoc sese_009_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.009.001.07":
		var isoDoc sese_009_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_009_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.010.001.02":
		var isoDoc sese_010_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.010.001.03":
		var isoDoc sese_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.010.001.04":
		var isoDoc sese_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_04 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.010.001.05":
		var isoDoc sese_010_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.010.001.06":
		var isoDoc sese_010_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.010.001.07":
		var isoDoc sese_010_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_010_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.02":
		var isoDoc sese_011_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.03":
		var isoDoc sese_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.04":
		var isoDoc sese_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_04 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.011.001.05":
		var isoDoc sese_011_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.06":
		var isoDoc sese_011_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.07":
		var isoDoc sese_011_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.011.001.08":
		var isoDoc sese_011_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_011_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.02":
		var isoDoc sese_012_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.03":
		var isoDoc sese_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.04":
		var isoDoc sese_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.05":
		var isoDoc sese_012_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.06":
		var isoDoc sese_012_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.012.001.07":
		var isoDoc sese_012_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.08":
		var isoDoc sese_012_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.09":
		var isoDoc sese_012_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.012.001.10":
		var isoDoc sese_012_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_012_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.02":
		var isoDoc sese_013_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.03":
		var isoDoc sese_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.04":
		var isoDoc sese_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.05":
		var isoDoc sese_013_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.06":
		var isoDoc sese_013_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.013.001.07":
		var isoDoc sese_013_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.08":
		var isoDoc sese_013_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.09":
		var isoDoc sese_013_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.013.001.10":
		var isoDoc sese_013_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_013_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.02":
		var isoDoc sese_014_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.03":
		var isoDoc sese_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.04":
		var isoDoc sese_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.05":
		var isoDoc sese_014_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.06":
		var isoDoc sese_014_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_06 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.014.001.07":
		var isoDoc sese_014_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.08":
		var isoDoc sese_014_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.014.001.09":
		var isoDoc sese_014_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_014_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.01":
		var isoDoc sese_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.02":
		var isoDoc sese_018_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.03":
		var isoDoc sese_018_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.04":
		var isoDoc sese_018_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_04 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.018.001.05":
		var isoDoc sese_018_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.06":
		var isoDoc sese_018_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.018.001.07":
		var isoDoc sese_018_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_018_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.01":
		var isoDoc sese_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.02":
		var isoDoc sese_019_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.03":
		var isoDoc sese_019_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_03 document")
		}
		doc = isoDoc
	case "urn:swift:xsd:sese.019.001.04":
		var isoDoc sese_019_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.05":
		var isoDoc sese_019_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.06":
		var isoDoc sese_019_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.019.001.07":
		var isoDoc sese_019_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_019_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.01":
		var isoDoc sese_020_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.02":
		var isoDoc sese_020_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.03":
		var isoDoc sese_020_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.04":
		var isoDoc sese_020_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.05":
		var isoDoc sese_020_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.001.06":
		var isoDoc sese_020_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.002.05":
		var isoDoc sese_020_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.020.002.06":
		var isoDoc sese_020_002_06_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_020_002_06_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.001.01":
		var isoDoc sese_021_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.001.02":
		var isoDoc sese_021_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.001.03":
		var isoDoc sese_021_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.001.04":
		var isoDoc sese_021_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.001.05":
		var isoDoc sese_021_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.002.04":
		var isoDoc sese_021_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.021.002.05":
		var isoDoc sese_021_002_05_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_021_002_05_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.001.01":
		var isoDoc sese_022_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.001.02":
		var isoDoc sese_022_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.001.03":
		var isoDoc sese_022_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.001.04":
		var isoDoc sese_022_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.001.05":
		var isoDoc sese_022_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.002.04":
		var isoDoc sese_022_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.022.002.05":
		var isoDoc sese_022_002_05_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_022_002_05_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.01":
		var isoDoc sese_023_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.02":
		var isoDoc sese_023_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.04":
		var isoDoc sese_023_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.05":
		var isoDoc sese_023_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.06":
		var isoDoc sese_023_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.07":
		var isoDoc sese_023_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.08":
		var isoDoc sese_023_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.001.09":
		var isoDoc sese_023_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.002.08":
		var isoDoc sese_023_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.023.002.09":
		var isoDoc sese_023_002_09_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_023_002_09_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.01":
		var isoDoc sese_024_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.02":
		var isoDoc sese_024_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.04":
		var isoDoc sese_024_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.05":
		var isoDoc sese_024_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.06":
		var isoDoc sese_024_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.07":
		var isoDoc sese_024_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.08":
		var isoDoc sese_024_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.09":
		var isoDoc sese_024_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.001.10":
		var isoDoc sese_024_001_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_001_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.002.09":
		var isoDoc sese_024_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.024.002.10":
		var isoDoc sese_024_002_10.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_024_002_10 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.01":
		var isoDoc sese_025_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.02":
		var isoDoc sese_025_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.04":
		var isoDoc sese_025_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.05":
		var isoDoc sese_025_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.06":
		var isoDoc sese_025_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.07":
		var isoDoc sese_025_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.08":
		var isoDoc sese_025_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.001.09":
		var isoDoc sese_025_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.002.08":
		var isoDoc sese_025_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.025.002.09":
		var isoDoc sese_025_002_09_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_025_002_09_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.01":
		var isoDoc sese_026_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.02":
		var isoDoc sese_026_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.03":
		var isoDoc sese_026_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.04":
		var isoDoc sese_026_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.05":
		var isoDoc sese_026_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.06":
		var isoDoc sese_026_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.07":
		var isoDoc sese_026_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.001.08":
		var isoDoc sese_026_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.002.07":
		var isoDoc sese_026_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.026.002.08":
		var isoDoc sese_026_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_026_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.001.01":
		var isoDoc sese_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.001.02":
		var isoDoc sese_027_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.001.03":
		var isoDoc sese_027_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.001.04":
		var isoDoc sese_027_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.001.05":
		var isoDoc sese_027_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.027.002.05":
		var isoDoc sese_027_002_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_027_002_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.01":
		var isoDoc sese_028_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.02":
		var isoDoc sese_028_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.03":
		var isoDoc sese_028_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.04":
		var isoDoc sese_028_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.05":
		var isoDoc sese_028_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.06":
		var isoDoc sese_028_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.07":
		var isoDoc sese_028_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.001.08":
		var isoDoc sese_028_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.002.07":
		var isoDoc sese_028_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.028.002.08":
		var isoDoc sese_028_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_028_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.029.001.01":
		var isoDoc sese_029_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_029_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.029.001.02":
		var isoDoc sese_029_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_029_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.029.001.03":
		var isoDoc sese_029_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_029_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.029.001.04":
		var isoDoc sese_029_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_029_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.029.002.04":
		var isoDoc sese_029_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_029_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.01":
		var isoDoc sese_030_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.02":
		var isoDoc sese_030_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.04":
		var isoDoc sese_030_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.05":
		var isoDoc sese_030_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.06":
		var isoDoc sese_030_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.07":
		var isoDoc sese_030_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.001.08":
		var isoDoc sese_030_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.002.07":
		var isoDoc sese_030_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.030.002.08":
		var isoDoc sese_030_002_08_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_030_002_08_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.01":
		var isoDoc sese_031_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.02":
		var isoDoc sese_031_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.04":
		var isoDoc sese_031_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.05":
		var isoDoc sese_031_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.06":
		var isoDoc sese_031_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.07":
		var isoDoc sese_031_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.001.08":
		var isoDoc sese_031_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.002.07":
		var isoDoc sese_031_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.031.002.08":
		var isoDoc sese_031_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_031_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.01":
		var isoDoc sese_032_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.02":
		var isoDoc sese_032_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.04":
		var isoDoc sese_032_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.05":
		var isoDoc sese_032_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.06":
		var isoDoc sese_032_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.07":
		var isoDoc sese_032_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.08":
		var isoDoc sese_032_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.001.09":
		var isoDoc sese_032_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.002.08":
		var isoDoc sese_032_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.032.002.09":
		var isoDoc sese_032_002_09_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_032_002_09_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.01":
		var isoDoc sese_033_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.02":
		var isoDoc sese_033_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.04":
		var isoDoc sese_033_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.05":
		var isoDoc sese_033_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.06":
		var isoDoc sese_033_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.07":
		var isoDoc sese_033_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.08":
		var isoDoc sese_033_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.001.09":
		var isoDoc sese_033_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.002.08":
		var isoDoc sese_033_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.033.002.09":
		var isoDoc sese_033_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_033_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.01":
		var isoDoc sese_034_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.02":
		var isoDoc sese_034_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.03":
		var isoDoc sese_034_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.04":
		var isoDoc sese_034_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.05":
		var isoDoc sese_034_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.06":
		var isoDoc sese_034_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.07":
		var isoDoc sese_034_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.001.08":
		var isoDoc sese_034_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.002.07":
		var isoDoc sese_034_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.034.002.08":
		var isoDoc sese_034_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_034_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.01":
		var isoDoc sese_035_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.02":
		var isoDoc sese_035_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.04":
		var isoDoc sese_035_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.05":
		var isoDoc sese_035_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.06":
		var isoDoc sese_035_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.07":
		var isoDoc sese_035_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.08":
		var isoDoc sese_035_001_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.001.09":
		var isoDoc sese_035_001_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_001_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.002.08":
		var isoDoc sese_035_002_08.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_002_08 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.035.002.09":
		var isoDoc sese_035_002_09.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_035_002_09 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.01":
		var isoDoc sese_036_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.02":
		var isoDoc sese_036_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.03":
		var isoDoc sese_036_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.04":
		var isoDoc sese_036_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.05":
		var isoDoc sese_036_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.06":
		var isoDoc sese_036_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.001.07":
		var isoDoc sese_036_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.002.06":
		var isoDoc sese_036_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.036.002.07":
		var isoDoc sese_036_002_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_036_002_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.01":
		var isoDoc sese_037_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.02":
		var isoDoc sese_037_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.03":
		var isoDoc sese_037_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.04":
		var isoDoc sese_037_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.05":
		var isoDoc sese_037_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.001.06":
		var isoDoc sese_037_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.037.002.06":
		var isoDoc sese_037_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_037_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.02":
		var isoDoc sese_038_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.03":
		var isoDoc sese_038_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.04":
		var isoDoc sese_038_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.05":
		var isoDoc sese_038_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.06":
		var isoDoc sese_038_001_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.001.07":
		var isoDoc sese_038_001_07.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_001_07 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.002.06":
		var isoDoc sese_038_002_06.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_002_06 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.038.002.07":
		var isoDoc sese_038_002_07_0.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_038_002_07_0 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.039.001.01":
		var isoDoc sese_039_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_039_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.039.001.02":
		var isoDoc sese_039_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_039_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.039.001.03":
		var isoDoc sese_039_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_039_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.039.001.04":
		var isoDoc sese_039_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_039_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.039.002.04":
		var isoDoc sese_039_002_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_039_002_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.040.001.01":
		var isoDoc sese_040_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_040_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.040.001.02":
		var isoDoc sese_040_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_040_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:sese.040.002.02":
		var isoDoc sese_040_002_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as sese_040_002_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.001.001.03":
		var isoDoc setr_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.001.001.04":
		var isoDoc setr_001_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_001_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.002.001.03":
		var isoDoc setr_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.002.001.04":
		var isoDoc setr_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.003.001.03":
		var isoDoc setr_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.003.001.04":
		var isoDoc setr_003_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_003_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.004.001.03":
		var isoDoc setr_004_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_004_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.004.001.04":
		var isoDoc setr_004_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_004_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.005.001.03":
		var isoDoc setr_005_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_005_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.005.001.04":
		var isoDoc setr_005_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_005_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.006.001.03":
		var isoDoc setr_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.006.001.04":
		var isoDoc setr_006_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_006_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.007.001.03":
		var isoDoc setr_007_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_007_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.007.001.04":
		var isoDoc setr_007_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_007_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.008.001.03":
		var isoDoc setr_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.008.001.04":
		var isoDoc setr_008_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_008_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.009.001.03":
		var isoDoc setr_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.009.001.04":
		var isoDoc setr_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_009_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.010.001.03":
		var isoDoc setr_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.010.001.04":
		var isoDoc setr_010_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_010_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.011.001.03":
		var isoDoc setr_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.011.001.04":
		var isoDoc setr_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_011_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.012.001.03":
		var isoDoc setr_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.012.001.04":
		var isoDoc setr_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.013.001.03":
		var isoDoc setr_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.013.001.04":
		var isoDoc setr_013_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_013_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.014.001.03":
		var isoDoc setr_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.014.001.04":
		var isoDoc setr_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.015.001.03":
		var isoDoc setr_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.015.001.04":
		var isoDoc setr_015_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_015_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.016.001.03":
		var isoDoc setr_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.016.001.04":
		var isoDoc setr_016_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_016_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.017.001.03":
		var isoDoc setr_017_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_017_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.017.001.04":
		var isoDoc setr_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.018.001.03":
		var isoDoc setr_018_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_018_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.018.001.04":
		var isoDoc setr_018_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_018_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.027.001.01":
		var isoDoc setr_027_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_027_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.027.001.02":
		var isoDoc setr_027_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_027_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.027.001.03":
		var isoDoc setr_027_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_027_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.029.001.01":
		var isoDoc setr_029_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_029_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.030.001.01":
		var isoDoc setr_030_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_030_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.044.001.01":
		var isoDoc setr_044_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_044_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.044.001.02":
		var isoDoc setr_044_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_044_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.047.001.01":
		var isoDoc setr_047_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_047_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.047.001.02":
		var isoDoc setr_047_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_047_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.048.001.01":
		var isoDoc setr_048_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_048_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.049.001.01":
		var isoDoc setr_049_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_049_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.049.001.02":
		var isoDoc setr_049_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_049_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.050.001.01":
		var isoDoc setr_050_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_050_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.051.001.01":
		var isoDoc setr_051_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_051_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.051.001.02":
		var isoDoc setr_051_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_051_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.052.001.01":
		var isoDoc setr_052_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_052_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.053.001.01":
		var isoDoc setr_053_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_053_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.053.001.02":
		var isoDoc setr_053_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_053_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.054.001.01":
		var isoDoc setr_054_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_054_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.055.001.01":
		var isoDoc setr_055_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_055_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.055.001.02":
		var isoDoc setr_055_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_055_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.056.001.01":
		var isoDoc setr_056_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_056_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.057.001.01":
		var isoDoc setr_057_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_057_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.057.001.02":
		var isoDoc setr_057_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_057_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.058.001.01":
		var isoDoc setr_058_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_058_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:setr.058.001.02":
		var isoDoc setr_058_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as setr_058_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.001.001.01":
		var isoDoc tsin_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.002.001.01":
		var isoDoc tsin_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.003.001.01":
		var isoDoc tsin_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.004.001.01":
		var isoDoc tsin_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.005.001.01":
		var isoDoc tsin_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.006.001.01":
		var isoDoc tsin_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.007.001.01":
		var isoDoc tsin_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.008.001.01":
		var isoDoc tsin_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.009.001.01":
		var isoDoc tsin_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.010.001.01":
		var isoDoc tsin_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.011.001.01":
		var isoDoc tsin_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.012.001.01":
		var isoDoc tsin_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsin.013.001.01":
		var isoDoc tsin_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsin_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.001.001.03":
		var isoDoc tsmt_001_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_001_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.002.001.03":
		var isoDoc tsmt_002_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_002_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.002.001.04":
		var isoDoc tsmt_002_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_002_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.003.001.03":
		var isoDoc tsmt_003_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_003_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.004.001.02":
		var isoDoc tsmt_004_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_004_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.005.001.02":
		var isoDoc tsmt_005_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_005_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.006.001.03":
		var isoDoc tsmt_006_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_006_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.007.001.02":
		var isoDoc tsmt_007_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_007_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.008.001.03":
		var isoDoc tsmt_008_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_008_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.009.001.03":
		var isoDoc tsmt_009_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_009_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.009.001.04":
		var isoDoc tsmt_009_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_009_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.009.001.05":
		var isoDoc tsmt_009_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_009_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.010.001.03":
		var isoDoc tsmt_010_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_010_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.011.001.03":
		var isoDoc tsmt_011_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_011_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.011.001.04":
		var isoDoc tsmt_011_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_011_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.012.001.03":
		var isoDoc tsmt_012_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_012_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.012.001.04":
		var isoDoc tsmt_012_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_012_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.012.001.05":
		var isoDoc tsmt_012_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_012_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.013.001.03":
		var isoDoc tsmt_013_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_013_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.014.001.03":
		var isoDoc tsmt_014_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_014_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.014.001.04":
		var isoDoc tsmt_014_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_014_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.014.001.05":
		var isoDoc tsmt_014_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_014_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.015.001.03":
		var isoDoc tsmt_015_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_015_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.016.001.03":
		var isoDoc tsmt_016_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_016_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.017.001.03":
		var isoDoc tsmt_017_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_017_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.017.001.04":
		var isoDoc tsmt_017_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_017_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.017.001.05":
		var isoDoc tsmt_017_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_017_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.018.001.03":
		var isoDoc tsmt_018_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_018_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.018.001.04":
		var isoDoc tsmt_018_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_018_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.018.001.05":
		var isoDoc tsmt_018_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_018_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.019.001.03":
		var isoDoc tsmt_019_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_019_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.019.001.04":
		var isoDoc tsmt_019_001_04.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_019_001_04 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.019.001.05":
		var isoDoc tsmt_019_001_05.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_019_001_05 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.020.001.02":
		var isoDoc tsmt_020_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_020_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.021.001.03":
		var isoDoc tsmt_021_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_021_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.022.001.02":
		var isoDoc tsmt_022_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_022_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.023.001.03":
		var isoDoc tsmt_023_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_023_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.024.001.03":
		var isoDoc tsmt_024_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_024_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.025.001.03":
		var isoDoc tsmt_025_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_025_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.026.001.02":
		var isoDoc tsmt_026_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_026_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.027.001.02":
		var isoDoc tsmt_027_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_027_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.028.001.03":
		var isoDoc tsmt_028_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_028_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.029.001.02":
		var isoDoc tsmt_029_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_029_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.030.001.03":
		var isoDoc tsmt_030_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_030_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.031.001.03":
		var isoDoc tsmt_031_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_031_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.032.001.03":
		var isoDoc tsmt_032_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_032_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.033.001.03":
		var isoDoc tsmt_033_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_033_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.034.001.03":
		var isoDoc tsmt_034_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_034_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.035.001.03":
		var isoDoc tsmt_035_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_035_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.036.001.03":
		var isoDoc tsmt_036_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_036_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.037.001.03":
		var isoDoc tsmt_037_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_037_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.038.001.03":
		var isoDoc tsmt_038_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_038_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.040.001.03":
		var isoDoc tsmt_040_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_040_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.041.001.03":
		var isoDoc tsmt_041_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_041_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.042.001.03":
		var isoDoc tsmt_042_001_03.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_042_001_03 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.044.001.01":
		var isoDoc tsmt_044_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_044_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.044.001.02":
		var isoDoc tsmt_044_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_044_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.045.001.01":
		var isoDoc tsmt_045_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_045_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.045.001.02":
		var isoDoc tsmt_045_001_02.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_045_001_02 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01":
		var isoDoc tsmt_046_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_046_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.047.001.01":
		var isoDoc tsmt_047_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_047_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.048.001.01":
		var isoDoc tsmt_048_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_048_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.049.001.01":
		var isoDoc tsmt_049_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_049_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.050.001.01":
		var isoDoc tsmt_050_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_050_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.051.001.01":
		var isoDoc tsmt_051_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_051_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.052.001.01":
		var isoDoc tsmt_052_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_052_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.053.001.01":
		var isoDoc tsmt_053_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_053_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.054.001.01":
		var isoDoc tsmt_054_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_054_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsmt.055.001.01":
		var isoDoc tsmt_055_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsmt_055_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.001.001.01":
		var isoDoc tsrv_001_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_001_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.002.001.01":
		var isoDoc tsrv_002_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_002_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.003.001.01":
		var isoDoc tsrv_003_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_003_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.004.001.01":
		var isoDoc tsrv_004_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_004_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.005.001.01":
		var isoDoc tsrv_005_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_005_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.006.001.01":
		var isoDoc tsrv_006_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_006_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.007.001.01":
		var isoDoc tsrv_007_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_007_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.008.001.01":
		var isoDoc tsrv_008_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_008_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.009.001.01":
		var isoDoc tsrv_009_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_009_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.010.001.01":
		var isoDoc tsrv_010_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_010_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.011.001.01":
		var isoDoc tsrv_011_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_011_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.012.001.01":
		var isoDoc tsrv_012_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_012_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.013.001.01":
		var isoDoc tsrv_013_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_013_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.014.001.01":
		var isoDoc tsrv_014_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_014_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.015.001.01":
		var isoDoc tsrv_015_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_015_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.016.001.01":
		var isoDoc tsrv_016_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_016_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.017.001.01":
		var isoDoc tsrv_017_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_017_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.018.001.01":
		var isoDoc tsrv_018_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_018_001_01 document")
		}
		doc = isoDoc
	case "urn:iso:std:iso:20022:tech:xsd:tsrv.019.001.01":
		var isoDoc tsrv_019_001_01.Document
		err := xml.Unmarshal(data, &isoDoc)
		if err != nil {
			globalErr = fmt.Errorf("failed to unmarshal document as tsrv_019_001_01 document")
		}
		doc = isoDoc
	default:
		return nil, fmt.Errorf("unknown schema '%s'", space)
	}

	return doc, globalErr
}
