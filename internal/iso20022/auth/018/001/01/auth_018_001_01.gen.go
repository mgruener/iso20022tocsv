// Code generated by main. DO NOT EDIT.

package auth_018_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IBAN"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Othr"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type BICFIIdentifier string

// May be one of WIBO, TREA, TIBO, TLBO, SWAP, STBO, PRBO, PFAN, NIBO, MAAA, MOSP, LIBO, LIBI, JIBA, ISDA, GCFR, FUSW, EUCH, EUUS, EURI, EONS, EONA, CIBO, CDOR, BUBO, BBSW
type BenchmarkCurveName2Code string

type BenchmarkCurveName4Choice struct {
	ISIN ISINOct2015Identifier   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ISIN"`
	Indx BenchmarkCurveName2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Indx"`
	Nm   Max25Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm"`
}

type BinaryFile1 struct {
	MIMETp         Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MIMETp,omitempty"`
	NcodgTp        Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 NcodgTp,omitempty"`
	CharSet        Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CharSet,omitempty"`
	InclBinryObjct Max100KBinary `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 InclBinryObjct,omitempty"`
}

type BranchAndFinancialInstitutionIdentification5 struct {
	FinInstnId FinancialInstitutionIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 FinInstnId"`
	BrnchId    BranchData2                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BrnchId,omitempty"`
}

type BranchData2 struct {
	Id      Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id,omitempty"`
	Nm      Max140Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm,omitempty"`
	PstlAdr PostalAddress6 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PstlAdr,omitempty"`
}

type CashCollateral5 struct {
	CollId    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CollId,omitempty"`
	CshAcctId AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CshAcctId,omitempty"`
	AsstNb    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AsstNb,omitempty"`
	DpstAmt   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DpstAmt,omitempty"`
	DpstTp    DepositType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DpstTp,omitempty"`
	MtrtyDt   ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MtrtyDt,omitempty"`
	ValDt     ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ValDt,omitempty"`
	XchgRate  float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XchgRate,omitempty"`
	CollVal   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CollVal"`
	Hrcut     float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Hrcut,omitempty"`
}

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

type ClearingSystemMemberIdentification2 struct {
	ClrSysId ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ClrSysId,omitempty"`
	MmbId    Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MmbId"`
}

type ContactDetails2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 NmPrfx,omitempty"`
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm,omitempty"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 FaxNb,omitempty"`
	EmailAdr Max2048Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 EmailAdr,omitempty"`
	Othr     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Othr,omitempty"`
}

type ContractBalance1 struct {
	Tp        ContractBalanceType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Tp"`
	Amt       ActiveCurrencyAndAmount    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	CdtDbtInd CreditDebit3Code           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CdtDbtInd"`
}

type ContractBalanceType1Choice struct {
	Cd    ExternalContractBalanceType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

type ContractCollateral1 struct {
	TtlAmt   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TtlAmt"`
	CollDesc []CashCollateral5       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CollDesc,omitempty"`
	AddtlInf Max1025Text             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AddtlInf,omitempty"`
}

type ContractRegistration1 struct {
	CtrctRegnId   Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctRegnId"`
	RptgPty       TradeParty2                                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RptgPty"`
	RegnAgt       BranchAndFinancialInstitutionIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RegnAgt"`
	CtrctRegnOpng []ContractRegistration2                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctRegnOpng"`
	SplmtryData   []SupplementaryData1                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SplmtryData,omitempty"`
}

type ContractRegistration2 struct {
	CtrctRegnOpngId Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctRegnOpngId"`
	Prty            Priority2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prty"`
	Ctrct           UnderlyingContract1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Ctrct"`
	CtrctBal        []ContractBalance1            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctBal,omitempty"`
	PmtSchdlTp      PaymentScheduleType1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtSchdlTp,omitempty"`
	PrvsRegnId      []DocumentIdentification22    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PrvsRegnId,omitempty"`
	AddtlInf        Max1025Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AddtlInf,omitempty"`
	Attchmnt        []DocumentGeneralInformation3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Attchmnt,omitempty"`
	SplmtryData     []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SplmtryData,omitempty"`
}

type ContractRegistrationRequestV01 struct {
	GrpHdr      CurrencyControlHeader1  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 GrpHdr"`
	CtrctRegn   []ContractRegistration1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctRegn"`
	SplmtryData []SupplementaryData1    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SplmtryData,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebit3Code string

type CurrencyControlHeader1 struct {
	MsgId    Max35Text                                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MsgId"`
	CreDtTm  ISODateTime                                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CreDtTm"`
	NbOfItms Max15NumericText                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 NbOfItms"`
	InitgPty PartyIdentification77                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 InitgPty"`
	FwdgAgt  BranchAndFinancialInstitutionIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 FwdgAgt,omitempty"`
}

type DateAndPlaceOfBirth struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CityOfBirth"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtryOfBirth"`
}

// May be one of FITE, CALL
type DepositType1Code string

type Document struct {
	CtrctRegnReq ContractRegistrationRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctRegnReq"`
}

type DocumentGeneralInformation3 struct {
	DocTp           ExternalDocumentType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DocTp"`
	DocNb           Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DocNb"`
	SndrRcvrSeqId   Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SndrRcvrSeqId,omitempty"`
	IsseDt          ISODate                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IsseDt,omitempty"`
	URL             Max256Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 URL,omitempty"`
	LkFileHash      SignatureEnvelopeReference `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 LkFileHash,omitempty"`
	AttchdBinryFile BinaryFile1                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AttchdBinryFile"`
}

type DocumentIdentification22 struct {
	Id       Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id"`
	DtOfIsse ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DtOfIsse,omitempty"`
}

// Must match the pattern [0-9]
type Exact1NumericText string

type ExchangeRate1 struct {
	UnitCcy  ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 UnitCcy,omitempty"`
	XchgRate float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XchgRate,omitempty"`
	RateTp   ExchangeRateType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RateTp,omitempty"`
	CtrctId  Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctId,omitempty"`
}

// May be one of SPOT, SALE, AGRD
type ExchangeRateType1Code string

// Must be at least 1 items long
type ExternalAccountIdentification1Code string

// Must be at least 1 items long
type ExternalClearingSystemIdentification1Code string

// Must be at least 1 items long
type ExternalContractBalanceType1Code string

// Must be at least 1 items long
type ExternalDocumentType1Code string

// Must be at least 1 items long
type ExternalFinancialInstitutionIdentification1Code string

// Must be at least 1 items long
type ExternalOrganisationIdentification1Code string

// Must be at least 1 items long
type ExternalPersonIdentification1Code string

type FinancialIdentificationSchemeName1Choice struct {
	Cd    ExternalFinancialInstitutionIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

type FinancialInstitutionIdentification8 struct {
	BICFI       BICFIIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BICFI,omitempty"`
	ClrSysMmbId ClearingSystemMemberIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ClrSysMmbId,omitempty"`
	Nm          Max140Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm,omitempty"`
	PstlAdr     PostalAddress6                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PstlAdr,omitempty"`
	Othr        GenericFinancialIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Othr,omitempty"`
}

type FloatingInterestRate4 struct {
	RefRate    BenchmarkCurveName4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RefRate"`
	Term       InterestRateContractTerm1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Term"`
	BsisPtSprd float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BsisPtSprd"`
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Issr,omitempty"`
}

type GenericFinancialIdentification1 struct {
	Id      Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id"`
	SchmeNm FinancialIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Issr,omitempty"`
}

type GenericOrganisationIdentification1 struct {
	Id      Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id"`
	SchmeNm OrganisationIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Issr,omitempty"`
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id"`
	SchmeNm PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Issr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InterestPaymentDateRange1 struct {
	IntrstSchdlId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IntrstSchdlId,omitempty"`
	XpctdDt       ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XpctdDt,omitempty"`
	DueDt         ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DueDt,omitempty"`
}

type InterestPaymentDateRange2 struct {
	IntrstSchdlId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IntrstSchdlId,omitempty"`
	Amt           ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	DueDt         ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DueDt"`
	AddtlInf      Max1025Text             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AddtlInf,omitempty"`
}

type InterestPaymentSchedule1Choice struct {
	DtRg     InterestPaymentDateRange1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DtRg"`
	SubSchdl []InterestPaymentDateRange2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SubSchdl"`
}

type InterestRate2Choice struct {
	Fxd  float64               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Fxd"`
	Fltg FloatingInterestRate4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Fltg"`
}

type InterestRateContractTerm1 struct {
	Unit RateBasis1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Unit"`
	Val  float64        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Val"`
}

type LegalOrganisation2 struct {
	Id           Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id,omitempty"`
	Nm           Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm,omitempty"`
	EstblishmtDt ISODate    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 EstblishmtDt,omitempty"`
	RegnDt       ISODate    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RegnDt,omitempty"`
}

type LoanContract1 struct {
	CtrctDocId  DocumentIdentification22       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctDocId"`
	Buyr        []TradeParty2                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Buyr"`
	Sellr       []TradeParty2                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Sellr"`
	Amt         ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	MtrtyDt     ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MtrtyDt"`
	PrlngtnFlg  bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PrlngtnFlg"`
	StartDt     ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 StartDt"`
	SttlmCcy    ActiveCurrencyCode             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SttlmCcy"`
	SpclConds   SpecialCondition1              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SpclConds,omitempty"`
	DrtnCd      Exact1NumericText              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DrtnCd"`
	IntrstRate  InterestRate2Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IntrstRate"`
	Trch        []LoanContractTranche1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Trch,omitempty"`
	PmtSchdl    PaymentSchedule1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtSchdl,omitempty"`
	IntrstSchdl InterestPaymentSchedule1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IntrstSchdl"`
	IntraCpnyLn bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IntraCpnyLn"`
	Coll        ContractCollateral1            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Coll,omitempty"`
	SndctdLn    []SyndicatedLoan1              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SndctdLn,omitempty"`
	Attchmnt    []DocumentGeneralInformation3  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Attchmnt,omitempty"`
}

type LoanContractTranche1 struct {
	TrchNb      float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TrchNb"`
	XpctdDt     ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XpctdDt"`
	Amt         ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	DueDt       ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DueDt,omitempty"`
	DrtnCd      Exact1NumericText       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DrtnCd,omitempty"`
	LastTrchInd bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 LastTrchInd,omitempty"`
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max1025Text string

// Must be at least 1 items long
type Max140Text string

// Must match the pattern [0-9]{1,15}
type Max15NumericText string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max2048Text string

// Must be at least 1 items long
type Max256Text string

// Must be at least 1 items long
type Max25Text string

// Must be at least 1 items long
type Max34Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type OrganisationIdentification8 struct {
	AnyBIC AnyBICIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AnyBIC,omitempty"`
	Othr   []GenericOrganisationIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Othr,omitempty"`
}

type OrganisationIdentificationSchemeName1Choice struct {
	Cd    ExternalOrganisationIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

type Party11Choice struct {
	OrgId  OrganisationIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 OrgId"`
	PrvtId PersonIdentification5       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PrvtId"`
}

type PartyIdentification77 struct {
	Nm        Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Nm,omitempty"`
	PstlAdr   PostalAddress19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PstlAdr,omitempty"`
	Id        Party11Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Id,omitempty"`
	CtryOfRes CountryCode     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtryOfRes,omitempty"`
	CtctDtls  ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtctDtls,omitempty"`
}

type PaymentDateRange1 struct {
	PmtSchdlId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtSchdlId,omitempty"`
	XpctdDt    ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XpctdDt,omitempty"`
	DueDt      ISODate   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DueDt,omitempty"`
}

type PaymentDateRange2 struct {
	PmtSchdlId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtSchdlId,omitempty"`
	Amt        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	XpctdDt    ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XpctdDt,omitempty"`
	DueDt      ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DueDt"`
}

type PaymentSchedule1Choice struct {
	DtRg     PaymentDateRange1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DtRg"`
	SubSchdl []PaymentDateRange2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SubSchdl"`
}

type PaymentScheduleType1Choice struct {
	Cd    PaymentScheduleType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

// May be one of CNTR, ESTM
type PaymentScheduleType1Code string

type PersonIdentification5 struct {
	DtAndPlcOfBirth DateAndPlaceOfBirth            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DtAndPlcOfBirth,omitempty"`
	Othr            []GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Othr,omitempty"`
}

type PersonIdentificationSchemeName1Choice struct {
	Cd    ExternalPersonIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Cd"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Prtry"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress19 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TwnNm,omitempty"`
	TwnLctnNm   Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TwnLctnNm,omitempty"`
	DstrctNm    Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 DstrctNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AdrLine,omitempty"`
}

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 AdrLine,omitempty"`
}

// May be one of HIGH, NORM
type Priority2Code string

// May be one of DAYS, MNTH, WEEK, YEAR
type RateBasis1Code string

type ShipmentDateRange1 struct {
	EarlstShipmntDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 EarlstShipmntDt,omitempty"`
	LatstShipmntDt  ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 LatstShipmntDt,omitempty"`
}

type ShipmentDateRange2 struct {
	SubQtyVal       float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SubQtyVal"`
	EarlstShipmntDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 EarlstShipmntDt,omitempty"`
	LatstShipmntDt  ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 LatstShipmntDt,omitempty"`
}

type ShipmentSchedule2Choice struct {
	ShipmntDtRg     ShipmentDateRange1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ShipmntDtRg"`
	ShipmntSubSchdl []ShipmentDateRange2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ShipmntSubSchdl"`
}

type SignatureEnvelopeReference struct {
	Item string `xml:",any"`
}

type SpecialCondition1 struct {
	IncmgAmt           ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IncmgAmt"`
	OutgngAmt          ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 OutgngAmt"`
	IncmgAmtToOthrAcct ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 IncmgAmtToOthrAcct,omitempty"`
	PmtFrOthrAcct      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtFrOthrAcct,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SyndicatedLoan1 struct {
	Brrwr       TradeParty2             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Brrwr"`
	Lndr        TradeParty2             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Lndr,omitempty"`
	Amt         ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt,omitempty"`
	Shr         float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Shr,omitempty"`
	XchgRateInf ExchangeRate1           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XchgRateInf,omitempty"`
}

// May be one of NONE, MASA, MISA, SISA, IISA, CUYP, PRYP, ASTR, EMPY, EMCY, EPRY, ECYE, NFPI, NFQP, DECP, IRAC, IRAR, KEOG, PFSP, 401K, SIRA, 403B, 457X, RIRA, RIAN, RCRF, RCIP, EIFP, EIOP
type TaxExemptReason1Code string

type TaxExemptionReasonFormatChoice struct {
	Ustrd Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Ustrd"`
	Strd  TaxExemptReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Strd"`
}

type TaxParty3 struct {
	TaxId       Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TaxId,omitempty"`
	TaxTp       Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TaxTp,omitempty"`
	RegnId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 RegnId,omitempty"`
	TaxXmptnRsn []TaxExemptionReasonFormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TaxXmptnRsn,omitempty"`
}

type TradeContract1 struct {
	CtrctDocId   DocumentIdentification22      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 CtrctDocId,omitempty"`
	Amt          ActiveCurrencyAndAmount       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Amt"`
	Buyr         []TradeParty2                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Buyr"`
	Sellr        []TradeParty2                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Sellr"`
	MtrtyDt      ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 MtrtyDt"`
	PrlngtnFlg   bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PrlngtnFlg"`
	StartDt      ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 StartDt"`
	SttlmCcy     ActiveCurrencyCode            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 SttlmCcy"`
	XchgRateInf  ExchangeRate1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 XchgRateInf,omitempty"`
	PmtSchdl     InterestPaymentDateRange1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PmtSchdl,omitempty"`
	ShipmntSchdl ShipmentSchedule2Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 ShipmntSchdl,omitempty"`
	Attchmnt     []DocumentGeneralInformation3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Attchmnt,omitempty"`
}

type TradeParty2 struct {
	PtyId  PartyIdentification77 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 PtyId"`
	LglOrg LegalOrganisation2    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 LglOrg,omitempty"`
	TaxPty []TaxParty3           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 TaxPty,omitempty"`
}

type UnderlyingContract1Choice struct {
	Ln   LoanContract1  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Ln"`
	Trad TradeContract1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.018.001.01 Trad"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
