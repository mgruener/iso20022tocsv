// Code generated by main. DO NOT EDIT.

package auth_083_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AgreementType1Choice struct {
	Tp    ExternalAgreementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 Tp"`
	Prtry Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 Prtry"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type Document struct {
	SctiesFincgRptgMssngCollReq SecuritiesFinancingReportingMissingCollateralRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 SctiesFincgRptgMssngCollReq"`
}

// Must be at least 1 items long
type ExternalAgreementType1Code string

type ISORestrictedYear time.Time

func (t *ISORestrictedYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISORestrictedYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MasterAgreement1 struct {
	Tp                AgreementType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 Tp"`
	Vrsn              ISORestrictedYear    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 Vrsn,omitempty"`
	OthrMstrAgrmtDtls Max50Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 OthrMstrAgrmtDtls,omitempty"`
}

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max50Text string

// Must be at least 1 items long
type Max52Text string

type OrganisationIdentification9Choice struct {
	LEI    LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 LEI"`
	ClntId Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 ClntId"`
	AnyBIC AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 AnyBIC"`
}

type SecuritiesFinancingReportingMissingCollateralRequestV01 struct {
	TxId        []TradeTransactionIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 TxId"`
	SplmtryData []SupplementaryData1              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradeTransactionIdentification6 struct {
	RptgCtrPty OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 RptgCtrPty"`
	OthrCtrPty OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 OthrCtrPty"`
	UnqTradIdr Max52Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 UnqTradIdr,omitempty"`
	MstrAgrmt  MasterAgreement1                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.083.001.01 MstrAgrmt,omitempty"`
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
