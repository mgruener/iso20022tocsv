// Code generated by main. DO NOT EDIT.

package auth_077_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type BenchmarkCancellation1 struct {
	TechRcrdId  Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TechRcrdId,omitempty"`
	Id          SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	SplmtryData []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 SplmtryData,omitempty"`
}

type BenchmarkCreate1 struct {
	TechRcrdId   Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TechRcrdId,omitempty"`
	Id           SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	Othr         BenchmarkDetail1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Othr"`
	Admstr       PartyIdentification136   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Admstr"`
	NdrsngPty    PartyIdentification136   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 NdrsngPty,omitempty"`
	Sts          StatusDetail1            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Sts,omitempty"`
	TechVldtyPrd Period4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TechVldtyPrd,omitempty"`
	SplmtryData  []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 SplmtryData,omitempty"`
}

// May be one of WIBO, TREA, TIBO, TLBO, SWAP, STBO, PRBO, PFAN, NIBO, MAAA, MOSP, LIBO, LIBI, JIBA, ISDA, GCFR, FUSW, EUCH, EUUS, EURI, EONS, EONA, CIBO, CDOR, BUBO, BBSW
type BenchmarkCurveName2Code string

type BenchmarkDetail1 struct {
	FullNm Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FullNm"`
	Indx   BenchmarkCurveName2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Indx,omitempty"`
	Cmnt   Max20000Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Cmnt,omitempty"`
}

type BenchmarkReport1Choice struct {
	Cret BenchmarkCreate1       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Cret"`
	Upd  BenchmarkUpdate1       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Upd"`
	Cxl  BenchmarkCancellation1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Cxl"`
}

type BenchmarkUpdate1 struct {
	TechRcrdId   Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TechRcrdId,omitempty"`
	Id           SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	PrvsId       SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 PrvsId,omitempty"`
	Othr         BenchmarkDetail1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Othr"`
	Admstr       PartyIdentification136   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Admstr"`
	NdrsngPty    PartyIdentification136   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 NdrsngPty,omitempty"`
	Sts          StatusDetail1            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Sts,omitempty"`
	TechVldtyPrd Period4Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TechVldtyPrd,omitempty"`
	SplmtryData  []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 SplmtryData,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	FinBchmkRpt FinancialBenchmarkReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FinBchmkRpt"`
}

// Must be at least 1 items long
type ExternalAuthorityIdentification1Code string

// Must be at least 1 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialBenchmarkReportV01 struct {
	BchmkData   []BenchmarkReport1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 BchmkData"`
	SplmtryData []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 SplmtryData,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Cd"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Prtry"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must be at least 1 items long
type Max10Text string

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max20000Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Adr,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Tp"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 AnyBIC"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 PrtryId"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 NmAndAdr"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 LEI,omitempty"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Dt"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FrDt"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 ToDt"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FrDtToDt"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Ctry"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Desc,omitempty"`
}

type StatusDetail1 struct {
	Ctry          CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Ctry,omitempty"`
	CmptntAuthrty SupervisingAuthorityIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 CmptntAuthrty"`
	Sts           Max10Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Sts,omitempty"`
	StsRsn        Max10Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 StsRsn"`
	ActvtyPrd     Period4Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 ActvtyPrd,omitempty"`
	Cmnt          Max20000Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Cmnt,omitempty"`
}

type SupervisingAuthorityIdentification1 struct {
	Id  SupervisingAuthorityIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Id,omitempty"`
	LEI LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 LEI,omitempty"`
}

type SupervisingAuthorityIdentification1Choice struct {
	PrtryId ExternalAuthorityIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 PrtryId"`
	FullNm  Max350Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 FullNm"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.077.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
