// Code generated by main. DO NOT EDIT.

package auth_044_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	FinInstrmRptgEqtyTradgActvtyRslt FinancialInstrumentReportingEquityTradingActivityResultV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 FinInstrmRptgEqtyTradgActvtyRslt"`
}

type FinancialInstrumentReportingEquityTradingActivityResultV01 struct {
	RptHdr            SecuritiesMarketReportHeader1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 RptHdr"`
	EqtyTrnsprncyData []TransparencyDataReport12    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 EqtyTrnsprncyData"`
	SplmtryData       []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 SplmtryData,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MarketDetail2 struct {
	Id              MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Id"`
	AvrgDalyNbOfTxs float64       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 AvrgDalyNbOfTxs,omitempty"`
}

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max50Text string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Dt"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 FrDt"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 ToDt"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 FrDtToDt"`
}

type SecuritiesMarketReportHeader1 struct {
	RptgNtty     TradingVenueIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 RptgNtty"`
	RptgPrd      Period4Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 RptgPrd"`
	SubmissnDtTm ISODateTime                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 SubmissnDtTm,omitempty"`
}

type StatisticsTransparency3 struct {
	AvrgDalyTrnvr    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 AvrgDalyTrnvr,omitempty"`
	AvrgTxVal        ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 AvrgTxVal,omitempty"`
	LrgInScale       float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 LrgInScale,omitempty"`
	StdMktSz         float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 StdMktSz,omitempty"`
	AvrgDalyNbOfTxs  float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 AvrgDalyNbOfTxs,omitempty"`
	TtlNbOfTxsExctd  float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 TtlNbOfTxsExctd,omitempty"`
	TtlVolOfTxsExctd float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 TtlVolOfTxsExctd,omitempty"`
	TtlNbOfTradgDays float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 TtlNbOfTradgDays,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of APPA, CTPS
type TradingVenue2Code string

type TradingVenueIdentification1Choice struct {
	MktIdCd          MICIdentifier               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 MktIdCd"`
	NtlCmptntAuthrty CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 NtlCmptntAuthrty"`
	Othr             TradingVenueIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Othr"`
}

type TradingVenueIdentification2 struct {
	Id Max50Text         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Id"`
	Tp TradingVenue2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Tp"`
}

type TransparencyDataReport12 struct {
	TechRcrdId Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 TechRcrdId,omitempty"`
	Id         ISINOct2015Identifier        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Id"`
	FullNm     Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 FullNm,omitempty"`
	TradgVn    MICIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 TradgVn,omitempty"`
	RptgPrd    Period4Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 RptgPrd,omitempty"`
	Lqdty      bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Lqdty,omitempty"`
	Mthdlgy    TransparencyMethodology2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Mthdlgy,omitempty"`
	Sttstcs    StatisticsTransparency3      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 Sttstcs,omitempty"`
	RlvntMkt   MarketDetail2                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.044.001.01 RlvntMkt,omitempty"`
}

// May be one of YEAR, SINT, FFWK, ESTM
type TransparencyMethodology2Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
