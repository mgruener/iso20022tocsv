// Code generated by main. DO NOT EDIT.

package auth_049_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type CountryCodeAndName3 struct {
	Cd CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Cd"`
	Nm Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Nm"`
}

type Document struct {
	FinInstrmRptgMktIdCdRpt FinancialInstrumentReportingMarketIdentificationCodeReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 FinInstrmRptgMktIdCdRpt"`
}

type FinancialInstrumentReportingMarketIdentificationCodeReportV01 struct {
	MktId       []MarketIdentification92 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 MktId"`
	SplmtryData []SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 SplmtryData,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// May be one of SGMT, OPRT
type MarketIdentification1Code string

type MarketIdentification92 struct {
	Oprg        MICIdentifier             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Oprg"`
	Sgmt        MICIdentifier             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Sgmt"`
	Tp          MarketIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Tp"`
	Ctgy        TradingVenue1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Ctgy,omitempty"`
	InstnNm     Max450Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 InstnNm"`
	Acrnm       Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Acrnm,omitempty"`
	City        Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 City,omitempty"`
	Ctry        CountryCodeAndName3       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Ctry"`
	AuthrtyNm   Max450Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 AuthrtyNm,omitempty"`
	WebSite     Max210Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 WebSite,omitempty"`
	Note        Max450Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Note,omitempty"`
	Mod         Modification1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Mod,omitempty"`
	CreDt       ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 CreDt,omitempty"`
	VldtyPrd    Period4Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 VldtyPrd"`
	StsDt       ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 StsDt,omitempty"`
	LastUpdtdDt ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 LastUpdtdDt,omitempty"`
}

// Must be at least 1 items long
type Max210Text string

// Must be at least 1 items long
type Max350Text string

// Must be at least 1 items long
type Max35Text string

// Must be at least 1 items long
type Max450Text string

// Must be at least 1 items long
type Max70Text string

// May be one of NOCH, MODI, DELE, ADDD
type Modification1Code string

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Dt"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 FrDt"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 ToDt"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 FrDtToDt"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.049.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of SINT, MLTF, OTFS, RMKT
type TradingVenue1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
