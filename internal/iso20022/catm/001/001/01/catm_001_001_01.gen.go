// Code generated by main. DO NOT EDIT.

package catm_001_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

// May be one of MACC, MCCS, UKPT, DKPT, E3DC, HS25, ERS2, ERSA
type Algorithm1Code string

type AlgorithmIdentification1 struct {
	Algo  Algorithm1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Param,omitempty"`
}

// May be one of ATTD, SATT, UATT
type AttendanceContext1Code string

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData1 struct {
	Vrsn        float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	Rcpt        []Recipient1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Rcpt"`
	MACAlgo     AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 MACAlgo"`
	NcpsltdCntt EncapsulatedContent1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcpsltdCntt"`
	MAC         Max35Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 MAC"`
}

// May be one of TAGC, PHYS, BRCD, MGST, CICC, DFLE, CTLS, ECTL
type CardDataReading1Code string

// May be one of MNSG, NPIN, FCPN, FEPN, FDSG, FBIO, MNVR, FBIG, APKI, PKIS, CHDT, SCEC
type CardholderVerificationCapability1Code string

type CertificateIdentifier1 struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 IssrAndSrlNb"`
}

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 RltvDstngshdNm"`
}

type ContentInformationType1 struct {
	CnttTp           ContentType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CnttTp"`
	EnvlpdData       EnvelopedData1         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 EnvlpdData,omitempty"`
	AuthntcdData     AuthenticatedData1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 AuthntcdData,omitempty"`
	SgndData         SignedData1            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SgndData,omitempty"`
	DgstdData        DigestedData1          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DgstdData,omitempty"`
	NmdKeyNcrptdData NamedKeyEncryptedData1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NmdKeyNcrptdData,omitempty"`
}

// May be one of DATA, SIGN, EVLP, DGST, ECRP, AUTH
type ContentType1Code string

// May be one of SWPK, VDPR, AQPR, APPR, MRPR, TXCP, AKCP, STRP, DLGT, MGTP
type DataSetCategory2Code string

type DataSetIdentification2 struct {
	Nm      Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Nm,omitempty"`
	Tp      DataSetCategory2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Tp"`
	Vrsn    Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	CreDtTm ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CreDtTm,omitempty"`
}

type DigestedData1 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcpsltdCntt"`
	Dgst        Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Dgst"`
}

type DisplayCapabilities1 struct {
	DispTp    UserInterface2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DispTp"`
	NbOfLines Max3NumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NbOfLines"`
	LineWidth Max3NumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 LineWidth"`
}

type Document struct {
	StsRpt StatusReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 StsRpt"`
}

type EncapsulatedContent1 struct {
	CnttTp ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CnttTp"`
	Cntt   Max10000Binary   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Cntt,omitempty"`
}

type EncryptedContent1 struct {
	CnttTp         ContentType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CnttNcrptnAlgo"`
	NcrptdData     Max10000Binary           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcrptdData"`
}

type EnvelopedData1 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	Rcpt       []Recipient1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Rcpt"`
	NcrptdCntt EncryptedContent1  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcrptdCntt"`
}

// May be no more than 10 items long
type Exact10Text string

type GenericIdentification35 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Id"`
	Tp     PartyType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Tp,omitempty"`
	Issr   PartyType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 ShrtNm,omitempty"`
}

type Header4 struct {
	DwnldTrf bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DwnldTrf"`
	FrmtVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 FrmtVrsn"`
	XchgId   Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 XchgId"`
	CreDtTm  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CreDtTm"`
	InitgPty GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 InitgPty"`
	RcptPty  GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 RcptPty,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SrlNb"`
}

type KEK1 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	KEKId         KEKIdentifier1           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcrptdKey"`
}

type KEKIdentifier1 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyId"`
	KeyVrsn   Exact10Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyVrsn"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DerivtnId,omitempty"`
}

type KeyTransport1 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn"`
	RcptId        CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcrptdKey"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// Must match the pattern [0-9]{1,9}
type Max9NumericText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type NamedKeyEncryptedData1 struct {
	Vrsn       float64           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	KeyNm      Max140Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyNm,omitempty"`
	NcrptdCntt EncryptedContent1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcrptdCntt"`
}

// May be one of OFLN, ONLN, SMON
type OnLineCapability1Code string

// May be one of SOFT, EMVK, EMVO, MRIT, CHIT, SECM, PEDV, AQPR, MRPR, VDPR
type POIComponentType2Code string

type Parameter1 struct {
	InitlstnVctr Max500Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 InitlstnVctr,omitempty"`
}

// May be one of OPOI, ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType5Code string

// May be one of ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType6Code string

type PointOfInteractionCapabilities1 struct {
	CardRdngCpblties      []CardDataReading1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CardRdngCpblties,omitempty"`
	CrdhldrVrfctnCpblties []CardholderVerificationCapability1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 CrdhldrVrfctnCpblties,omitempty"`
	OnLineCpblties        OnLineCapability1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 OnLineCpblties,omitempty"`
	DispCpblties          []DisplayCapabilities1                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DispCpblties,omitempty"`
	PrtLineWidth          Max3NumericText                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 PrtLineWidth,omitempty"`
}

type PointOfInteractionComponent2 struct {
	POICmpntTp POIComponentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 POICmpntTp"`
	ManfctrId  Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 ManfctrId,omitempty"`
	Mdl        Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Mdl,omitempty"`
	VrsnNb     Max16Text             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 VrsnNb,omitempty"`
	SrlNb      Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SrlNb,omitempty"`
	ApprvlNb   []Max70Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 ApprvlNb,omitempty"`
}

type Recipient1Choice struct {
	KeyTrnsprt KeyTransport1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KeyTrnsprt,omitempty"`
	KEK        KEK1          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 KEK,omitempty"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 AttrVal"`
}

type SignedData1 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 NcpsltdCntt"`
	Cert        []Max3000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Cert,omitempty"`
	Sgnr        []Signer1                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Sgnr"`
}

type Signer1 struct {
	Vrsn      float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Vrsn,omitempty"`
	SgnrId    CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SgnrId"`
	DgstAlgo  AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DgstAlgo"`
	SgntrAlgo AlgorithmIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SgntrAlgo"`
	Sgntr     Max500Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Sgntr"`
}

type StatusReport1 struct {
	POIId       GenericIdentification35      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 POIId"`
	TermnlMgrId GenericIdentification35      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 TermnlMgrId,omitempty"`
	DataSet     []TerminalManagementDataSet1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DataSet"`
}

type StatusReportContent1 struct {
	POICpblties  PointOfInteractionCapabilities1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 POICpblties,omitempty"`
	POICmpnt     []PointOfInteractionComponent2  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 POICmpnt,omitempty"`
	AttndncCntxt AttendanceContext1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 AttndncCntxt,omitempty"`
	POIDtTm      ISODateTime                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 POIDtTm"`
	DataSetReqrd DataSetIdentification2          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DataSetReqrd,omitempty"`
	Evt          []TMSEvent1                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Evt,omitempty"`
	Errs         Max140Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Errs,omitempty"`
}

type StatusReportV01 struct {
	Hdr      Header4                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Hdr"`
	StsRpt   StatusReport1           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 StsRpt"`
	SctyTrlr ContentInformationType1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SctyTrlr"`
}

type TMSActionIdentification1 struct {
	ActnTp    TerminalManagementAction1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 ActnTp"`
	DataSetId DataSetIdentification2        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 DataSetId,omitempty"`
}

type TMSEvent1 struct {
	TmStmp      ISODateTime                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 TmStmp"`
	Rslt        TerminalManagementActionResult1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Rslt"`
	ActnId      TMSActionIdentification1            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 ActnId"`
	AddtlErrInf Max70Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 AddtlErrInf,omitempty"`
}

// May be one of ACTV, DCTV, DELT, DWNL, INST, RSTR, UPLD
type TerminalManagementAction1Code string

// May be one of ACCD, CNTE, FMTE, INVC, LENE, OVER, MISS, NSUP, SIGE, SUCC, SYNE, TIMO, UKDT, UKRF
type TerminalManagementActionResult1Code string

type TerminalManagementDataSet1 struct {
	Id      DataSetIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Id"`
	SeqCntr Max9NumericText        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 SeqCntr,omitempty"`
	Cntt    StatusReportContent1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.001.001.01 Cntt"`
}

// May be one of MDSP, CDSP
type UserInterface2Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
