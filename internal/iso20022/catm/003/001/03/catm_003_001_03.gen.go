// Code generated by main. DO NOT EDIT.

package catm_003_001_03

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorConfiguration3 struct {
	POIId       GenericIdentification35       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 POIId,omitempty"`
	TermnlMgrId GenericIdentification35       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TermnlMgrId"`
	DataSet     []TerminalManagementDataSet11 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DataSet"`
}

type AcceptorConfigurationContent3 struct {
	AcqrrPrtcolParams []AcquirerProtocolParameters6 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AcqrrPrtcolParams,omitempty"`
	MrchntParams      []Max10000Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MrchntParams,omitempty"`
	TermnlParams      []PaymentTerminalParameters1  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TermnlParams,omitempty"`
	ApplParams        []ApplicationParameters3      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ApplParams,omitempty"`
	HstComParams      []HostCommunicationParameter2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 HstComParams,omitempty"`
	SctyParams        []SecurityParameters2         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SctyParams,omitempty"`
}

type AcceptorConfigurationUpdateV03 struct {
	Hdr         Header4                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Hdr"`
	AccptrCfgtn AcceptorConfiguration3  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AccptrCfgtn"`
	SctyTrlr    ContentInformationType9 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SctyTrlr"`
}

type AcquirerHostConfiguration2 struct {
	HstId    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 HstId"`
	MsgToSnd []MessageFunction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MsgToSnd,omitempty"`
}

type AcquirerProtocolParameters5 struct {
	FinCaptr   FinancialCapture1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 FinCaptr"`
	BtchTrf    ExchangeConfiguration4   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 BtchTrf,omitempty"`
	CmpltnXchg ExchangeConfiguration5   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CmpltnXchg,omitempty"`
	CxlXchg    CancellationProcess1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CxlXchg,omitempty"`
}

type AcquirerProtocolParameters6 struct {
	AcqrrId        []GenericIdentification32    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AcqrrId"`
	ApplId         []Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ApplId,omitempty"`
	Hst            []AcquirerHostConfiguration2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Hst,omitempty"`
	OnLineTx       AcquirerProtocolParameters5  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 OnLineTx,omitempty"`
	OffLineTx      AcquirerProtocolParameters5  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 OffLineTx,omitempty"`
	RcncltnXchg    ExchangeConfiguration4       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 RcncltnXchg,omitempty"`
	RcncltnByAcqrr bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 RcncltnByAcqrr,omitempty"`
	TtlsPerCcy     bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TtlsPerCcy,omitempty"`
	SpltTtls       bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SpltTtls,omitempty"`
	CardDataVrfctn bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CardDataVrfctn,omitempty"`
	NtfyOffLineCxl bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NtfyOffLineCxl,omitempty"`
	BtchTrfCntt    []BatchTransactionType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 BtchTrfCntt,omitempty"`
	MsgItm         []MessageItemCondition1      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MsgItm,omitempty"`
	PrtctCardData  bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 PrtctCardData"`
}

// May be one of MACC, MCCS, CMA1
type Algorithm10Code string

// May be one of ERS2
type Algorithm4Code string

// May be one of HS25, HS38, HS51
type Algorithm5Code string

// May be one of EA2C, E3DC
type Algorithm6Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA1
type Algorithm9Code string

type AlgorithmIdentification10 struct {
	Algo  Algorithm10Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
	Param Parameter1      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Param,omitempty"`
}

type AlgorithmIdentification4 struct {
	Algo Algorithm4Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
}

type AlgorithmIdentification5 struct {
	Algo Algorithm5Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
}

type AlgorithmIdentification6 struct {
	Algo  Algorithm6Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Param,omitempty"`
}

type AlgorithmIdentification7 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
	Param Parameter2     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Param,omitempty"`
}

type AlgorithmIdentification8 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
	Param Parameter3     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Param,omitempty"`
}

type AlgorithmIdentification9 struct {
	Algo  Algorithm9Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Algo"`
	Param Parameter1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Param,omitempty"`
}

type ApplicationParameters3 struct {
	ApplId       Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ApplId"`
	Vrsn         Max16Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn"`
	Params       []Max100KBinary         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Params,omitempty"`
	NcrptdParams ContentInformationType7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcrptdParams,omitempty"`
}

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData3 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	Rcpt        []Recipient3Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Rcpt"`
	MACAlgo     AlgorithmIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MACAlgo"`
	NcpsltdCntt EncapsulatedContent2      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcpsltdCntt"`
	MAC         Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MAC"`
}

// May be one of DTCT, CNCL, FAIL, DCLN
type BatchTransactionType1Code string

// May be one of ADVC, NALW, REQU
type CancellationProcess1Code string

type CertificateIdentifier1 struct {
	IssrAndSrlNb IssuerAndSerialNumber1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 IssrAndSrlNb"`
}

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 RltvDstngshdNm"`
}

type ClockSynchronisation1 struct {
	POITmZone Max70Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 POITmZone"`
	SynctnSvr []NetworkParameters2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SynctnSvr,omitempty"`
}

type ContentInformationType7 struct {
	CnttTp     ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CnttTp"`
	EnvlpdData EnvelopedData3   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 EnvlpdData"`
}

type ContentInformationType9 struct {
	CnttTp       ContentType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CnttTp"`
	EnvlpdData   EnvelopedData3     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 EnvlpdData,omitempty"`
	AuthntcdData AuthenticatedData3 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AuthntcdData,omitempty"`
	SgndData     SignedData3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SgndData,omitempty"`
	DgstdData    DigestedData3      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstdData,omitempty"`
}

// May be one of DATA, SIGN, EVLP, DGST, ECRP, AUTH
type ContentType1Code string

type CryptographicKey3 struct {
	Id      Max140Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Id"`
	AddtlId Max35Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AddtlId,omitempty"`
	Vrsn    Exact10Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn"`
}

type CryptographicKey4 struct {
	Id         Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Id"`
	AddtlId    Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AddtlId,omitempty"`
	Vrsn       Exact10Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn"`
	Tp         CryptographicKeyType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Tp,omitempty"`
	Fctn       []KeyUsage1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Fctn"`
	ActvtnDt   ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ActvtnDt,omitempty"`
	DeactvtnDt ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DeactvtnDt,omitempty"`
	KeyVal     ContentInformationType7   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyVal"`
}

// May be one of AES2, EDE3, DKP9
type CryptographicKeyType2Code string

// May be one of AQPR, APPR, TXCP, AKCP, DLGT, MGTP, MRPR, SCPR, SWPK, STRP, TRPR, VDPR
type DataSetCategory3Code string

type DataSetIdentification3 struct {
	Nm      Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Nm,omitempty"`
	Tp      DataSetCategory3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Tp"`
	Vrsn    Max256Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	CreDtTm ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CreDtTm,omitempty"`
}

type DigestedData3 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent2       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcpsltdCntt"`
	Dgst        Max140Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Dgst"`
}

type Document struct {
	AccptrCfgtnUpd AcceptorConfigurationUpdateV03 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AccptrCfgtnUpd"`
}

type EncapsulatedContent2 struct {
	CnttTp ContentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Cntt,omitempty"`
}

type EncryptedContent2 struct {
	CnttTp         ContentType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification6 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CnttNcrptnAlgo"`
	NcrptdData     Max10000Binary           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcrptdData"`
}

type EnvelopedData3 struct {
	Vrsn       float64            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	Rcpt       []Recipient3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Rcpt"`
	NcrptdCntt EncryptedContent2  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcrptdCntt"`
}

// May be no more than 10 items long
type Exact10Text string

type ExchangeConfiguration4 struct {
	XchgPlcy []ExchangePolicy1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 XchgPlcy"`
	MaxNb    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxNb,omitempty"`
	MaxAmt   float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxAmt,omitempty"`
	ReTry    ProcessRetry2         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ReTry,omitempty"`
	TmCond   ProcessTiming3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TmCond,omitempty"`
}

type ExchangeConfiguration5 struct {
	XchgPlcy  []ExchangePolicy1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 XchgPlcy"`
	MaxNb     float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxNb,omitempty"`
	MaxAmt    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxAmt,omitempty"`
	ReTry     ProcessRetry2         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ReTry,omitempty"`
	TmCond    ProcessTiming3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TmCond,omitempty"`
	XchgFaild bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 XchgFaild,omitempty"`
	XchgDclnd bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 XchgDclnd,omitempty"`
}

// May be one of ONDM, IMMD, ASAP, AGRP, NBLT, TTLT, CYCL, NONE
type ExchangePolicy1Code string

// May be one of AUTH, COMP, BTCH
type FinancialCapture1Code string

type GenericIdentification32 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Tp,omitempty"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ShrtNm,omitempty"`
}

type GenericIdentification35 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Id"`
	Tp     PartyType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Tp,omitempty"`
	Issr   PartyType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ShrtNm,omitempty"`
}

type Header4 struct {
	DwnldTrf bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DwnldTrf"`
	FrmtVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 FrmtVrsn"`
	XchgId   Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 XchgId"`
	CreDtTm  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 CreDtTm"`
	InitgPty GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 InitgPty"`
	RcptPty  GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 RcptPty,omitempty"`
}

type HostCommunicationParameter2 struct {
	HstId Max35Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 HstId"`
	Adr   NetworkParameters1  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Adr,omitempty"`
	Key   []CryptographicKey3 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Key,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type IssuerAndSerialNumber1 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Issr"`
	SrlNb Max35Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SrlNb"`
}

type KEK3 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	KEKId         KEKIdentifier1           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification9 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyNcrptnAlgo"`
	NcrptdKey     Max140Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcrptdKey"`
}

type KEKIdentifier1 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyId"`
	KeyVrsn   Exact10Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyVrsn"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DerivtnId,omitempty"`
}

type KeyTransport3 struct {
	Vrsn          float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	RcptId        CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyNcrptnAlgo"`
	NcrptdKey     Max3000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcrptdKey"`
}

// May be one of ENCR, DCPT, DENC, DDEC, TRNI, TRNX, MACG, MACV, SIGG, SUGV, PINE, PIND, PINV, KEYG, KEYI, KEYX, KEYD
type KeyUsage1Code string

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max140Text string

// Must be at least 1 items long
type Max16Text string

// Must be at least 1 items long
type Max256Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max6Text string

// Must be at least 1 items long
type Max70Text string

// Must match the pattern [0-9]{1,9}
type Max9NumericText string

// May be one of FAUQ, CCAQ, CMPV, DGNP, RCLQ, CCAV, BTCH, FRVA, AUTQ, FCMV, RVRA
type MessageFunction3Code string

type MessageItemCondition1 struct {
	ItmId Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ItmId"`
	Cond  MessageItemCondition1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Cond"`
	Val   []Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Val,omitempty"`
}

// May be one of MNDT, CFVL, DFLT, ALWV, IFAV, COPY, UNSP
type MessageItemCondition1Code string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type NetworkParameters1 struct {
	PmryAdr      Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 PmryAdr"`
	PmryPortNb   float64       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 PmryPortNb"`
	ScndryAdr    Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ScndryAdr,omitempty"`
	ScndryPortNb float64       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ScndryPortNb,omitempty"`
	UsrNm        Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 UsrNm,omitempty"`
	AccsCd       Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AccsCd,omitempty"`
	ClntCert     Max3000Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ClntCert,omitempty"`
}

type NetworkParameters2 struct {
	Adr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Adr"`
	PortNb float64   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 PortNb,omitempty"`
	Dely   ISOTime   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Dely,omitempty"`
}

type Parameter1 struct {
	InitlstnVctr Max500Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 InitlstnVctr,omitempty"`
}

type Parameter2 struct {
	DgstAlgo     Algorithm5Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MskGnrtrAlgo,omitempty"`
}

type Parameter3 struct {
	DgstAlgo Algorithm5Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstAlgo,omitempty"`
}

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS
type PartyType3Code string

// May be one of MERC, ACCP, ITAG, ACQR, CISS, TAXH
type PartyType4Code string

// May be one of OPOI, ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType5Code string

// May be one of ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType6Code string

type PaymentTerminalParameters1 struct {
	ClckSynctn ClockSynchronisation1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 ClckSynctn,omitempty"`
	TmZoneLine []Max70Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TmZoneLine,omitempty"`
	OthrParams Max10000Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 OthrParams,omitempty"`
}

type ProcessRetry2 struct {
	Dely  Max9NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Dely"`
	MaxNb float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxNb,omitempty"`
}

type ProcessTiming3 struct {
	WtgTm   Max9NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 WtgTm,omitempty"`
	StartTm ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 StartTm,omitempty"`
	EndTm   ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 EndTm,omitempty"`
	Prd     Max9NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Prd,omitempty"`
	MaxNb   float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 MaxNb,omitempty"`
}

type Recipient3Choice struct {
	KeyTrnsprt KeyTransport3  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyTrnsprt"`
	KEK        KEK3           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KEK"`
	KeyIdr     KEKIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 KeyIdr"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 AttrVal"`
}

type SecurityParameters2 struct {
	POIChllng Max140Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 POIChllng,omitempty"`
	TMChllng  Max140Binary        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 TMChllng,omitempty"`
	SmmtrcKey []CryptographicKey4 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SmmtrcKey,omitempty"`
}

type SignedData3 struct {
	Vrsn        float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent2       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 NcpsltdCntt"`
	Cert        []Max3000Binary            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Cert,omitempty"`
	Sgnr        []Signer2                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Sgnr"`
}

type Signer2 struct {
	Vrsn      float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Vrsn,omitempty"`
	SgnrId    CertificateIdentifier1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SgnrId"`
	DgstAlgo  AlgorithmIdentification5 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 DgstAlgo"`
	SgntrAlgo AlgorithmIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SgntrAlgo"`
	Sgntr     Max500Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Sgntr"`
}

type TerminalManagementDataSet11 struct {
	Id      DataSetIdentification3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Id"`
	SeqCntr Max9NumericText               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 SeqCntr,omitempty"`
	Cntt    AcceptorConfigurationContent3 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.03 Cntt"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
