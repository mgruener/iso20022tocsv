// Code generated by main. DO NOT EDIT.

package catm_004_001_01

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorRejection1 struct {
	RjctRsn  RejectReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 RjctRsn"`
	AddtlInf Max500Text        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 AddtlInf,omitempty"`
	MsgInErr Max5000Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 MsgInErr,omitempty"`
}

type Document struct {
	TermnlMgmtRjctn TerminalManagementRejectionV01 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 TermnlMgmtRjctn"`
}

type GenericIdentification35 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 Id"`
	Tp     PartyType5Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 Tp,omitempty"`
	Issr   PartyType6Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 ShrtNm,omitempty"`
}

type Header6 struct {
	DwnldTrf bool                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 DwnldTrf"`
	FrmtVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 FrmtVrsn"`
	XchgId   Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 XchgId,omitempty"`
	CreDtTm  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 CreDtTm"`
	InitgPty GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 InitgPty,omitempty"`
	RcptPty  GenericIdentification35 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 RcptPty,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must be at least 1 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// Must be at least 1 items long
type Max500Text string

// Must be at least 1 items long
type Max6Text string

// May be one of OPOI, ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType5Code string

// May be one of ACCP, MERC, ACQR, ITAG, MTMG, TMGT
type PartyType6Code string

// May be one of UNPR, IMSG, PARS, SECU, INTP, RCPP, DPMG, VERS, MSGT
type RejectReason1Code string

type TerminalManagementRejectionV01 struct {
	Hdr  Header6            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 Hdr"`
	Rjct AcceptorRejection1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.004.001.01 Rjct"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
